/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 50);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["f"] = registerRPC;
/* harmony export (immutable) */ __webpack_exports__["e"] = registerPromiseRPC;
/* harmony export (immutable) */ __webpack_exports__["d"] = initializeSharedObjectCounterpart;
/* unused harmony export registerSharedObjectOwner */
/* harmony export (immutable) */ __webpack_exports__["g"] = registerSharedObject;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_disposable__ = __webpack_require__(30);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var IS_WORKER = true;
var DEBUG = false;
var DEBUG_MESSAGES = false;
var PROMISE_RESPONSE_ID = 'rpc.promise.response';
var PROMISE_CANCEL_ID = 'rpc.promise.cancel';
var handlers = new Map();
function registerRPC(key, handler) {
    handlers.set(key, handler);
}
class RPCError extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
        this.message = message;
    }
}
/* unused harmony export RPCError */

function registerPromiseRPC(key, handler) {
    registerRPC(key, function (x) {
        var id = x['id'];
        var cancellationToken = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["b" /* CancellationTokenSource */]();
        var promise = handler.call(this, x, cancellationToken);
        this.set(id, { promise, cancellationToken });
        promise.then((_ref) => {
            var value = _ref.value,
                transfers = _ref.transfers;

            this.delete(id);
            this.invoke(PROMISE_RESPONSE_ID, { 'id': id, 'value': value }, transfers);
        }, error => {
            this.delete(id);
            this.invoke(PROMISE_RESPONSE_ID, { 'id': id, 'error': error.message, 'errorName': error.name });
        });
    });
}
registerRPC(PROMISE_CANCEL_ID, function (x) {
    var id = x['id'];

    var _get = this.get(id),
        cancellationToken = _get.cancellationToken;

    cancellationToken.cancel();
});
registerRPC(PROMISE_RESPONSE_ID, function (x) {
    var id = x['id'];

    var _get2 = this.get(id),
        resolve = _get2.resolve,
        reject = _get2.reject;

    this.delete(id);
    if (x.hasOwnProperty('value')) {
        resolve(x['value']);
    } else {
        var errorName = x['errorName'];
        if (errorName === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["a" /* CANCELED */].name) {
            reject(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["a" /* CANCELED */]);
        } else {
            reject(new RPCError(x['errorName'], x['error']));
        }
    }
});
var INITIAL_RPC_ID = IS_WORKER ? -1 : 0;
class RPC {
    constructor(target) {
        this.target = target;
        this.objects = new Map();
        this.nextId = INITIAL_RPC_ID;
        target.onmessage = e => {
            var data = e.data;
            if (DEBUG_MESSAGES) {
                console.log('Received message', data);
            }
            handlers.get(data.functionName).call(this, data);
        };
    }
    get numObjects() {
        return this.objects.size;
    }
    set(id, value) {
        this.objects.set(id, value);
    }
    delete(id) {
        this.objects.delete(id);
    }
    get(id) {
        return this.objects.get(id);
    }
    getRef(x) {
        var rpcId = x['id'];
        var obj = this.get(rpcId);
        obj.referencedGeneration = x['gen'];
        obj.addRef();
        return obj;
    }
    invoke(name, x, transfers) {
        x.functionName = name;
        if (DEBUG_MESSAGES) {
            console.trace('Sending message', x);
        }
        this.target.postMessage(x, transfers);
    }
    promiseInvoke(name, x) {
        var cancellationToken = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["d" /* uncancelableToken */];
        var transfers = arguments[3];

        return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["c" /* makeCancelablePromise */])(cancellationToken, (resolve, reject, token) => {
            var id = x['id'] = this.newId();
            this.set(id, { resolve, reject });
            this.invoke(name, x, transfers);
            token.add(() => {
                this.invoke(PROMISE_CANCEL_ID, { 'id': id });
            });
        });
    }
    newId() {
        return IS_WORKER ? this.nextId-- : this.nextId++;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RPC;

class SharedObject extends __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_disposable__["a" /* RefCounted */] {
    constructor() {
        super(...arguments);
        this.rpc = null;
        this.rpcId = null;
    }
    initializeSharedObject(rpc) {
        var rpcId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rpc.newId();

        this.rpc = rpc;
        this.rpcId = rpcId;
        this.isOwner = false;
        rpc.set(rpcId, this);
    }
    initializeCounterpart(rpc) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        this.initializeSharedObject(rpc);
        this.unreferencedGeneration = 0;
        this.referencedGeneration = 0;
        this.isOwner = true;
        options['id'] = this.rpcId;
        options['type'] = this.RPC_TYPE_ID;
        rpc.invoke('SharedObject.new', options);
    }
    dispose() {
        super.dispose();
    }
    /**
     * Precondition: this.isOwner === true.
     */
    addCounterpartRef() {
        return { 'id': this.rpcId, 'gen': ++this.referencedGeneration };
    }
    refCountReachedZero() {
        if (this.isOwner === true) {
            if (this.referencedGeneration === this.unreferencedGeneration) {
                this.ownerDispose();
            }
        } else if (this.isOwner === false) {
            this.rpc.invoke('SharedObject.refCountReachedZero', { 'id': this.rpcId, 'gen': this.referencedGeneration });
        } else {
            super.refCountReachedZero();
        }
    }
    /**
     * Precondition: this.isOwner === true.
     */
    ownerDispose() {
        if (DEBUG) {
            console.log(`[${IS_WORKER}] #rpc object = ${this.rpc.numObjects}`);
        }
        var rpc = this.rpc,
            rpcId = this.rpcId;

        super.refCountReachedZero();
        rpc.delete(rpcId);
        rpc.invoke('SharedObject.dispose', { 'id': rpcId });
    }
    /**
     * Precondition: this.isOwner === true.
     *
     * This should be called when the counterpart's refCount is decremented and reaches zero.
     */
    counterpartRefCountReachedZero(generation) {
        this.unreferencedGeneration = generation;
        if (this.refCount === 0 && generation === this.referencedGeneration) {
            this.ownerDispose();
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = SharedObject;

function initializeSharedObjectCounterpart(obj, rpc) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (rpc != null) {
        obj.initializeSharedObject(rpc, options['id']);
    }
}
/**
 * Base class for defining a SharedObject type that will never be owned.
 */
class SharedObjectCounterpart extends SharedObject {
    constructor(rpc) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        super();
        initializeSharedObjectCounterpart(this, rpc, options);
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = SharedObjectCounterpart;

registerRPC('SharedObject.dispose', function (x) {
    var obj = this.get(x['id']);
    if (obj.refCount !== 0) {
        throw new Error(`Attempted to dispose object with non-zero reference count.`);
    }
    if (DEBUG) {
        console.log(`[${IS_WORKER}] #rpc objects: ${this.numObjects}`);
    }
    obj.disposed();
    this.delete(obj.rpcId);
    obj.rpcId = null;
    obj.rpc = null;
});
registerRPC('SharedObject.refCountReachedZero', function (x) {
    var obj = this.get(x['id']);
    var generation = x['gen'];
    obj.counterpartRefCountReachedZero(generation);
});
var sharedObjectConstructors = new Map();
/**
 * Register a class as a SharedObject owner type under the specified identifier.
 *
 * This is intended to be used as a decorator.
 */
function registerSharedObjectOwner(identifier) {
    return constructorFunction => {
        constructorFunction.prototype.RPC_TYPE_ID = identifier;
    };
}
/**
 * Register a class as a SharedObject counterpart type under the specified identifier.
 *
 * This is intended to be used as a decorator.
 *
 * Also register the type as a SharedObject owner, which is useful if this type is also used as a
 * SharedObject owner.
 */
function registerSharedObject(identifier) {
    return constructorFunction => {
        sharedObjectConstructors.set(identifier, constructorFunction);
        constructorFunction.prototype.RPC_TYPE_ID = identifier;
    };
}
registerRPC('SharedObject.new', function (x) {
    var rpc = this;
    var typeName = x['type'];
    var constructorFunction = sharedObjectConstructors.get(typeName);
    var obj = new constructorFunction(rpc, x);
    // Counterpart objects start with a reference count of zero.
    --obj.refCount;
});

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return identityMat4; });
/* unused harmony export AXES_NAMES */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return kAxes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return kZeroVec; });
/* unused harmony export kOneVec */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return kInfinityVec; });
/* unused harmony export kIdentityQuat */
/* harmony export (immutable) */ __webpack_exports__["h"] = prod3;
/* unused harmony export prod4 */
/* harmony export (immutable) */ __webpack_exports__["m"] = vec3Key;
/* unused harmony export rectifyVec3IfAxisAligned */
/* harmony export (immutable) */ __webpack_exports__["j"] = rectifyTransformMatrixIfAxisAligned;
/* unused harmony export quatRotateX180 */
/* unused harmony export quatRotateY180 */
/* unused harmony export quatRotateZ180 */
/* harmony export (immutable) */ __webpack_exports__["k"] = transformVectorByMat4;
/* harmony export (immutable) */ __webpack_exports__["b"] = effectiveScalingFactorFromMat4;
/* unused harmony export translationRotationScaleZReflectionToMat4 */
/* unused harmony export compactMorton */
/* harmony export (immutable) */ __webpack_exports__["a"] = decodeMorton;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__ = __webpack_require__(6);
/* unused harmony reexport mat2 */
/* unused harmony reexport mat3 */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["b"]; });
/* unused harmony reexport vec2 */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c"]; });
/* unused harmony reexport vec4 */
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var identityMat4 = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* mat4 */].create();
var AXES_NAMES = ['x', 'y', 'z'];
class BoundingBox {
    constructor(lower, upper) {
        this.lower = lower;
        this.upper = upper;
    }
}
/* unused harmony export BoundingBox */

var kAxes = [__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].fromValues(1, 0, 0), __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].fromValues(0, 1, 0), __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].fromValues(0, 0, 1)];
var kZeroVec = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].fromValues(0, 0, 0);
var kOneVec = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].fromValues(1, 1, 1);
var kInfinityVec = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].fromValues(Infinity, Infinity, Infinity);
var kIdentityQuat = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["b" /* quat */].create();
function prod3(x) {
    return x[0] * x[1] * x[2];
}
function prod4(x) {
    return x[0] * x[1] * x[2] * x[3];
}
/**
 * Implements a one-to-one conversion from Vec3 to string, suitable for use a Map key.
 *
 * Specifically, returns the string representation of the 3 values separated by commas.
 */
function vec3Key(x) {
    return `${x[0]},${x[1]},${x[2]}`;
}
var RECTIFY_EPSILON = 1e-4;
function rectifyVec3IfAxisAligned(v, offset) {
    var a0 = Math.abs(v[offset]),
        a1 = Math.abs(v[offset + 1]),
        a2 = Math.abs(v[offset + 2]);
    var max = Math.max(a0, a1, a2);
    if (a0 / max < RECTIFY_EPSILON) {
        v[offset] = 0;
    }
    if (a1 / max < RECTIFY_EPSILON) {
        v[offset + 1] = 0;
    }
    if (a2 / max < RECTIFY_EPSILON) {
        v[offset + 2] = 0;
    }
}
/**
 * Makes columns of m that are approximately axis-aligned exactly axis aligned.
 *
 * Note that mat is stored in Fortran order, and therefore the first column is m[0], m[1], m[2].
 */
function rectifyTransformMatrixIfAxisAligned(m) {
    rectifyVec3IfAxisAligned(m, 0);
    rectifyVec3IfAxisAligned(m, 4);
    rectifyVec3IfAxisAligned(m, 8);
}
/**
 * Transforms `a` by a 180-degree rotation about X, stores result in `out`.
 */
function quatRotateX180(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    out[0] = w;
    out[1] = z;
    out[2] = -y;
    out[3] = -x;
}
/**
 * Transforms `a` by a 180-degree rotation about Y, stores result in `out`.
 */
function quatRotateY180(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    out[0] = -z;
    out[1] = w;
    out[2] = x;
    out[3] = -y;
}
/**
 * Transforms `a` by a 180-degree rotation about Z, stores result in `out`.
 */
function quatRotateZ180(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    out[0] = y;
    out[1] = -x;
    out[2] = w;
    out[3] = -z;
}
/**
 * Transforms a vector `a` by a homogenous transformation matrix `m`.  The translation component of
 * `m` is ignored.
 */
function transformVectorByMat4(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z;
    out[1] = m[1] * x + m[5] * y + m[9] * z;
    out[2] = m[2] * x + m[6] * y + m[10] * z;
    return out;
}
/**
 * Computes the effective scaling factor of each local spatial dimension by `m`, which is assumed to
 * transform local coordinates to global coordinates.
 */
function effectiveScalingFactorFromMat4(out, m) {
    var m0 = m[0],
        m1 = m[1],
        m2 = m[2],
        m4 = m[4],
        m5 = m[5],
        m6 = m[6],
        m8 = m[8],
        m9 = m[9],
        m10 = m[10];
    out[0] = Math.sqrt(m0 * m0 + m1 * m1 + m2 * m2);
    out[1] = Math.sqrt(m4 * m4 + m5 * m5 + m6 * m6);
    out[2] = Math.sqrt(m8 * m8 + m9 * m9 + m10 * m10);
    return out;
}
function translationRotationScaleZReflectionToMat4(out, translation, rotation, scale, zReflection) {
    var temp = out;
    out[0] = scale[0];
    out[1] = scale[1];
    out[2] = scale[2] * zReflection;
    return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* mat4 */].fromRotationTranslationScale(out, rotation, translation, temp);
}
/**
 * Transforms a z-index to/from Morton Codes (i.e. z-indices).
 */
var magicBits = [new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](0x49249249, 0x12492492), new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](0xc30c30c3, 0x30c30c30), new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](0x0f00f00f, 0xf00f00f0), new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](0xff0000ff, 0x00ff0000), new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](0x0000ffff, 0x00ff0000), new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](0x001fffff, 0x00000000)];
function compactMorton(input) {
    var x = input;
    x = x.and(magicBits[0]);
    for (var i = 1; i < magicBits.length; ++i) {
        x = x.xor(x.rshift(Math.pow(2, i))).and(magicBits[i]);
    }
    return x;
}
function decodeMorton(input) {
    if (input.high) {
        throw new Error('Fragment ids >= 2^32 not supported yet');
    }
    var x = compactMorton(input.rshift(0));
    var y = compactMorton(input.rshift(1));
    var z = compactMorton(input.rshift(2));
    return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* vec3 */].clone([x.low, y.low, z.low]);
}

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkQueueManager", function() { return ChunkQueueManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkManager", function() { return ChunkManager; });
/* harmony export (immutable) */ __webpack_exports__["registerChunkSource"] = registerChunkSource;
/* harmony export (immutable) */ __webpack_exports__["withChunkManager"] = withChunkManager;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_cancellation__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_linked_list_0__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_linked_list_1__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_memoize__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_pairing_heap_0__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_pairing_heap_1__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_signal__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var DEBUG_CHUNK_UPDATES = false;
class Chunk {
    constructor() {
        // Node properties used for eviction/promotion heaps and LRU linked lists.
        this.child0 = null;
        this.next0 = null;
        this.prev0 = null;
        this.child1 = null;
        this.next1 = null;
        this.prev1 = null;
        this.source = null;
        this.key = null;
        this.state = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].NEW;
        this.error = null;
        /**
         * Specifies existing priority within priority tier.  Only meaningful if priorityTier in
         * CHUNK_ORDERED_PRIORITY_TIERS.
         */
        this.priority = 0;
        /**
         * Specifies updated priority within priority tier, not yet reflected in priority queue state.
         * Only meaningful if newPriorityTier in CHUNK_ORDERED_PRIORITY_TIERS.
         */
        this.newPriority = 0;
        this.priorityTier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT;
        /**
         * Specifies updated priority tier, not yet reflected in priority queue state.
         */
        this.newPriorityTier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT;
        this.backendOnly = false;
        /**
         * Cancellation token used to cancel the pending download.  Set to undefined except when state !==
         * DOWNLOADING.  This should not be accessed by code outside this module.
         */
        this.downloadCancellationToken = undefined;
    }
    initialize(key) {
        this.key = key;
        this.state = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].NEW;
        this.priority = Number.NEGATIVE_INFINITY;
        this.priorityTier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT;
        this.newPriority = Number.NEGATIVE_INFINITY;
        this.newPriorityTier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT;
        this.error = null;
    }
    /**
     * Sets this.priority{Tier,} to this.newPriority{Tier,}, and resets this.newPriorityTier to
     * ChunkPriorityTier.RECENT.
     *
     * This does not actually update any queues to reflect this change.
     */
    updatePriorityProperties() {
        this.priorityTier = this.newPriorityTier;
        this.priority = this.newPriority;
        this.newPriorityTier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT;
        this.newPriority = Number.NEGATIVE_INFINITY;
    }
    dispose() {
        this.source = null;
        this.error = null;
    }
    get chunkManager() {
        return this.source.chunkManager;
    }
    get queueManager() {
        return this.source.chunkManager.queueManager;
    }
    downloadFailed(error) {
        this.error = error;
        this.queueManager.updateChunkState(this, __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].FAILED);
    }
    downloadSucceeded() {
        this.queueManager.updateChunkState(this, __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER);
    }
    freeSystemMemory() {}
    serialize(msg, _transfers) {
        msg['id'] = this.key;
        msg['source'] = this.source.rpcId;
        msg['new'] = true;
    }
    toString() {
        return this.key;
    }
    static priorityLess(a, b) {
        return a.priority < b.priority;
    }
    static priorityGreater(a, b) {
        return a.priority > b.priority;
    }
}
/* harmony export (immutable) */ __webpack_exports__["Chunk"] = Chunk;

/**
 * Base class inherited by both ChunkSource, for implementing the backend part of chunk sources that
 * also have a frontend-part, as well as other chunk sources, such as the GenericFileSource, that
 * has only a backend part.
 */
class ChunkSourceBase extends __WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["b" /* SharedObject */] {
    constructor(chunkManager) {
        super();
        this.chunkManager = chunkManager;
        this.chunks = new Map();
        this.freeChunks = new Array();
    }
    getNewChunk_(chunkType) {
        var freeChunks = this.freeChunks;
        var freeChunksLength = freeChunks.length;
        if (freeChunksLength > 0) {
            var _chunk = freeChunks[freeChunksLength - 1];
            freeChunks.length = freeChunksLength - 1;
            _chunk.source = this;
            return _chunk;
        }
        var chunk = new chunkType();
        chunk.source = this;
        return chunk;
    }
    /**
     * Adds the specified chunk to the chunk cache.
     *
     * If the chunk cache was previously empty, also call this.addRef() to increment the reference
     * count.
     */
    addChunk(chunk) {
        var chunks = this.chunks;

        if (chunks.size === 0) {
            this.addRef();
        }
        chunks.set(chunk.key, chunk);
    }
    /**
     * Remove the specified chunk from the chunk cache.
     *
     * If the chunk cache becomes empty, also call this.dispose() to decrement the reference count.
     */
    removeChunk(chunk) {
        var chunks = this.chunks,
            freeChunks = this.freeChunks;

        chunks.delete(chunk.key);
        chunk.dispose();
        freeChunks[freeChunks.length] = chunk;
        if (chunks.size === 0) {
            this.dispose();
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["ChunkSourceBase"] = ChunkSourceBase;

class ChunkSource extends ChunkSourceBase {
    constructor(rpc, options) {
        // No need to add a reference, since the owner counterpart will hold a reference to the owner
        // counterpart of chunkManager.
        var chunkManager = rpc.get(options['chunkManager']);
        super(chunkManager);
        Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["d" /* initializeSharedObjectCounterpart */])(this, rpc, options);
    }
}
/* harmony export (immutable) */ __webpack_exports__["ChunkSource"] = ChunkSource;

function startChunkDownload(chunk) {
    var downloadCancellationToken = chunk.downloadCancellationToken = new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_cancellation__["b" /* CancellationTokenSource */]();
    chunk.source.download(chunk, downloadCancellationToken).then(() => {
        if (chunk.downloadCancellationToken === downloadCancellationToken) {
            chunk.downloadCancellationToken = undefined;
            chunk.downloadSucceeded();
        }
    }, error => {
        if (chunk.downloadCancellationToken === downloadCancellationToken) {
            chunk.downloadCancellationToken = undefined;
            chunk.downloadFailed(error);
            console.log(`Error retrieving chunk ${chunk}: ${error}`);
        }
    });
}
function cancelChunkDownload(chunk) {
    var token = chunk.downloadCancellationToken;
    chunk.downloadCancellationToken = undefined;
    token.cancel();
}
class ChunkPriorityQueue {
    constructor(heapOperations, linkedListOperations) {
        this.heapOperations = heapOperations;
        this.linkedListOperations = linkedListOperations;
        /**
         * Heap roots for VISIBLE and PREFETCH priority tiers.
         */
        this.heapRoots = [null, null];
        /**
         * Head node for RECENT linked list.
         */
        this.recentHead = new Chunk();
        linkedListOperations.initializeHead(this.recentHead);
    }
    add(chunk) {
        var priorityTier = chunk.priorityTier;
        if (priorityTier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
            this.linkedListOperations.insertAfter(this.recentHead, chunk);
        } else {
            var heapRoots = this.heapRoots;

            heapRoots[priorityTier] = this.heapOperations.meld(heapRoots[priorityTier], chunk);
        }
    }
    *candidates() {
        if (this.heapOperations.compare === Chunk.priorityLess) {
            // Start with least-recently used RECENT chunk.
            var linkedListOperations = this.linkedListOperations,
                recentHead = this.recentHead;

            while (true) {
                var chunk = linkedListOperations.back(recentHead);
                if (chunk == null) {
                    break;
                } else {
                    yield chunk;
                }
            }
            var heapRoots = this.heapRoots;

            for (var tier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].LAST_ORDERED_TIER; tier >= __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].FIRST_ORDERED_TIER; --tier) {
                while (true) {
                    var root = heapRoots[tier];
                    if (root == null) {
                        break;
                    } else {
                        yield root;
                    }
                }
            }
        } else {
            var _heapRoots = this.heapRoots;
            for (var _tier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].FIRST_ORDERED_TIER; _tier <= __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].LAST_ORDERED_TIER; ++_tier) {
                while (true) {
                    var _root = _heapRoots[_tier];
                    if (_root == null) {
                        break;
                    } else {
                        yield _root;
                    }
                }
            }
            var _linkedListOperations = this.linkedListOperations,
                _recentHead = this.recentHead;

            while (true) {
                var _chunk2 = _linkedListOperations.front(_recentHead);
                if (_chunk2 == null) {
                    break;
                } else {
                    yield _chunk2;
                }
            }
        }
    }
    /**
     * Deletes a chunk from this priority queue.
     * @param chunk The chunk to delete from the priority queue.
     */
    delete(chunk) {
        var priorityTier = chunk.priorityTier;
        if (priorityTier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
            this.linkedListOperations.pop(chunk);
        } else {
            var heapRoots = this.heapRoots;
            heapRoots[priorityTier] = this.heapOperations.remove(heapRoots[priorityTier], chunk);
        }
    }
}
function makeChunkPriorityQueue0(compare) {
    return new ChunkPriorityQueue(new __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_pairing_heap_0__["a" /* default */](compare), __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_linked_list_0__["a" /* default */]);
}
function makeChunkPriorityQueue1(compare) {
    return new ChunkPriorityQueue(new __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_pairing_heap_1__["a" /* default */](compare), __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_linked_list_1__["a" /* default */]);
}
function tryToFreeCapacity(size, capacity, priorityTier, priority, evictionCandidates, evict) {
    while (capacity.availableItems < 1 || capacity.availableSize < size) {
        var evictionCandidate = evictionCandidates.next().value;
        if (evictionCandidate === undefined) {
            // No eviction candidates available, promotions are done.
            return false;
        } else {
            var evictionTier = evictionCandidate.priorityTier;
            if (evictionTier < priorityTier || evictionTier === priorityTier && evictionCandidate.priority >= priority) {
                // Lowest priority eviction candidate has priority >= highest
                // priority promotion candidate.  No more promotions are
                // possible.
                return false;
            }
            evict(evictionCandidate);
        }
    }
    return true;
}
var ChunkQueueManager = class ChunkQueueManager extends __WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */] {
    constructor(rpc, options) {
        super(rpc, options);
        /**
         * Contains all chunks in QUEUED state.
         */
        this.queuedPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);
        /**
         * Contains all chunks in DOWNLOADING state.
         */
        this.downloadEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);
        /**
         * Contains all chunks that take up memory (DOWNLOADING, SYSTEM_MEMORY,
         * GPU_MEMORY).
         */
        this.systemMemoryEvictionQueue = makeChunkPriorityQueue0(Chunk.priorityLess);
        /**
         * Contains all chunks in SYSTEM_MEMORY state not in RECENT priority tier.
         */
        this.gpuMemoryPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);
        /**
         * Contains all chunks in GPU_MEMORY state.
         */
        this.gpuMemoryEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);
        this.updatePending = null;
        this.numQueued = 0;
        this.numFailed = 0;
        this.gpuMemoryCapacity = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["a" /* AvailableCapacity */].fromObject(options['gpuMemoryCapacity']);
        this.systemMemoryCapacity = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["a" /* AvailableCapacity */].fromObject(options['systemMemoryCapacity']);
        this.downloadCapacity = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["a" /* AvailableCapacity */].fromObject(options['downloadCapacity']);
    }
    scheduleUpdate() {
        if (this.updatePending === null) {
            this.updatePending = setTimeout(this.process.bind(this), 0);
        }
    }
    *chunkQueuesForChunk(chunk) {
        switch (chunk.state) {
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].QUEUED:
                yield this.queuedPromotionQueue;
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].DOWNLOADING:
                yield this.downloadEvictionQueue;
                yield this.systemMemoryEvictionQueue;
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER:
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY:
                yield this.systemMemoryEvictionQueue;
                if (chunk.priorityTier !== __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT && !chunk.backendOnly) {
                    yield this.gpuMemoryPromotionQueue;
                }
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].GPU_MEMORY:
                yield this.systemMemoryEvictionQueue;
                yield this.gpuMemoryEvictionQueue;
                break;
        }
    }
    adjustCapacitiesForChunk(chunk, add) {
        var factor = add ? -1 : 1;
        switch (chunk.state) {
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].FAILED:
                this.numFailed -= factor;
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].QUEUED:
                this.numQueued -= factor;
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].DOWNLOADING:
                this.downloadCapacity.adjust(factor, 0);
                this.systemMemoryCapacity.adjust(factor, 0);
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY:
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER:
                this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].GPU_MEMORY:
                this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);
                this.gpuMemoryCapacity.adjust(factor, factor * chunk.gpuMemoryBytes);
                break;
        }
    }
    removeChunkFromQueues_(chunk) {
        for (var queue of this.chunkQueuesForChunk(chunk)) {
            queue.delete(chunk);
        }
    }
    // var freedChunks = 0;
    addChunkToQueues_(chunk) {
        if (chunk.state === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].QUEUED && chunk.priorityTier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
            // Delete this chunk.
            var source = chunk.source;

            source.removeChunk(chunk);
            this.adjustCapacitiesForChunk(chunk, false);
            return false;
        } else {
            for (var queue of this.chunkQueuesForChunk(chunk)) {
                queue.add(chunk);
            }
            return true;
        }
    }
    performChunkPriorityUpdate(chunk) {
        if (chunk.priorityTier === chunk.newPriorityTier && chunk.priority === chunk.newPriority) {
            chunk.newPriorityTier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT;
            chunk.newPriority = Number.NEGATIVE_INFINITY;
            return;
        }
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`${chunk}: changed priority ${chunk.priorityTier}:` + `${chunk.priority} -> ${chunk.newPriorityTier}:${chunk.newPriority}`);
        }
        this.removeChunkFromQueues_(chunk);
        chunk.updatePriorityProperties();
        if (chunk.state === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].NEW) {
            chunk.state = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].QUEUED;
            this.adjustCapacitiesForChunk(chunk, true);
        }
        this.addChunkToQueues_(chunk);
    }
    updateChunkState(chunk, newState) {
        if (newState === chunk.state) {
            return;
        }
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`${chunk}: changed state ${chunk.state} -> ${newState}`);
        }
        this.adjustCapacitiesForChunk(chunk, false);
        this.removeChunkFromQueues_(chunk);
        chunk.state = newState;
        this.adjustCapacitiesForChunk(chunk, true);
        this.addChunkToQueues_(chunk);
        this.scheduleUpdate();
    }
    processGPUPromotions_() {
        var queueManager = this;
        function evictFromGPUMemory(chunk) {
            queueManager.freeChunkGPUMemory(chunk);
            chunk.source.chunkManager.queueManager.updateChunkState(chunk, __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY);
        }
        var promotionCandidates = this.gpuMemoryPromotionQueue.candidates();
        var evictionCandidates = this.gpuMemoryEvictionQueue.candidates();
        var capacity = this.gpuMemoryCapacity;
        var visibleChunksChanged = false;
        while (true) {
            var promotionCandidate = promotionCandidates.next().value;
            if (promotionCandidate === undefined) {
                break;
            } else {
                var priorityTier = promotionCandidate.priorityTier;
                var priority = promotionCandidate.priority;
                if (!tryToFreeCapacity(promotionCandidate.gpuMemoryBytes, capacity, priorityTier, priority, evictionCandidates, evictFromGPUMemory)) {
                    break;
                }
                this.copyChunkToGPU(promotionCandidate);
                this.updateChunkState(promotionCandidate, __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].GPU_MEMORY);
                if (priorityTier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].VISIBLE) {
                    visibleChunksChanged = true;
                }
            }
        }
    }
    freeChunkGPUMemory(chunk) {
        this.rpc.invoke('Chunk.update', { 'id': chunk.key, 'state': __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY, 'source': chunk.source.rpcId });
    }
    freeChunkSystemMemory(chunk) {
        if (chunk.state === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER) {
            chunk.freeSystemMemory();
        } else {
            this.rpc.invoke('Chunk.update', { 'id': chunk.key, 'state': __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].EXPIRED, 'source': chunk.source.rpcId });
        }
    }
    copyChunkToGPU(chunk) {
        var rpc = this.rpc;
        if (chunk.state === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY) {
            rpc.invoke('Chunk.update', { 'id': chunk.key, 'source': chunk.source.rpcId, 'state': __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].GPU_MEMORY });
        } else {
            var msg = {};
            var transfers = [];
            chunk.serialize(msg, transfers);
            msg['state'] = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].GPU_MEMORY;
            rpc.invoke('Chunk.update', msg, transfers);
        }
    }
    processQueuePromotions_() {
        var queueManager = this;
        function evict(chunk) {
            switch (chunk.state) {
                case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].DOWNLOADING:
                    cancelChunkDownload(chunk);
                    break;
                case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].GPU_MEMORY:
                    queueManager.freeChunkGPUMemory(chunk);
                case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER:
                case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY:
                    queueManager.freeChunkSystemMemory(chunk);
                    break;
            }
            // Note: After calling this, chunk may no longer be valid.
            chunk.source.chunkManager.queueManager.updateChunkState(chunk, __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].QUEUED);
        }
        var promotionCandidates = this.queuedPromotionQueue.candidates();
        var downloadEvictionCandidates = this.downloadEvictionQueue.candidates();
        var systemMemoryEvictionCandidates = this.systemMemoryEvictionQueue.candidates();
        var downloadCapacity = this.downloadCapacity;
        var systemMemoryCapacity = this.systemMemoryCapacity;
        while (true) {
            var promotionCandidateResult = promotionCandidates.next();
            if (promotionCandidateResult.done) {
                return;
            }
            var promotionCandidate = promotionCandidateResult.value;
            var size = 0; /* unknown size, since it hasn't been downloaded yet. */
            var priorityTier = promotionCandidate.priorityTier;
            var priority = promotionCandidate.priority;
            // console.log("Download capacity: " + downloadCapacity);
            if (!tryToFreeCapacity(size, downloadCapacity, priorityTier, priority, downloadEvictionCandidates, evict)) {
                return;
            }
            if (!tryToFreeCapacity(size, systemMemoryCapacity, priorityTier, priority, systemMemoryEvictionCandidates, evict)) {
                return;
            }
            this.updateChunkState(promotionCandidate, __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["e" /* ChunkState */].DOWNLOADING);
            startChunkDownload(promotionCandidate);
        }
    }
    process() {
        if (!this.updatePending) {
            return;
        }
        this.updatePending = null;
        this.processGPUPromotions_();
        this.processQueuePromotions_();
        this.logStatistics();
    }
    logStatistics() {
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`[Chunk status] QUEUED: ${this.numQueued}, FAILED: ` + `${this.numFailed}, DOWNLOAD: ${this.downloadCapacity}, ` + `MEM: ${this.systemMemoryCapacity}, GPU: ${this.gpuMemoryCapacity}`);
        }
    }
};
ChunkQueueManager = __decorate([Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["c" /* CHUNK_QUEUE_MANAGER_RPC_ID */])], ChunkQueueManager);

var ChunkManager = class ChunkManager extends __WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */] {
    constructor(rpc, options) {
        super(rpc, options);
        /**
         * Array of chunks within each existing priority tier.
         */
        this.existingTierChunks = [];
        /**
         * Array of chunks whose new priorities have not yet been reflected in the
         * queue states.
         */
        this.newTierChunks = [];
        this.updatePending = null;
        this.recomputeChunkPriorities = new __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_signal__["a" /* NullarySignal */]();
        /**
         * Dispatched immediately after recomputeChunkPriorities is dispatched.
         * This signal should be used for handlers that depend on the result of another handler.
         */
        this.recomputeChunkPrioritiesLate = new __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_signal__["a" /* NullarySignal */]();
        this.memoize = new __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_memoize__["a" /* StringMemoize */]();
        this.queueManager = rpc.get(options['chunkQueueManager']).addRef();
        for (var tier = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].FIRST_TIER; tier <= __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].LAST_TIER; ++tier) {
            if (tier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
                continue;
            }
            this.existingTierChunks[tier] = [];
        }
    }
    scheduleUpdateChunkPriorities() {
        if (this.updatePending === null) {
            this.updatePending = setTimeout(this.recomputeChunkPriorities_.bind(this), 0);
        }
    }
    recomputeChunkPriorities_() {
        this.updatePending = null;
        this.recomputeChunkPriorities.dispatch();
        this.recomputeChunkPrioritiesLate.dispatch();
        this.updateQueueState([__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].VISIBLE]);
    }
    /**
     * @param chunk
     * @param tier New priority tier.  Must not equal ChunkPriorityTier.RECENT.
     * @param priority Priority within tier.
     */
    requestChunk(chunk, tier, priority) {
        if (chunk.newPriorityTier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
            this.newTierChunks.push(chunk);
        }
        chunk.newPriorityTier = tier;
        chunk.newPriority = priority;
    }
    /**
     * Update queue state to reflect updated contents of the specified priority tiers.  Existing
     * chunks within those tiers not present in this.newTierChunks will be moved to the RECENT tier
     * (and removed if in the QUEUED state).
     */
    updateQueueState(tiers) {
        var existingTierChunks = this.existingTierChunks;
        var queueManager = this.queueManager;
        for (var tier of tiers) {
            var chunks = existingTierChunks[tier];
            for (var chunk of chunks) {
                if (chunk.newPriorityTier === __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
                    // Downgrade the priority of this chunk.
                    queueManager.performChunkPriorityUpdate(chunk);
                }
            }
            chunks.length = 0;
        }
        var newTierChunks = this.newTierChunks;
        for (var _chunk3 of newTierChunks) {
            queueManager.performChunkPriorityUpdate(_chunk3);
            existingTierChunks[_chunk3.priorityTier].push(_chunk3);
        }
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`updateQueueState: newTierChunks.length = ${newTierChunks.length}`);
        }
        newTierChunks.length = 0;
        this.queueManager.scheduleUpdate();
    }
};
ChunkManager = __decorate([Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_base__["b" /* CHUNK_MANAGER_RPC_ID */])], ChunkManager);

/**
 * Decorates final subclasses of ChunkSource.
 *
 * Defines the toString method based on the stringify method of the specified Parameters class.
 *
 * Calls registerSharedObject using parametersConstructor.RPC_ID.
 */
function registerChunkSource(parametersConstructor) {
    return target => {
        Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(parametersConstructor.RPC_ID)(target);
        target.prototype.toString = function () {
            return parametersConstructor.stringify(this.parameters);
        };
    };
}
/**
 * Mixin that adds a chunkManager property initialized from the RPC-supplied options.
 *
 * The resultant class implements `ChunkRequester`.
 */
function withChunkManager(Base) {
    return class extends Base {
        constructor() {
            super(...arguments);
            var rpc = arguments.length <= 0 ? undefined : arguments[0];
            var options = arguments.length <= 1 ? undefined : arguments[1];
            // We don't increment the reference count, because our owner owns a reference to the
            // ChunkManager.
            this.chunkManager = this.registerDisposer(rpc.get(options['chunkManager']));
        }
    };
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ARRAY_TYPE; });
/* unused harmony export setMatrixArrayType */
/* unused harmony export toRadian */
/* unused harmony export equals */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * Common utilities
 * @module glMatrix
 */

// Configuration Constants
const EPSILON = 0.000001;
/* harmony export (immutable) */ __webpack_exports__["b"] = EPSILON;

let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
const RANDOM = Math.random;
/* harmony export (immutable) */ __webpack_exports__["c"] = RANDOM;


/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}

const degree = Math.PI / 180;

/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */
function toRadian(a) {
  return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
function equals(a, b) {
  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export verifyFloat */
/* unused harmony export verifyFiniteFloat */
/* unused harmony export verifyFinitePositiveFloat */
/* unused harmony export parseXYZ */
/* unused harmony export parseFiniteVec */
/* unused harmony export parseIntVec */
/* harmony export (immutable) */ __webpack_exports__["c"] = stableStringify;
/* unused harmony export urlSafeStringifyString */
/* unused harmony export urlSafeStringify */
/* unused harmony export normalizeStringLiteral */
/* unused harmony export urlSafeToJSON */
/* unused harmony export jsonToUrlSafe */
/* unused harmony export urlSafeParse */
/* unused harmony export pythonLiteralToJSON */
/* harmony export (immutable) */ __webpack_exports__["b"] = pythonLiteralParse;
/* harmony export (immutable) */ __webpack_exports__["a"] = parseArray;
/* unused harmony export parseFixedLengthArray */
/* harmony export (immutable) */ __webpack_exports__["e"] = verifyObject;
/* unused harmony export verifyInt */
/* unused harmony export verifyPositiveInt */
/* unused harmony export verifyMapKey */
/* harmony export (immutable) */ __webpack_exports__["g"] = verifyString;
/* unused harmony export verifyOptionalString */
/* unused harmony export verifyOptionalInt */
/* harmony export (immutable) */ __webpack_exports__["f"] = verifyObjectProperty;
/* unused harmony export verifyObjectAsMap */
/* unused harmony export verifyFloat01 */
/* unused harmony export parseQueryStringParameters */
/* unused harmony export verifyEnumString */
/* harmony export (immutable) */ __webpack_exports__["d"] = verify3dVec;
/* unused harmony export verify3dScale */
/* unused harmony export verify3dDimensions */
/* harmony export (immutable) */ __webpack_exports__["h"] = verifyStringArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__ = __webpack_require__(1);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function verifyFloat(obj) {
    var t = typeof obj;
    if (t === 'number' || t === 'string') {
        var x = parseFloat('' + obj);
        if (!Number.isNaN(x)) {
            return x;
        }
    }
    throw new Error(`Expected floating-point number, but received: ${JSON.stringify(obj)}.`);
}
function verifyFiniteFloat(obj) {
    var x = verifyFloat(obj);
    if (Number.isFinite(x)) {
        return x;
    }
    throw new Error(`Expected finite floating-point number, but received: ${x}.`);
}
function verifyFinitePositiveFloat(obj) {
    var x = verifyFiniteFloat(obj);
    if (x > 0) {
        return x;
    }
    throw new Error(`Expected positive finite floating-point number, but received: ${x}.`);
}
function parseXYZ(out, obj) {
    var validator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : verifyFloat;

    verifyObject(obj);
    var keys = Object.keys(obj);
    keys.sort();
    if (keys.length !== 3 || keys[0] !== 'x' || keys[1] !== 'y' || keys[2] !== 'z') {
        throw new Error(`Expected object to have keys ['x', 'y', 'z'], but received: ${JSON.stringify(obj)}.`);
    }
    out[0] = validator(obj['x']);
    out[1] = validator(obj['y']);
    out[2] = validator(obj['z']);
    return out;
}
function parseFiniteVec(out, obj) {
    var length = out.length;
    if (!Array.isArray(obj) || obj.length !== length) {
        throw new Error('Incompatible sizes');
    }
    for (var i = 0; i < length; ++i) {
        if (!Number.isFinite(parseFloat(obj[i]))) {
            throw new Error('Non-finite value.');
        }
    }
    for (var _i = 0; _i < length; ++_i) {
        out[_i] = parseFloat(obj[_i]);
    }
    return out;
}
function parseIntVec(out, obj) {
    var length = out.length;
    if (!Array.isArray(obj) || obj.length !== length) {
        throw new Error('Incompatible sizes.');
    }
    for (var i = 0; i < length; ++i) {
        var val = parseInt(obj[i], undefined);
        if (!Number.isInteger(val)) {
            throw new Error('Non-integer value.');
        }
    }
    for (var _i2 = 0; _i2 < length; ++_i2) {
        out[_i2] = parseInt(obj[_i2], undefined);
    }
    return out;
}
/**
 * Returns a JSON representation of x, with object keys sorted to ensure a
 * consistent result.
 */
function stableStringify(x) {
    if (typeof x === 'object') {
        if (x === null) {
            return 'null';
        }
        if (Array.isArray(x)) {
            var _s = '[';
            var _size = x.length;
            var _i3 = 0;
            if (_i3 < _size) {
                _s += stableStringify(x[_i3]);
                while (++_i3 < _size) {
                    _s += ',';
                    _s += stableStringify(x[_i3]);
                }
            }
            _s += ']';
            return _s;
        }
        var s = '{';
        var keys = Object.keys(x).sort();
        var i = 0;
        var size = keys.length;
        if (i < size) {
            var key = keys[i];
            s += JSON.stringify(key);
            s += ':';
            s += stableStringify(x[key]);
            while (++i < size) {
                s += ',';
                key = keys[i];
                s += JSON.stringify(key);
                s += ':';
                s += stableStringify(x[key]);
            }
        }
        s += '}';
        return s;
    }
    return JSON.stringify(x);
}
function swapQuotes(x) {
    return x.replace(/['"]/g, s => {
        return s === '"' ? '\'' : '"';
    });
}
function urlSafeStringifyString(x) {
    return swapQuotes(JSON.stringify(swapQuotes(x)));
}
var URL_SAFE_COMMA = '_';
function urlSafeStringify(x) {
    if (typeof x === 'object') {
        if (x === null) {
            return 'null';
        }
        var toJSON = x['toJSON'];
        if (typeof toJSON === 'function') {
            return urlSafeStringify(toJSON.call(x));
        }
        if (Array.isArray(x)) {
            var _s2 = '[';
            var size = x.length;
            var i = 0;
            if (i < size) {
                _s2 += urlSafeStringify(x[i]);
                while (++i < size) {
                    _s2 += URL_SAFE_COMMA;
                    _s2 += urlSafeStringify(x[i]);
                }
            }
            _s2 += ']';
            return _s2;
        }
        var s = '{';
        var keys = Object.keys(x);
        var first = true;
        for (var key of keys) {
            var value = x[key];
            if (value === undefined) {
                continue;
            }
            var valueString = urlSafeStringify(value);
            if (!valueString) {
                continue;
            }
            if (!first) {
                s += URL_SAFE_COMMA;
            } else {
                first = false;
            }
            s += urlSafeStringifyString(key);
            s += ':';
            s += valueString;
        }
        s += '}';
        return s;
    }
    if (typeof x === 'string') {
        return urlSafeStringifyString(x);
    }
    return JSON.stringify(x);
}
var SINGLE_QUOTE_STRING_PATTERN = /('(?:[^'\\]|(?:\\.))*')/;
var DOUBLE_QUOTE_STRING_PATTERN = /("(?:[^'\\]|(?:\\.))*")/;
var SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN = new RegExp(`${SINGLE_QUOTE_STRING_PATTERN.source}|${DOUBLE_QUOTE_STRING_PATTERN.source}`);
var DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN = new RegExp(`${DOUBLE_QUOTE_STRING_PATTERN.source}|${SINGLE_QUOTE_STRING_PATTERN.source}`);
var DOUBLE_QUOTE_PATTERN = /^((?:[^"'\\]|(?:\\.))*)"/;
var SINGLE_QUOTE_PATTERN = /^((?:[^"'\\]|(?:\\.))*)'/;
function convertStringLiteral(x, quoteInitial, quoteReplace, quoteSearch) {
    if (x.length >= 2 && x.charAt(0) === quoteInitial && x.charAt(x.length - 1) === quoteInitial) {
        var inner = x.substr(1, x.length - 2);
        var s = quoteReplace;
        while (inner.length > 0) {
            var m = inner.match(quoteSearch);
            if (m === null) {
                s += inner;
                break;
            }
            s += m[1];
            s += '\\';
            s += quoteReplace;
            inner = inner.substr(m.index + m[0].length);
        }
        s += quoteReplace;
        return s;
    }
    return x;
}
/**
 * Converts a string literal delimited by either single or double quotes into a string literal
 * delimited by double quotes.
 */
function normalizeStringLiteral(x) {
    return convertStringLiteral(x, '\'', '"', DOUBLE_QUOTE_PATTERN);
}
// quoteChar: des
function convertJsonHelper(x, desiredCommaChar, desiredQuoteChar) {
    var commaSearch = /[&_,]/g;
    var quoteInitial = void 0;
    var quoteSearch = void 0;
    var stringLiteralPattern = void 0;
    if (desiredQuoteChar === '"') {
        quoteInitial = '\'';
        quoteSearch = DOUBLE_QUOTE_PATTERN;
        stringLiteralPattern = SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN;
    } else {
        quoteInitial = '"';
        quoteSearch = SINGLE_QUOTE_PATTERN;
        stringLiteralPattern = DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN;
    }
    var s = '';
    while (x.length > 0) {
        var m = x.match(stringLiteralPattern);
        var before = void 0;
        var replacement = void 0;
        if (m === null) {
            before = x;
            x = '';
            replacement = '';
        } else {
            before = x.substr(0, m.index);
            x = x.substr(m.index + m[0].length);
            var originalString = m[1];
            if (originalString !== undefined) {
                replacement = convertStringLiteral(originalString, quoteInitial, desiredQuoteChar, quoteSearch);
            } else {
                replacement = m[2];
            }
        }
        s += before.replace(commaSearch, desiredCommaChar);
        s += replacement;
    }
    return s;
}
function urlSafeToJSON(x) {
    return convertJsonHelper(x, ',', '"');
}
function jsonToUrlSafe(x) {
    return convertJsonHelper(x, '_', '\'');
}
function urlSafeParse(x) {
    return JSON.parse(urlSafeToJSON(x));
}
// Converts a string containing a Python literal into a string containing an equivalent JSON
// literal.
function pythonLiteralToJSON(x) {
    var s = '';
    while (x.length > 0) {
        var m = x.match(SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN);
        var before = void 0;
        var replacement = void 0;
        if (m === null) {
            before = x;
            x = '';
            replacement = '';
        } else {
            before = x.substr(0, m.index);
            x = x.substr(m.index + m[0].length);
            var singleQuoteString = m[1];
            if (singleQuoteString !== undefined) {
                replacement = normalizeStringLiteral(singleQuoteString);
            } else {
                replacement = m[2];
            }
        }
        s += before.replace(/\(/g, '[').replace(/\)/g, ']').replace('True', 'true').replace('False', 'false').replace(/,\s*([\}\]])/g, '$1');
        s += replacement;
    }
    return s;
}
// Converts a string containing a Python literal into an equivalent JavaScript value.
function pythonLiteralParse(x) {
    return JSON.parse(pythonLiteralToJSON(x));
}
// Checks that `x' is an array, maps each element by parseElement.
function parseArray(x, parseElement) {
    if (!Array.isArray(x)) {
        throw new Error(`Expected array, but received: ${JSON.stringify(x)}.`);
    }
    return x.map(parseElement);
}
function parseFixedLengthArray(out, obj, parseElement) {
    var length = out.length;
    if (!Array.isArray(obj) || obj.length !== length) {
        throw new Error(`Expected length ${length} array, but received: ${JSON.stringify(obj)}.`);
    }
    for (var i = 0; i < length; ++i) {
        out[i] = parseElement(obj[i], i);
    }
    return out;
}
function verifyObject(obj) {
    if (typeof obj !== 'object' || obj == null || Array.isArray(obj)) {
        throw new Error(`Expected JSON object, but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
function verifyInt(obj) {
    var result = parseInt(obj, 10);
    if (!Number.isInteger(result)) {
        throw new Error(`Expected integer, but received: ${JSON.stringify(obj)}.`);
    }
    return result;
}
function verifyPositiveInt(obj) {
    var result = verifyInt(obj);
    if (result <= 0) {
        throw new Error(`Expected positive integer, but received: ${result}.`);
    }
    return result;
}
function verifyMapKey(obj, map) {
    var result = map.get(obj);
    if (result === undefined) {
        throw new Error(`Expected one of ${JSON.stringify(Array.from(map.keys()))}, ` + `but received: ${JSON.stringify(obj)}.`);
    }
    return result;
}
function verifyString(obj) {
    if (typeof obj !== 'string') {
        throw new Error(`Expected string, but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
function verifyOptionalString(obj) {
    if (obj === undefined) {
        return undefined;
    }
    return verifyString(obj);
}
function verifyOptionalInt(obj) {
    if (obj === undefined) {
        return undefined;
    }
    return verifyInt(obj);
}
function verifyObjectProperty(obj, propertyName, validator) {
    var value = obj.hasOwnProperty(propertyName) ? obj[propertyName] : undefined;
    try {
        return validator(value);
    } catch (parseError) {
        throw new Error(`Error parsing ${JSON.stringify(propertyName)} property: ${parseError.message}`);
    }
}
function verifyObjectAsMap(obj, validator) {
    verifyObject(obj);
    var map = new Map();
    for (var key of Object.keys(obj)) {
        try {
            map.set(key, validator(obj[key]));
        } catch (parseError) {
            throw new Error(`Error parsing value associated with key ${JSON.stringify(key)}: ${parseError.message}`);
        }
    }
    return map;
}
function verifyFloat01(obj) {
    if (typeof obj !== 'number' || !Number.isFinite(obj) || obj < 0 || obj > 1) {
        throw new Error(`Expected floating point number in [0,1], but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
/**
 * The query string parameters may either be specified in the usual
 * 'name=value&otherName=otherValue' form or as (optionally urlSafe) JSON: '{"name":"value"}`.
 */
function parseQueryStringParameters(queryString) {
    if (queryString === '') {
        return {};
    }
    if (queryString.startsWith('{')) {
        return urlSafeParse(queryString);
    } else {
        var result = {};
        var parts = queryString.split(/[&;]/);
        for (var part of parts) {
            var m = part.match(/^([^=&;]+)=([^&;]*)$/);
            if (m === null) {
                throw new Error(`Invalid query string part: ${JSON.stringify(part)}.`);
            }
            result[m[1]] = decodeURIComponent(m[2]);
        }
        return result;
    }
}
/**
 * Verifies that `obj' is a string that, when converted to uppercase, matches a string property of
 * `enumType`.
 *
 * Note: TypeScript does not seem to allow better typing of the return type.
 *
 * @returns The corresponding numerical value.
 */
function verifyEnumString(obj, enumType) {
    if (typeof obj === 'string' && obj.match(/^[a-zA-Z]/) !== null) {
        obj = obj.toUpperCase();
        if (enumType.hasOwnProperty(obj)) {
            return enumType[obj];
        }
    }
    throw new Error(`Invalid enum value: ${JSON.stringify(obj)}.`);
}
function verify3dVec(obj) {
    return parseFixedLengthArray(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].create(), obj, verifyFiniteFloat);
}
function verify3dScale(obj) {
    return parseFixedLengthArray(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].create(), obj, verifyFinitePositiveFloat);
}
function verify3dDimensions(obj) {
    return parseFixedLengthArray(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].create(), obj, verifyPositiveInt);
}
function verifyStringArray(a) {
    if (!Array.isArray(a)) {
        throw new Error(`Expected array, received: ${JSON.stringify(a)}.`);
    }
    for (var x of a) {
        if (typeof x !== 'string') {
            throw new Error(`Expected string, received: ${JSON.stringify(x)}.`);
        }
    }
    return a;
}

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var randomTempBuffer = new Uint32Array(2);
var trueBase = 0x100000000;
var stringConversionData = [];
for (var base = 2; base <= 36; ++base) {
    var lowDigits = Math.floor(32 / Math.log2(base));
    var lowBase = Math.pow(base, lowDigits);
    var lowDigits1 = Math.floor(lowDigits / 2);
    var lowBase1 = Math.pow(base, lowDigits1);
    var lowBase2 = Math.pow(base, lowDigits - lowDigits1);
    var patternString = `^[0-${String.fromCharCode('0'.charCodeAt(0) + Math.min(9, base - 1))}`;
    if (base > 10) {
        patternString += `a-${String.fromCharCode('a'.charCodeAt(0) + base - 11)}`;
        patternString += `A-${String.fromCharCode('A'.charCodeAt(0) + base - 11)}`;
    }
    var maxDigits = Math.ceil(64 / Math.log2(base));
    patternString += `]{1,${maxDigits}}$`;
    var pattern = new RegExp(patternString);
    stringConversionData[base] = { lowDigits, lowBase, lowBase1, lowBase2, pattern };
}
class Uint64 {
    constructor() {
        var low = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var high = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        this.low = low;
        this.high = high;
    }
    clone() {
        return new Uint64(this.low, this.high);
    }
    assign(x) {
        this.low = x.low;
        this.high = x.high;
    }
    toString() {
        var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

        var vLow = this.low,
            vHigh = this.high;
        if (vHigh === 0) {
            return vLow.toString(base);
        }
        vHigh *= trueBase;
        var _stringConversionData = stringConversionData[base],
            lowBase = _stringConversionData.lowBase,
            lowDigits = _stringConversionData.lowDigits;

        var vHighExtra = vHigh % lowBase;
        vHigh = Math.floor(vHigh / lowBase);
        vLow += vHighExtra;
        vHigh += Math.floor(vLow / lowBase);
        vLow = vLow % lowBase;
        var vLowStr = vLow.toString(base);
        return vHigh.toString(base) + '0'.repeat(lowDigits - vLowStr.length) + vLowStr;
    }
    /**
     * Returns true if a is strictly less than b.
     */
    static less(a, b) {
        return a.high < b.high || a.high === b.high && a.low < b.low;
    }
    /**
     * Returns a negative number if a is strictly less than b, 0 if a is equal to b, or a positive
     * number if a is strictly greater than b.
     */
    static compare(a, b) {
        return a.high - b.high || a.low - b.low;
    }
    static equal(a, b) {
        return a.low === b.low && a.high === b.high;
    }
    static min(a, b) {
        return Uint64.less(a, b) ? a : b;
    }
    static random() {
        crypto.getRandomValues(randomTempBuffer);
        return new Uint64(randomTempBuffer[0], randomTempBuffer[1]);
    }
    tryParseString(s) {
        var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
        var _stringConversionData2 = stringConversionData[base],
            lowDigits = _stringConversionData2.lowDigits,
            lowBase = _stringConversionData2.lowBase,
            lowBase1 = _stringConversionData2.lowBase1,
            lowBase2 = _stringConversionData2.lowBase2,
            pattern = _stringConversionData2.pattern;

        if (!pattern.test(s)) {
            return false;
        }
        if (s.length <= lowDigits) {
            this.low = parseInt(s, base);
            this.high = 0;
            return true;
        }
        var splitPoint = s.length - lowDigits;
        var lowPrime = parseInt(s.substr(splitPoint), base);
        var highPrime = parseInt(s.substr(0, splitPoint), base);
        var highConverted = highPrime * lowBase;
        var high = Math.floor(highConverted / trueBase);
        var low = lowPrime + highPrime % trueBase * lowBase1 % trueBase * lowBase2 % trueBase;
        if (low > trueBase) {
            ++high;
            low -= trueBase;
        }
        if (low >>> 0 !== low || high >>> 0 !== high) {
            return false;
        }
        this.low = low;
        this.high = high;
        return true;
    }
    parseString(s) {
        var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

        if (!this.tryParseString(s, base)) {
            throw new Error(`Failed to parse string as uint64 value: ${JSON.stringify(s)}.`);
        }
        return this;
    }
    static parseString(s) {
        var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

        var x = new Uint64();
        return x.parseString(s, base);
    }
    valid() {
        var low = this.low,
            high = this.high;

        return low >>> 0 === low && high >>> 0 === high;
    }
    toJSON() {
        return this.toString();
    }
    lshift(bits) {
        bits &= 63;
        if (bits == 0) {
            return this.clone();
        } else {
            var low = this.low,
                high = this.high;

            if (bits < 32) {
                return new Uint64(low << bits, high << bits | low >>> 32 - bits);
            } else {
                return new Uint64(0, low << bits - 32);
            }
        }
    }
    rshift(bits) {
        bits &= 63;
        if (bits == 0) {
            return this.clone();
        } else {
            var low = this.low,
                high = this.high;

            if (bits < 32) {
                return new Uint64(low >>> bits | high << 32 - bits, high >> bits);
            } else {
                return new Uint64(high >> bits - 32, high >= 0 ? 0 : -1);
            }
        }
    }
    or(other) {
        return new Uint64(this.low | other.low, this.high | other.high);
    }
    xor(other) {
        return new Uint64(this.low ^ other.low, this.high ^ other.high);
    }
    and(other) {
        return new Uint64(this.low & other.low, this.high & other.high);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Uint64;

Uint64.ZERO = new Uint64(0, 0);

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DATA_TYPE_BYTES; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * If this is updated, DATA_TYPE_BYTES must also be updated.
 */
var DataType;
(function (DataType) {
  DataType[DataType["UINT8"] = 0] = "UINT8";
  DataType[DataType["UINT16"] = 1] = "UINT16";
  DataType[DataType["UINT32"] = 2] = "UINT32";
  DataType[DataType["UINT64"] = 3] = "UINT64";
  DataType[DataType["FLOAT32"] = 4] = "FLOAT32";
})(DataType || (DataType = {}));
var DATA_TYPE_BYTES = [];
DATA_TYPE_BYTES[DataType.UINT8] = 1;
DATA_TYPE_BYTES[DataType.UINT16] = 2;
DATA_TYPE_BYTES[DataType.UINT32] = 4;
DATA_TYPE_BYTES[DataType.UINT64] = 8;
DATA_TYPE_BYTES[DataType.FLOAT32] = 4;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export URL_SYMBOL */
/* unused harmony export METHOD_SYMBOL */
/* harmony export (immutable) */ __webpack_exports__["b"] = openHttpRequest;
/* unused harmony export pickShard */
/* harmony export (immutable) */ __webpack_exports__["c"] = openShardedHttpRequest;
/* harmony export (immutable) */ __webpack_exports__["e"] = sendHttpRequest;
/* harmony export (immutable) */ __webpack_exports__["d"] = sendHttpJsonPostRequest;
/* unused harmony export parseSpecialUrl */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_hash__ = __webpack_require__(67);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var URL_SYMBOL = Symbol('url');
var METHOD_SYMBOL = Symbol('method');
class HttpError extends Error {
    constructor(method, url, code, statusMessage) {
        var message = `${method} ${JSON.stringify(url)} resulted in HTTP error ${code}`;
        if (statusMessage) {
            message += `: ${statusMessage}`;
        }
        message += '.';
        super(message);
        this.name = 'HttpError';
        this.message = message;
        this.method = method;
        this.url = url;
        this.code = code;
        this.statusMessage = statusMessage;
    }
    static fromXhr(xhr) {
        return new HttpError(xhr[METHOD_SYMBOL], xhr[URL_SYMBOL], xhr.status, xhr.statusText);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HttpError;

function openHttpRequest(url) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

    var xhr = new XMLHttpRequest();
    xhr[METHOD_SYMBOL] = method;
    xhr[URL_SYMBOL] = url;
    xhr.open(method, url);
    return xhr;
}
function pickShard(baseUrls, path) {
    if (Array.isArray(baseUrls)) {
        var numShards = baseUrls.length;
        var shard = numShards === 1 ? 0 : Math.abs(Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_hash__["a" /* simpleStringHash */])(path)) % numShards;
        return baseUrls[shard] + path;
    }
    return baseUrls + path;
}
function openShardedHttpRequest(baseUrls, path) {
    var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

    var xhr = new XMLHttpRequest();
    var url = pickShard(baseUrls, path);
    xhr[METHOD_SYMBOL] = method;
    xhr[URL_SYMBOL] = url;
    xhr.open(method, url);
    return xhr;
}
function sendHttpRequest(xhr, responseType) {
    var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["d" /* uncancelableToken */];

    xhr.responseType = responseType;
    return new Promise((resolve, reject) => {
        var abort = () => {
            xhr.abort();
        };
        token.add(abort);
        xhr.onloadend = function () {
            var status = this.status;
            token.remove(abort);
            if (status >= 200 && status < 300) {
                resolve(this.response);
            } else {
                reject(HttpError.fromXhr(xhr));
            }
        };
        xhr.send();
    });
}
function sendHttpJsonPostRequest(xhr, payload, responseType) {
    var token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_cancellation__["d" /* uncancelableToken */];

    xhr.responseType = responseType;
    xhr.setRequestHeader('Content-Type', `application/json`);
    return new Promise((resolve, reject) => {
        var abort = () => {
            xhr.abort();
        };
        token.add(abort);
        xhr.onloadend = function () {
            var status = this.status;
            token.remove(abort);
            if (status >= 200 && status < 300) {
                resolve(this.response);
            } else {
                reject(HttpError.fromXhr(xhr));
            }
        };
        xhr.send(JSON.stringify(payload));
    });
}
/**
 * Parses a URL that may have a special protocol designation into a list of base URLs and a path.
 *
 * If the protocol is 'http' or 'https', the input string is returned as a single base URL, with an
 * empty path.
 *
 * Additionally, 'gs://bucket/path' is supported for accessing Google Storage buckets.
 */
function parseSpecialUrl(url) {
    var urlProtocolPattern = /^([^:\/]+):\/\/([^\/]+)(\/.*)?$/;
    var match = url.match(urlProtocolPattern);
    if (match === null) {
        throw new Error(`Invalid URL: ${JSON.stringify(url)}`);
    }
    var protocol = match[1];
    if (protocol === 'gs') {
        var bucket = match[2];
        var baseUrls = [`https://storage.googleapis.com/${bucket}`];
        return [baseUrls, match[3]];
    }
    return [[url], ''];
}

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Endianness; });
/* unused harmony export determineEndianness */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ENDIANNESS; });
/* unused harmony export swapEndian16 */
/* unused harmony export swapEndian32 */
/* harmony export (immutable) */ __webpack_exports__["c"] = convertEndian16;
/* unused harmony export nativeToLittle16 */
/* harmony export (immutable) */ __webpack_exports__["d"] = convertEndian32;
/* unused harmony export nativeToLittle32 */
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Facilities for endianness detection and swapping.
 */
var Endianness;
(function (Endianness) {
    Endianness[Endianness["LITTLE"] = 0] = "LITTLE";
    Endianness[Endianness["BIG"] = 1] = "BIG";
})(Endianness || (Endianness = {}));
function determineEndianness() {
    var a = Uint16Array.of(0x1122);
    var b = new Uint8Array(a.buffer);
    return b[0] === 0x11 ? Endianness.BIG : Endianness.LITTLE;
}
/**
 * The native endianness of the runtime.
 */
var ENDIANNESS = determineEndianness();
/**
 * Swaps the endianness of an array assumed to contain 16-bit values.
 */
function swapEndian16(array) {
    var view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
    for (var i = 0, length = view.length; i < length; i += 2) {
        var temp = view[i];
        view[i] = view[i + 1];
        view[i + 1] = temp;
    }
}
/**
 * Swaps the endianness of an array assumed to contain 32-bit values.
 */
function swapEndian32(array) {
    var view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
    for (var i = 0, length = view.length; i < length; i += 4) {
        var temp = view[i];
        view[i] = view[i + 3];
        view[i + 3] = temp;
        temp = view[i + 1];
        view[i + 1] = view[i + 2];
        view[i + 2] = temp;
    }
}
/**
 * Converts the endianness of an array assumed to contain 16-bit values from source to target.
 *
 * This does nothing if source === target.
 */
function convertEndian16(array, source) {
    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ENDIANNESS;

    if (source !== target) {
        swapEndian16(array);
    }
}
/**
 * Converts the endianness of an array assumed to contain 16-bit values from native to little
 * endian.
 *
 * This does nothing if the native ENDIANNESS is little endian.
 */
function nativeToLittle16(array) {
    if (ENDIANNESS !== Endianness.LITTLE) {
        swapEndian16(array);
    }
}
/**
 * Converts the endianness of an array assumed to contain 32-bit values from source to target.
 *
 * This does nothing if source === target.
 */
function convertEndian32(array, source) {
    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ENDIANNESS;

    if (source !== target) {
        swapEndian32(array);
    }
}
/**
 * Converts the endianness of an array assumed to contain 32-bit values from native to little
 * endian.
 *
 * This does nothing if the native ENDIANNESS is little endian.
 */
function nativeToLittle32(array) {
    if (ENDIANNESS !== Endianness.LITTLE) {
        swapEndian32(array);
    }
}

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RenderLayer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_volume_base__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class VolumeChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__["SliceViewChunk"] {
    constructor() {
        super();
        this.source = null;
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initializeVolumeChunk(key, chunkGridPosition);
        var source = this.source;
        /**
         * Grid position within chunk layout (coordinates are in units of chunks).
         */
        this.systemMemoryBytes = source.spec.chunkBytes;
        this.gpuMemoryBytes = source.spec.chunkBytes;
        this.data = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        var data = msg['data'] = this.data;
        transfers.push(data.buffer);
        this.data = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = this.data.byteLength;
        super.downloadSucceeded();
    }
    freeSystemMemory() {
        this.data = null;
    }
}
/* unused harmony export VolumeChunk */

class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__["SliceViewChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.spec = __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_volume_base__["c" /* VolumeChunkSpecification */].fromObject(options['spec']);
    }
    getChunk(chunkGridPosition) {
        var key = Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["m" /* vec3Key */])(chunkGridPosition);
        var chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(VolumeChunk);
            chunk.initializeVolumeChunk(key, chunkGridPosition);
            this.addChunk(chunk);
        }
        return chunk;
    }
}
/* unused harmony export VolumeChunkSource */

var RenderLayer = class RenderLayer extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__["RenderLayer"] {};
RenderLayer = __decorate([Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_volume_base__["b" /* VOLUME_RENDERLAYER_RPC_ID */])], RenderLayer);

/**
 * Extends VolumeChunkSource with a parameters member.
 *
 * Subclasses should be decorated with
 * src/neuroglancer/chunk_manager/backend.ts:registerChunkSource.
 */
class ParameterizedVolumeChunkSource extends VolumeChunkSource {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ParameterizedVolumeChunkSource;


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ChunkState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ChunkPriorityTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return PREFETCH_PRIORITY_MULTIPLIER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CHUNK_QUEUE_MANAGER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CHUNK_MANAGER_RPC_ID; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ChunkState;
(function (ChunkState) {
    // Chunk is stored in GPU memory in addition to system memory.
    ChunkState[ChunkState["GPU_MEMORY"] = 0] = "GPU_MEMORY";
    // Chunk is stored only in system memory but not in GPU memory.
    ChunkState[ChunkState["SYSTEM_MEMORY"] = 1] = "SYSTEM_MEMORY";
    // Chunk is stored in system memory on worker.
    ChunkState[ChunkState["SYSTEM_MEMORY_WORKER"] = 2] = "SYSTEM_MEMORY_WORKER";
    // Chunk is downloading.
    ChunkState[ChunkState["DOWNLOADING"] = 3] = "DOWNLOADING";
    // Chunk is not yet downloading.
    ChunkState[ChunkState["QUEUED"] = 4] = "QUEUED";
    // Chunk has just been added.
    ChunkState[ChunkState["NEW"] = 5] = "NEW";
    // Download failed.
    ChunkState[ChunkState["FAILED"] = 6] = "FAILED";
    ChunkState[ChunkState["EXPIRED"] = 7] = "EXPIRED";
})(ChunkState || (ChunkState = {}));
var ChunkPriorityTier;
(function (ChunkPriorityTier) {
    ChunkPriorityTier[ChunkPriorityTier["FIRST_TIER"] = 0] = "FIRST_TIER";
    ChunkPriorityTier[ChunkPriorityTier["FIRST_ORDERED_TIER"] = 0] = "FIRST_ORDERED_TIER";
    ChunkPriorityTier[ChunkPriorityTier["VISIBLE"] = 0] = "VISIBLE";
    ChunkPriorityTier[ChunkPriorityTier["PREFETCH"] = 1] = "PREFETCH";
    ChunkPriorityTier[ChunkPriorityTier["LAST_ORDERED_TIER"] = 1] = "LAST_ORDERED_TIER";
    ChunkPriorityTier[ChunkPriorityTier["RECENT"] = 2] = "RECENT";
    ChunkPriorityTier[ChunkPriorityTier["LAST_TIER"] = 2] = "LAST_TIER";
})(ChunkPriorityTier || (ChunkPriorityTier = {}));
var PREFETCH_PRIORITY_MULTIPLIER = 1e13;
class AvailableCapacity {
    constructor(maxItems, maxSize) {
        /**
         * Number of additional items that are available.
         */
        this.availableItems = maxItems;
        /**
         * Total number of items that can be accomodated.
         */
        this.itemCapacity = maxItems;
        /**
         * Aggregate additional size capacity that is available.
         */
        this.availableSize = maxSize;
        /**
         * Total aggregate item size that can be accomodated.
         */
        this.sizeCapacity = maxSize;
    }
    /**
     * Adjust available capacity by the specified amounts.
     */
    adjust(items, size) {
        this.availableItems += items;
        this.availableSize += size;
    }
    toString() {
        return `${this.availableItems}/${this.itemCapacity} items, ` + `${this.availableSize}/${this.sizeCapacity} size`;
    }
    toObject() {
        return { 'itemCapacity': this.itemCapacity, 'sizeCapacity': this.sizeCapacity };
    }
    static fromObject(x) {
        return new AvailableCapacity(x['itemCapacity'], x['sizeCapacity']);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AvailableCapacity;

AvailableCapacity.INFINITE = new AvailableCapacity(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
var CHUNK_QUEUE_MANAGER_RPC_ID = 'ChunkQueueManager';
var CHUNK_MANAGER_RPC_ID = 'ChunkManager';

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 */
/* harmony export (immutable) */ __webpack_exports__["g"] = getNearIsotropicBlockSize;
/* unused harmony export getTwoDimensionalBlockSize */
/* unused harmony export getTwoDimensionalBlockSizes */
/* unused harmony export ChunkLayoutPreference */
/* harmony export (immutable) */ __webpack_exports__["f"] = getCombinedTransform;
/* harmony export (immutable) */ __webpack_exports__["e"] = getChunkDataSizes;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SLICEVIEW_RPC_ID; });
/* unused harmony export SLICEVIEW_RENDERLAYER_RPC_ID */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_chunk_layout__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_compare__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__ = __webpack_require__(0);
/* unused harmony reexport DATA_TYPE_BYTES */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_data_type__["b"]; });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







var DEBUG_CHUNK_INTERSECTIONS = false;
var DEBUG_VISIBLE_SOURCES = false;
var tempVec3 = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
/**
 * Average cross-sectional area contained within a chunk of the specified size and rotation.
 *
 * This is estimated by taking the total volume of the chunk and dividing it by the total length of
 * the chunk along the z axis.
 */
function estimateSliceAreaPerChunk(zAxis, chunkLayout) {
    var chunkSize = chunkLayout.size;
    var zAxisRotated = chunkLayout.globalToLocalSpatialVector(tempVec3, zAxis);
    // Minimum and maximum dot product of zAxisRotated with each of the corners of the chunk.  Both
    // are initialized to 0 because the origin of the chunk has a projection of 0.
    var minProjection = 0,
        maxProjection = 0;
    var chunkVolume = 1;
    for (var i = 0; i < 3; ++i) {
        var chunkSizeValue = chunkSize[i];
        chunkVolume *= chunkSizeValue;
        var projection = chunkSizeValue * zAxisRotated[i];
        minProjection = Math.min(minProjection, projection);
        maxProjection = Math.max(maxProjection, projection);
    }
    var projectionLength = maxProjection - minProjection;
    return chunkVolume / projectionLength;
}
/**
 * All valid chunks are in the range [lowerBound, upperBound).
 *
 * @param lowerBound Output parameter for lowerBound.
 * @param upperBound Output parameter for upperBound.
 * @param sources Sources for which to compute the chunk bounds.
 */
function computeSourcesChunkBounds(sourcesLowerBound, sourcesUpperBound, sources) {
    for (var i = 0; i < 3; ++i) {
        sourcesLowerBound[i] = Number.POSITIVE_INFINITY;
        sourcesUpperBound[i] = Number.NEGATIVE_INFINITY;
    }
    for (var source of sources) {
        var spec = source.spec;
        var lowerChunkBound = spec.lowerChunkBound,
            upperChunkBound = spec.upperChunkBound;

        for (var _i = 0; _i < 3; ++_i) {
            sourcesLowerBound[_i] = Math.min(sourcesLowerBound[_i], lowerChunkBound[_i]);
            sourcesUpperBound[_i] = Math.max(sourcesUpperBound[_i], upperChunkBound[_i]);
        }
    }
}
var BoundsComparisonResult;
(function (BoundsComparisonResult) {
    // Needle is fully outside haystack.
    BoundsComparisonResult[BoundsComparisonResult["FULLY_OUTSIDE"] = 0] = "FULLY_OUTSIDE";
    // Needle is fully inside haystack.
    BoundsComparisonResult[BoundsComparisonResult["FULLY_INSIDE"] = 1] = "FULLY_INSIDE";
    // Needle is partially inside haystack.
    BoundsComparisonResult[BoundsComparisonResult["PARTIALLY_INSIDE"] = 2] = "PARTIALLY_INSIDE";
})(BoundsComparisonResult || (BoundsComparisonResult = {}));
function compareBoundsSingleDimension(needleLower, needleUpper, haystackLower, haystackUpper) {
    if (needleLower >= haystackUpper || needleUpper <= haystackLower) {
        return BoundsComparisonResult.FULLY_OUTSIDE;
    }
    if (needleLower >= haystackLower && needleUpper <= haystackUpper) {
        return BoundsComparisonResult.FULLY_INSIDE;
    }
    return BoundsComparisonResult.PARTIALLY_INSIDE;
}
function compareBounds(needleLowerBound, needleUpperBound, haystackLowerBound, haystackUpperBound) {
    var curResult = BoundsComparisonResult.FULLY_INSIDE;
    for (var i = 0; i < 3; ++i) {
        var newResult = compareBoundsSingleDimension(needleLowerBound[i], needleUpperBound[i], haystackLowerBound[i], haystackUpperBound[i]);
        switch (newResult) {
            case BoundsComparisonResult.FULLY_OUTSIDE:
                return newResult;
            case BoundsComparisonResult.PARTIALLY_INSIDE:
                curResult = newResult;
                break;
        }
    }
    return curResult;
}
function pickBestAlternativeSource(zAxis, alternatives) {
    var numAlternatives = alternatives.length;
    var bestAlternativeIndex = 0;
    if (DEBUG_VISIBLE_SOURCES) {
        console.log(alternatives);
    }
    if (numAlternatives > 1) {
        var bestSliceArea = 0;
        for (var alternativeIndex = 0; alternativeIndex < numAlternatives; ++alternativeIndex) {
            var alternative = alternatives[alternativeIndex];
            var chunkLayout = alternative.spec.chunkLayout;

            var sliceArea = estimateSliceAreaPerChunk(zAxis, chunkLayout);
            if (DEBUG_VISIBLE_SOURCES) {
                console.log(`zAxis = ${zAxis}, chunksize = ${alternative.spec.chunkLayout.size}, sliceArea = ${sliceArea}`);
            }
            if (sliceArea > bestSliceArea) {
                bestSliceArea = sliceArea;
                bestAlternativeIndex = alternativeIndex;
            }
        }
    }
    return alternatives[bestAlternativeIndex];
}
var tempCorners = [__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create()];
class SliceViewBase extends __WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__["b" /* SharedObject */] {
    constructor() {
        super();
        this.width = -1;
        this.height = -1;
        this.hasViewportToData = false;
        /**
         * Specifies whether width, height, and viewportToData are valid.
         */
        this.hasValidViewport = false;
        // Transforms (x,y) viewport coordinates in the range:
        //
        // x=[left: -width/2, right: width/2] and
        //
        // y=[top: -height/2, bottom: height/2],
        //
        // to data coordinates.
        this.viewportToData = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["g" /* mat4 */].create();
        // Normalized x, y, and z viewport axes in data coordinate space.
        this.viewportAxes = [__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create()];
        // Viewport axes used for selecting visible sources.
        this.previousViewportAxes = [__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create()];
        this.centerDataPosition = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        this.viewportPlaneDistanceToOrigin = 0;
        /**
         * For each visible ChunkLayout, maps each visible GenericVolumeChunkSource to its priority index.
         * Overall chunk priority ordering is based on a lexicographical ordering of (priorityIndex,
         * -distanceToCenter).
         */
        this.visibleChunkLayouts = new Map();
        this.visibleLayers = new Map();
        this.visibleSourcesStale = true;
        this.pixelSize = 0;
        __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["g" /* mat4 */].identity(this.viewportToData);
    }
    /**
     * Called when hasValidViewport == true and the viewport width/height or data transform matrix
     * changes.
     */
    onViewportChanged() {}
    maybeSetHasValidViewport() {
        if (!this.hasValidViewport && this.width !== -1 && this.height !== -1 && this.hasViewportToData) {
            this.hasValidViewport = true;
            this.onHasValidViewport();
        }
        if (this.hasValidViewport) {
            this.onViewportChanged();
        }
    }
    onHasValidViewport() {}
    setViewportSize(width, height) {
        if (width !== this.width || height !== this.height) {
            this.width = width;
            this.height = height;
            this.maybeSetHasValidViewport();
            return true;
        }
        return false;
    }
    setViewportToDataMatrix(mat) {
        if (this.hasViewportToData && __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["g" /* mat4 */].equals(this.viewportToData, mat)) {
            return false;
        }
        this.hasViewportToData = true;
        var viewportToData = this.viewportToData;

        __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["g" /* mat4 */].copy(viewportToData, mat);
        Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["j" /* rectifyTransformMatrixIfAxisAligned */])(viewportToData);
        __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].transformMat4(this.centerDataPosition, __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["f" /* kZeroVec */], mat);
        // Initialize to zero to avoid confusing TypeScript compiler.
        var newPixelSize = 0;
        // Swap previousViewportAxes with viewportAxes.
        var viewportAxes = this.viewportAxes;
        var previousViewportAxes = this.previousViewportAxes;
        // Compute axes.
        for (var i = 0; i < 3; ++i) {
            var a = viewportAxes[i];
            Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["k" /* transformVectorByMat4 */])(a, __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][i], viewportToData);
            // a[3] is guaranteed to be 0.
            if (i === 0) {
                newPixelSize = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].length(a);
            }
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].normalize(a, a);
        }
        this.viewportAxes = viewportAxes;
        this.previousViewportAxes = previousViewportAxes;
        if (!Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_compare__["a" /* approxEqual */])(newPixelSize, this.pixelSize) || __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].dot(viewportAxes[0], previousViewportAxes[0]) < 0.95 || __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].dot(viewportAxes[1], previousViewportAxes[1]) < 0.95) {
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].copy(previousViewportAxes[0], viewportAxes[0]);
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].copy(previousViewportAxes[1], viewportAxes[1]);
            this.visibleSourcesStale = true;
            this.pixelSize = newPixelSize;
        }
        // Compute viewport plane distance to origin.
        this.viewportPlaneDistanceToOrigin = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].dot(this.centerDataPosition, this.viewportAxes[2]);
        this.onViewportToDataMatrixChanged();
        this.maybeSetHasValidViewport();
        return true;
    }
    onViewportToDataMatrixChanged() {}
    /**
     * Computes the list of sources to use for each visible layer, based on the
     * current pixelSize.
     */
    updateVisibleSources() {
        if (!this.visibleSourcesStale) {
            return;
        }
        this.visibleSourcesStale = false;
        // Increase pixel size by a small margin.
        var pixelSize = this.pixelSize * 1.1;
        // console.log("pixelSize", pixelSize);
        var visibleChunkLayouts = this.visibleChunkLayouts;
        var zAxis = this.viewportAxes[2];
        var visibleLayers = this.visibleLayers;
        visibleChunkLayouts.clear();

        var _loop = function (_ref) {
            _ref2 = _slicedToArray(_ref, 2);
            var renderLayer = _ref2[0];
            var visibleSources = _ref2[1];

            visibleSources.length = 0;
            var sources = renderLayer.sources;
            var numSources = sources.length;
            var scaleIndex = void 0;
            // At the smallest scale, all alternative sources must have the same voxel size, which is
            // considered to be the base voxel size.
            var smallestVoxelSize = sources[0][0].spec.voxelSize;
            /**
             * Determines whether we should continue to look for a finer-resolution source *after* one
             * with the specified voxelSize.
             */
            var canImproveOnVoxelSize = voxelSize => {
                for (var i = 0; i < 3; ++i) {
                    var size = voxelSize[i];
                    // If size <= pixelSize, no need for improvement.
                    // If size === smallestVoxelSize, also no need for improvement.
                    if (size > pixelSize && size > smallestVoxelSize[i]) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * Registers a source as being visible.  This should be called with consecutively decreasing
             * values of scaleIndex.
             */
            var addVisibleSource = (source, sourceScaleIndex) => {
                // Add to end of visibleSources list.  We will reverse the list after all sources are added.
                visibleSources[visibleSources.length++] = source;
                var chunkLayout = source.spec.chunkLayout;
                var existingSources = visibleChunkLayouts.get(chunkLayout);
                if (existingSources === undefined) {
                    existingSources = new Map();
                    visibleChunkLayouts.set(chunkLayout, existingSources);
                }
                existingSources.set(source, sourceScaleIndex);
            };
            scaleIndex = numSources - 1;
            while (true) {
                var source = pickBestAlternativeSource(zAxis, sources[scaleIndex]);
                addVisibleSource(source, scaleIndex);
                if (scaleIndex === 0 || !canImproveOnVoxelSize(source.spec.voxelSize)) {
                    break;
                }
                --scaleIndex;
            }
            // Reverse visibleSources list since we added sources from coarsest to finest resolution, but
            // we want them ordered from finest to coarsest.
            visibleSources.reverse();
        };

        for (var _ref of visibleLayers) {
            var _ref2;

            _loop(_ref);
        }
    }
    computeVisibleChunks(getLayoutObject, addChunk) {
        this.updateVisibleSources();
        // Lower and upper bound in global data coordinates.
        var globalCorners = tempCorners;
        var width = this.width,
            height = this.height,
            viewportToData = this.viewportToData;

        for (var i = 0; i < 3; ++i) {
            globalCorners[0][i] = -__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][0][i] * width / 2 - __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][1][i] * height / 2;
            globalCorners[1][i] = -__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][0][i] * width / 2 + __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][1][i] * height / 2;
            globalCorners[2][i] = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][0][i] * width / 2 - __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][1][i] * height / 2;
            globalCorners[3][i] = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][0][i] * width / 2 + __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["d" /* kAxes */][1][i] * height / 2;
        }
        for (var _i2 = 0; _i2 < 4; ++_i2) {
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].transformMat4(globalCorners[_i2], globalCorners[_i2], viewportToData);
        }
        // console.log("data bounds", dataLowerBound, dataUpperBound);
        // These variables hold the lower and upper bounds on chunk grid positions that intersect the
        // viewing plane.
        var lowerChunkBound = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        var upperChunkBound = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        var sourcesLowerChunkBound = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        var sourcesUpperChunkBound = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        // Vertex with maximal dot product with the positive viewport plane normal.
        // Implicitly, negativeVertex = 1 - positiveVertex.
        var positiveVertex = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        var planeNormal = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        // Sources whose bounds partially contain the current bounding box.
        var partiallyVisibleSources = new Array();
        // Sources whose bounds fully contain the current bounding box.
        var fullyVisibleSources = new Array();
        this.visibleChunkLayouts.forEach((visibleSources, chunkLayout) => {
            var layoutObject = getLayoutObject(chunkLayout);
            computeSourcesChunkBounds(sourcesLowerChunkBound, sourcesUpperChunkBound, visibleSources.keys());
            if (DEBUG_CHUNK_INTERSECTIONS) {
                console.log(`Initial sources chunk bounds: ${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(sourcesLowerChunkBound)}, ${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(sourcesUpperChunkBound)}`);
            }
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].set(lowerChunkBound, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].set(upperChunkBound, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
            chunkLayout.globalToLocalSpatialVector(planeNormal, this.viewportAxes[2]);
            for (var _i3 = 0; _i3 < 3; ++_i3) {
                positiveVertex[_i3] = planeNormal[_i3] > 0 ? 1 : 0;
            }
            // Center position in chunk grid coordinates.
            var planeDistanceToOrigin = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].dot(chunkLayout.globalToLocalGrid(tempVec3, this.centerDataPosition), planeNormal);
            for (var _i4 = 0; _i4 < 4; ++_i4) {
                var localCorner = chunkLayout.globalToLocalGrid(tempVec3, globalCorners[_i4]);
                for (var j = 0; j < 3; ++j) {
                    lowerChunkBound[j] = Math.min(lowerChunkBound[j], Math.floor(localCorner[j]));
                    upperChunkBound[j] = Math.max(upperChunkBound[j], Math.floor(localCorner[j]) + 1);
                }
            }
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].max(lowerChunkBound, lowerChunkBound, sourcesLowerChunkBound);
            __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].min(upperChunkBound, upperChunkBound, sourcesUpperChunkBound);
            // console.log('chunkBounds', lowerBound, upperBound);
            // Checks whether [lowerBound, upperBound) intersects the viewport plane.
            //
            // positiveVertexDistanceToOrigin = dot(planeNormal, lowerBound +
            // positiveVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;
            // negativeVertexDistanceToOrigin = dot(planeNormal, lowerBound +
            // negativeVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;
            //
            // positive vertex must have positive distance, and negative vertex must
            // have negative distance.
            function intersectsPlane() {
                var positiveVertexDistanceToOrigin = 0;
                var negativeVertexDistanceToOrigin = 0;
                // Check positive vertex.
                for (var _i5 = 0; _i5 < 3; ++_i5) {
                    var normalValue = planeNormal[_i5];
                    var lowerValue = lowerChunkBound[_i5];
                    var upperValue = upperChunkBound[_i5];
                    var diff = upperValue - lowerValue;
                    var positiveOffset = positiveVertex[_i5] * diff;
                    // console.log(
                    //     normalValue, lowerValue, upperValue, diff, positiveOffset,
                    //     positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin);
                    positiveVertexDistanceToOrigin += normalValue * (lowerValue + positiveOffset);
                    negativeVertexDistanceToOrigin += normalValue * (lowerValue + diff - positiveOffset);
                }
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`    planeNormal = ${planeNormal}`);
                    console.log('    {positive,negative}VertexDistanceToOrigin: ', positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin, planeDistanceToOrigin);
                    console.log('    intersectsPlane:', negativeVertexDistanceToOrigin, planeDistanceToOrigin, positiveVertexDistanceToOrigin);
                }
                if (positiveVertexDistanceToOrigin < planeDistanceToOrigin) {
                    return false;
                }
                return negativeVertexDistanceToOrigin <= planeDistanceToOrigin;
            }
            fullyVisibleSources.length = 0;
            partiallyVisibleSources.length = 0;
            for (var source of visibleSources.keys()) {
                var spec = source.spec;
                var result = compareBounds(lowerChunkBound, upperChunkBound, spec.lowerChunkBound, spec.upperChunkBound);
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`Comparing source bounds lowerBound=${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(lowerChunkBound)}, ` + `upperBound=${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(upperChunkBound)}, ` + `lowerChunkBound=${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(spec.lowerChunkBound)}, ` + `upperChunkBound=${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(spec.upperChunkBound)}, ` + `got ${BoundsComparisonResult[result]}`, spec, source);
                }
                switch (result) {
                    case BoundsComparisonResult.FULLY_INSIDE:
                        fullyVisibleSources.push(source);
                        break;
                    case BoundsComparisonResult.PARTIALLY_INSIDE:
                        partiallyVisibleSources.push(source);
                        break;
                }
            }
            var partiallyVisibleSourcesLength = partiallyVisibleSources.length;
            // Mutates lowerBound and upperBound while running, but leaves them the
            // same once finished.
            function checkBounds(nextSplitDim) {
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`chunk bounds: ${lowerChunkBound} ${upperChunkBound} ` + `fullyVisible: ${fullyVisibleSources} partiallyVisible: ` + `${partiallyVisibleSources.slice(0, partiallyVisibleSourcesLength)}`);
                }
                if (fullyVisibleSources.length === 0 && partiallyVisibleSourcesLength === 0) {
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log('  no visible sources');
                    }
                    return;
                }
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`Check bounds: [ ${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(lowerChunkBound)}, ${__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(upperChunkBound)} ]`);
                }
                var volume = 1;
                for (var _i6 = 0; _i6 < 3; ++_i6) {
                    volume *= Math.max(0, upperChunkBound[_i6] - lowerChunkBound[_i6]);
                }
                if (volume === 0) {
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log('  volume == 0');
                    }
                    return;
                }
                if (!intersectsPlane()) {
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log('  doesn\'t intersect plane');
                    }
                    return;
                }
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log('Within bounds: [' + __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(lowerChunkBound) + ', ' + __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].str(upperChunkBound) + ']');
                }
                if (volume === 1) {
                    addChunk(chunkLayout, layoutObject, lowerChunkBound, fullyVisibleSources);
                    return;
                }
                var dimLower, dimUpper, diff;
                while (true) {
                    dimLower = lowerChunkBound[nextSplitDim];
                    dimUpper = upperChunkBound[nextSplitDim];
                    diff = dimUpper - dimLower;
                    if (diff === 1) {
                        nextSplitDim = (nextSplitDim + 1) % 3;
                    } else {
                        break;
                    }
                }
                var splitPoint = dimLower + Math.floor(0.5 * diff);
                var newNextSplitDim = (nextSplitDim + 1) % 3;
                var fullyVisibleSourcesLength = fullyVisibleSources.length;
                upperChunkBound[nextSplitDim] = splitPoint;
                var oldPartiallyVisibleSourcesLength = partiallyVisibleSourcesLength;
                function adjustSources() {
                    partiallyVisibleSourcesLength = Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__["b" /* partitionArray */])(partiallyVisibleSources, 0, oldPartiallyVisibleSourcesLength, source => {
                        var spec = source.spec;
                        var result = compareBounds(lowerChunkBound, upperChunkBound, spec.lowerChunkBound, spec.upperChunkBound);
                        switch (result) {
                            case BoundsComparisonResult.PARTIALLY_INSIDE:
                                return true;
                            case BoundsComparisonResult.FULLY_INSIDE:
                                fullyVisibleSources.push(source);
                            default:
                                return false;
                        }
                    });
                }
                adjustSources();
                checkBounds(newNextSplitDim);
                // Truncate list of fully visible sources.
                fullyVisibleSources.length = fullyVisibleSourcesLength;
                // Restore partiallyVisibleSources.
                partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;
                upperChunkBound[nextSplitDim] = dimUpper;
                lowerChunkBound[nextSplitDim] = splitPoint;
                adjustSources();
                checkBounds(newNextSplitDim);
                lowerChunkBound[nextSplitDim] = dimLower;
                // Truncate list of fully visible sources.
                fullyVisibleSources.length = fullyVisibleSourcesLength;
                // Restore partiallyVisibleSources.
                partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;
            }
            checkBounds(0);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = SliceViewBase;

/**
 * By default, choose a chunk size with at most 2^18 = 262144 voxels.
 */
var DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;
/**
 * Determines a near-isotropic (in global spatial coordinates) block size.  All dimensions will be
 * powers of 2, and will not exceed upperVoxelBound - lowerVoxelBound.  The total number of voxels
 * will not exceed maxVoxelsPerChunkLog2.
 */
function getNearIsotropicBlockSize(options) {
    var voxelSize = options.voxelSize,
        _options$lowerVoxelBo = options.lowerVoxelBound,
        lowerVoxelBound = _options$lowerVoxelBo === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["f" /* kZeroVec */] : _options$lowerVoxelBo,
        upperVoxelBound = options.upperVoxelBound,
        _options$maxVoxelsPer = options.maxVoxelsPerChunkLog2,
        maxVoxelsPerChunkLog2 = _options$maxVoxelsPer === undefined ? DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 : _options$maxVoxelsPer,
        _options$transform = options.transform,
        transform = _options$transform === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["c" /* identityMat4 */] : _options$transform;
    // Adjust voxelSize by effective scaling factor.

    var temp = Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["b" /* effectiveScalingFactorFromMat4 */])(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), transform);
    voxelSize = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].multiply(temp, temp, voxelSize);
    var chunkDataSize = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].fromValues(1, 1, 1);
    var maxChunkDataSize = void 0;
    if (upperVoxelBound === undefined) {
        maxChunkDataSize = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["e" /* kInfinityVec */];
    } else {
        maxChunkDataSize = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        for (var i = 0; i < 3; ++i) {
            maxChunkDataSize[i] = Math.pow(2, Math.floor(Math.log2(upperVoxelBound[i] - lowerVoxelBound[i])));
        }
    }
    // Determine the dimension in which chunkDataSize should be increased.  This is the smallest
    // dimension (in nanometers) that is < maxChunkDataSize (in voxels).
    //
    // Returns -1 if there is no such dimension.
    function findNextDimension() {
        var minSize = Infinity;
        var minDimension = -1;
        for (var _i7 = 0; _i7 < 3; ++_i7) {
            if (chunkDataSize[_i7] >= maxChunkDataSize[_i7]) {
                continue;
            }
            var size = chunkDataSize[_i7] * voxelSize[_i7];
            if (size < minSize) {
                minSize = size;
                minDimension = _i7;
            }
        }
        return minDimension;
    }
    for (var _i8 = 0; _i8 < maxVoxelsPerChunkLog2; ++_i8) {
        var nextDim = findNextDimension();
        if (nextDim === -1) {
            break;
        }
        chunkDataSize[nextDim] *= 2;
    }
    return chunkDataSize;
}
/**
 * Computes a 3-d block size that has depth 1 in flatDimension and is near-isotropic (in nanometers)
 * in the other two dimensions.  The remaining options are the same as for
 * getNearIsotropicBlockSize.
 */
function getTwoDimensionalBlockSize(options) {
    var _options$lowerVoxelBo2 = options.lowerVoxelBound,
        lowerVoxelBound = _options$lowerVoxelBo2 === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["f" /* kZeroVec */] : _options$lowerVoxelBo2,
        _options$upperVoxelBo = options.upperVoxelBound,
        upperVoxelBound = _options$upperVoxelBo === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["e" /* kInfinityVec */] : _options$upperVoxelBo,
        flatDimension = options.flatDimension,
        voxelSize = options.voxelSize,
        maxVoxelsPerChunkLog2 = options.maxVoxelsPerChunkLog2,
        transform = options.transform;

    __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].subtract(tempVec3, upperVoxelBound, lowerVoxelBound);
    tempVec3[flatDimension] = 1;
    return getNearIsotropicBlockSize({ voxelSize, upperVoxelBound: tempVec3, maxVoxelsPerChunkLog2, transform });
}
/**
 * Returns an array of [xy, xz, yz] 2-dimensional block sizes.
 */
function getTwoDimensionalBlockSizes(options) {
    var chunkDataSizes = new Array();
    for (var i = 0; i < 3; ++i) {
        chunkDataSizes[i] = getTwoDimensionalBlockSize({
            flatDimension: i,
            voxelSize: options.voxelSize,
            lowerVoxelBound: options.lowerVoxelBound,
            upperVoxelBound: options.upperVoxelBound,
            maxVoxelsPerChunkLog2: options.maxVoxelsPerChunkLog2,
            transform: options.transform
        });
    }
    return chunkDataSizes;
}
var ChunkLayoutPreference;
(function (ChunkLayoutPreference) {
    /**
     * Indicates that isotropic chunks are desired.
     */
    ChunkLayoutPreference[ChunkLayoutPreference["ISOTROPIC"] = 0] = "ISOTROPIC";
    /**
     * Indicates that 2-D chunks are desired.
     */
    ChunkLayoutPreference[ChunkLayoutPreference["FLAT"] = 1] = "FLAT";
})(ChunkLayoutPreference || (ChunkLayoutPreference = {}));
function getCombinedTransform(transform, options) {
    var additionalTransform = options.transform;
    if (additionalTransform === undefined) {
        if (transform === undefined) {
            return __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["c" /* identityMat4 */];
        }
        return transform;
    }
    if (transform === undefined) {
        return additionalTransform;
    }
    return __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["g" /* mat4 */].multiply(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["g" /* mat4 */].create(), additionalTransform, transform);
}
function getChunkDataSizes(options) {
    if (options.chunkDataSizes !== undefined) {
        return options.chunkDataSizes;
    }
    var _options$chunkLayoutP = options.chunkLayoutPreference,
        chunkLayoutPreference = _options$chunkLayoutP === undefined ? ChunkLayoutPreference.ISOTROPIC : _options$chunkLayoutP;

    switch (chunkLayoutPreference) {
        case ChunkLayoutPreference.ISOTROPIC:
            return [getNearIsotropicBlockSize(options)];
        case ChunkLayoutPreference.FLAT:
            var chunkDataSizes = getTwoDimensionalBlockSizes(options);
            chunkDataSizes.push(getNearIsotropicBlockSize(options));
            return chunkDataSizes;
    }
    throw new Error(`Invalid chunk layout preference: ${chunkLayoutPreference}.`);
}
/**
 * Generic specification for SliceView chunks specifying a layout and voxel size.
 */
class SliceViewChunkSpecification {
    constructor(options) {
        var _options$lowerVoxelBo3 = options.lowerVoxelBound,
            lowerVoxelBound = _options$lowerVoxelBo3 === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["f" /* kZeroVec */] : _options$lowerVoxelBo3,
            upperVoxelBound = options.upperVoxelBound,
            chunkDataSize = options.chunkDataSize,
            voxelSize = options.voxelSize,
            transform = options.transform,
            _options$baseVoxelOff = options.baseVoxelOffset,
            baseVoxelOffset = _options$baseVoxelOff === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["f" /* kZeroVec */] : _options$baseVoxelOff;
        var _options$lowerClipBou = options.lowerClipBound,
            lowerClipBound = _options$lowerClipBou === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].multiply(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), voxelSize, lowerVoxelBound) : _options$lowerClipBou,
            _options$upperClipBou = options.upperClipBound,
            upperClipBound = _options$upperClipBou === undefined ? __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].multiply(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), voxelSize, upperVoxelBound) : _options$upperClipBou;

        this.voxelSize = voxelSize;
        this.chunkDataSize = chunkDataSize;
        this.chunkLayout = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_chunk_layout__["a" /* ChunkLayout */].get(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].multiply(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create(), options.chunkDataSize, voxelSize), transform);
        this.lowerClipBound = lowerClipBound;
        this.upperClipBound = upperClipBound;
        this.lowerVoxelBound = lowerVoxelBound;
        this.upperVoxelBound = upperVoxelBound;
        this.baseVoxelOffset = baseVoxelOffset;
        var lowerChunkBound = this.lowerChunkBound = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        var upperChunkBound = this.upperChunkBound = __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_geom__["l" /* vec3 */].create();
        for (var i = 0; i < 3; ++i) {
            lowerChunkBound[i] = Math.floor(lowerVoxelBound[i] / chunkDataSize[i]);
            upperChunkBound[i] = Math.floor((upperVoxelBound[i] - 1) / chunkDataSize[i] + 1);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["d"] = SliceViewChunkSpecification;

var SLICEVIEW_RPC_ID = 'SliceView';
var SLICEVIEW_RENDERLAYER_RPC_ID = 'sliceview/RenderLayer';

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = decodeJpegChunk;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend_chunk_decoders_postprocess__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_decode_jpeg_stack__ = __webpack_require__(79);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function decodeJpegChunk(chunk, response) {
  Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend_chunk_decoders_postprocess__["a" /* postProcessRawData */])(chunk, Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_decode_jpeg_stack__["a" /* decodeJpegStack */])(new Uint8Array(response), chunk.chunkDataSize, chunk.source.spec.numChannels));
}

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CANCELED; });
/* unused harmony export throwIfCanceled */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return uncancelableToken; });
/* harmony export (immutable) */ __webpack_exports__["c"] = makeCancelablePromise;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class CancellationError {
    constructor() {
        this.name = 'CancellationError';
        this.message = 'CANCELED';
    }
    toString() {
        return 'CANCELED';
    }
}
/**
 * Singleton instance of CancellationError thrown to indicate cancellation.
 */
var CANCELED = new CancellationError();
/**
 * Throws CANCELED if token.isCanceled === true.
 */
function throwIfCanceled(token) {
    if (token.isCanceled === true) {
        throw CANCELED;
    }
}
var noopFunction = () => {};
/**
 * CancellationToken that cannot be canceled.  This can be passed to operations that require a
 * CancellationToken but will not need to be canceled.
 */
var uncancelableToken = {
    isCanceled: false,
    add: () => noopFunction,
    remove: noopFunction
};
/**
 * Class that can be used to trigger cancellation.
 */
class CancellationTokenSource {
    /**
     * Trigger cancellation.
     *
     * If this.isCanceled === false, then each registered cancellation handler is invoked
     * synchronously.
     */
    cancel() {
        var handlers = this.handlers;

        if (handlers !== null) {
            this.handlers = null;
            if (handlers !== undefined) {
                for (var handler of handlers) {
                    handler();
                }
            }
        }
    }
    get isCanceled() {
        return this.handlers === null;
    }
    add(handler) {
        var handlers = this.handlers;

        if (handlers === null) {
            handler();
            return noopFunction;
        }
        if (handlers === undefined) {
            handlers = this.handlers = new Set();
        }
        handlers.add(handler);
        return () => {
            this.remove(handler);
        };
    }
    remove(handler) {
        var handlers = this.handlers;

        if (handlers != null) {
            handlers.delete(handler);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = CancellationTokenSource;

/**
 * Creates a promise and a dependent cancellation token.
 *
 * The dependent cancellation token will be canceled if the specified `cancellationToken` is
 * canceled while the promise is pending.
 *
 * @param cancellationToken The token that provides notification of cancellation.
 * @param executor The executor passed the resolve and reject functions for the promise, as well as
 * the dependent cancellation token.  If cancellation occurs after either resolve or reject is
 * called, then the dependent token is not cancelled.
 *
 * @returns A new Promise.
 */
function makeCancelablePromise(cancellationToken, executor) {
    return new Promise((resolve, reject) => {
        if (cancellationToken === uncancelableToken) {
            executor(resolve, reject, uncancelableToken);
            return;
        }
        var scopedToken = new CancellationTokenSource();
        var unregister = cancellationToken.add(() => {
            scopedToken.cancel();
        });
        executor(value => {
            unregister();
            resolve(value);
        }, error => {
            unregister();
            reject(error);
        }, scopedToken);
    });
}

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Simple signal dispatch mechanism.
 */
/**
 * This class provides a simple signal dispatch mechanism.  Handlers can be added, and then the
 * `dispatch` method calls all of them.
 *
 * If specified, Callable should be an interface containing only a callable signature returning
 * void.  Due to limitations in TypeScript, any interface containing a callable signature will be
 * accepted by the compiler, but the resultant signature of `dispatch` will not be correct.
 */
class Signal {
  constructor() {
    this.handlers = new Set();
    /**
     * Count of number of times this signal has been dispatched.  This is incremented each time
     * `dispatch` is called prior to invoking the handlers.
     */
    this.count = 0;
    var obj = this;
    this.dispatch = function () {
      ++obj.count;
      obj.handlers.forEach(handler => {
        handler.apply(this, arguments);
      });
    };
  }
  /**
   * Add a handler function.  If `dispatch` is currently be called, then the new handler will be
   * called before `dispatch` returns.
   *
   * @param handler The handler function to add.
   *
   * @return A function that unregisters the handler.
   */
  add(handler) {
    this.handlers.add(handler);
    return () => {
      return this.remove(handler);
    };
  }
  /**
   * Remove a handler function.  If `dispatch` is currently be called and the new handler has not
   * yet been called, then it will not be called.
   *
   * @param handler Handler to remove.
   * @return `true` if the handler was present, `false` otherwise.
   */
  remove(handler) {
    return this.handlers.delete(handler);
  }
  /**
   * Disposes of resources.  No methods, including `dispatch`, may be invoked afterwards.
   */
  dispose() {
    this.handlers = undefined;
  }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = Signal;

/**
 * Simple specialization of Signal for the common case of a nullary handler signature.
 */
class NullarySignal extends Signal {}
/* harmony export (immutable) */ __webpack_exports__["a"] = NullarySignal;


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = withSharedVisibility;
/* harmony export (immutable) */ __webpack_exports__["b"] = getPriorityTier;
/* harmony export (immutable) */ __webpack_exports__["a"] = getBasePriority;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_shared_watchable_value__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__ = __webpack_require__(11);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Mixin for adding a visibility shared property to a ChunkRequester.  Calls
 * `this.chunkManager.scheduleUpdateChunkPriorities()` when visibility changes.
 */
function withSharedVisibility(Base) {
    return class extends Base {
        constructor() {
            super(...arguments);
            var rpc = arguments.length <= 0 ? undefined : arguments[0];
            var options = arguments.length <= 1 ? undefined : arguments[1];
            this.visibility = rpc.get(options['visibility']);
            this.registerDisposer(this.visibility.changed.add(() => this.chunkManager.scheduleUpdateChunkPriorities()));
        }
    };
}
/**
 * Computes the ChunkPriorityTier for the given `visibility` value.
 *
 * A value of `Number.POSITIVE_INFINITY` means `VISIBLE`.  Any other value means `PREFETCH`.
 */
function getPriorityTier(visibility) {
    return visibility === Number.POSITIVE_INFINITY ? __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].VISIBLE : __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].PREFETCH;
}
/**
 * Computes the base priority for the given `visibility` value.  If the value is
 * `Number.POSTIVE_INFINITY`, corresponding to actual visibility, the base priority is 0.
 * Otherwise, the value is interpreted as the prefetch priority (higher means higher priority), and
 * the base priority is equal to the product of this value and `PREFETCH_PRIORITY_MULTIPLIER`.
 */
function getBasePriority(visibility) {
    return visibility === Number.POSITIVE_INFINITY ? 0 : visibility * __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["f" /* PREFETCH_PRIORITY_MULTIPLIER */];
}

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = decodeJsonManifestChunk;
/* harmony export (immutable) */ __webpack_exports__["b"] = computeVertexNormals;
/* harmony export (immutable) */ __webpack_exports__["e"] = decodeVertexPositionsAndIndices;
/* harmony export (immutable) */ __webpack_exports__["d"] = decodeTriangleVertexPositionsAndIndices;
/* unused harmony export FragmentSource */
/* unused harmony export MeshLayer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_base__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_segmentation_display_state_backend__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_segmentation_display_state_base__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_json__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_uint64__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_neuroglancer_visibility_priority_backend__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};












var MESH_OBJECT_MANIFEST_CHUNK_PRIORITY = 100;
var MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY = 50;
// Chunk that contains the list of fragments that make up a single object.
class ManifestChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["Chunk"] {
    constructor() {
        super();
        this.backendOnly = true;
        this.objectId = new __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_uint64__["a" /* Uint64 */]();
    }
    // We can't save a reference to objectId, because it may be a temporary
    // object.
    initializeManifestChunk(key, objectId, clipBounds) {
        super.initialize(key);
        this.objectId.assign(objectId);
        if (clipBounds) {
            this.clipBounds = clipBounds;
        }
    }
    freeSystemMemory() {
        this.fragmentIds = null;
    }
    downloadSucceeded() {
        // We can't easily determine the memory usage of the JSON manifest.  Just use 100 bytes as a
        // default value.
        this.systemMemoryBytes = 100;
        super.downloadSucceeded();
        if (this.priorityTier < __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].RECENT) {
            this.source.chunkManager.scheduleUpdateChunkPriorities();
        }
    }
    toString() {
        return this.objectId.toString();
    }
}
/* unused harmony export ManifestChunk */

/**
 * Chunk that contains the mesh for a single fragment of a single object.
 */
class FragmentChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["Chunk"] {
    constructor() {
        super();
        this.manifestChunk = null;
        this.fragmentId = null;
        this.vertexPositions = null;
        this.indices = null;
        this.vertexNormals = null;
    }
    initializeFragmentChunk(key, manifestChunk, fragmentId) {
        super.initialize(key);
        this.manifestChunk = manifestChunk;
        this.fragmentId = fragmentId;
    }
    freeSystemMemory() {
        this.manifestChunk = null;
        this.vertexPositions = this.indices = this.vertexNormals = null;
        this.fragmentId = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        msg['objectKey'] = this.manifestChunk.key;
        var vertexPositions = this.vertexPositions,
            indices = this.indices,
            vertexNormals = this.vertexNormals;

        msg['vertexPositions'] = vertexPositions;
        msg['indices'] = indices;
        msg['vertexNormals'] = vertexNormals;
        var vertexPositionsBuffer = vertexPositions.buffer;
        transfers.push(vertexPositionsBuffer);
        var indicesBuffer = indices.buffer;
        if (indicesBuffer !== vertexPositionsBuffer) {
            transfers.push(indicesBuffer);
        }
        var vertexNormalsBuffer = vertexNormals.buffer;
        if (vertexNormalsBuffer !== vertexPositionsBuffer && vertexNormalsBuffer !== indicesBuffer) {
            transfers.push(vertexNormalsBuffer);
        }
        this.vertexPositions = this.indices = this.vertexNormals = null;
    }
    downloadSucceeded() {
        var vertexPositions = this.vertexPositions,
            indices = this.indices,
            vertexNormals = this.vertexNormals;

        this.systemMemoryBytes = this.gpuMemoryBytes = vertexPositions.byteLength + indices.byteLength + vertexNormals.byteLength;
        super.downloadSucceeded();
    }
}
/* unused harmony export FragmentChunk */

/**
 * Assigns chunk.fragmentKeys to response[keysPropertyName].
 *
 * Verifies that response[keysPropertyName] is an array of strings.
 */
function decodeJsonManifestChunk(chunk, response, keysPropertyName) {
    Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_json__["e" /* verifyObject */])(response);
    chunk.fragmentIds = Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_json__["f" /* verifyObjectProperty */])(response, keysPropertyName, __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_json__["h" /* verifyStringArray */]);
}
/**
 * Computes normal vectors for each vertex of a triangular mesh.
 *
 * The normal vector for each triangle with vertices (v0, v1, v2) is computed as the (normalized)
 * cross product of (v1 - v0, v2 - v1).  The normal vector for each vertex is obtained by averaging
 * the normal vector of each of the triangles that contains it.
 *
 * @param positions The vertex positions in [x0, y0, z0, x1, y1, z1, ...] format.
 * @param indices The indices of the triangle vertices.  Each triplet of consecutive values
 *     specifies a triangle.
 */
function computeVertexNormals(positions, indices) {
    var faceNormal = __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].create();
    var v1v0 = __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].create();
    var v2v1 = __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].create();
    var vertexNormals = new Float32Array(positions.length);
    var vertexFaceCount = new Float32Array(positions.length / 3);
    var numIndices = indices.length;
    for (var i = 0; i < numIndices; i += 3) {
        for (var j = 0; j < 3; ++j) {
            vertexFaceCount[indices[i + j]] += 1;
        }
    }
    for (var _i = 0; _i < numIndices; _i += 3) {
        var i0 = indices[_i] * 3,
            i1 = indices[_i + 1] * 3,
            i2 = indices[_i + 2] * 3;
        for (var _j = 0; _j < 3; ++_j) {
            v1v0[_j] = positions[i1 + _j] - positions[i0 + _j];
            v2v1[_j] = positions[i2 + _j] - positions[i1 + _j];
        }
        __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].cross(faceNormal, v1v0, v2v1);
        __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].normalize(faceNormal, faceNormal);
        for (var k = 0; k < 3; ++k) {
            var index = indices[_i + k];
            var scalar = 1.0 / vertexFaceCount[index];
            var offset = index * 3;
            for (var _j2 = 0; _j2 < 3; ++_j2) {
                vertexNormals[offset + _j2] += scalar * faceNormal[_j2];
            }
        }
    }
    // Normalize all vertex normals.
    var numVertices = vertexNormals.length;
    for (var _i2 = 0; _i2 < numVertices; _i2 += 3) {
        var vec = vertexNormals.subarray(_i2, 3);
        __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].normalize(vec, vec);
    }
    return vertexNormals;
}
/**
 * Extracts vertex positions and indices of the specified endianness from `data'.
 *
 * The vertexByteOffset specifies the byte offset into `data' of the start of the vertex position
 * data.  The vertex data must consist of verticesPerPrimitive * numVertices 32-bit float values.
 *
 * If indexByteOffset is not specified, it defaults to the end of the vertex position data.  If
 * numPrimitives is not specified, it is assumed that the index data continues until the end of the
 * array.
 */
function decodeVertexPositionsAndIndices(chunk, verticesPerPrimitive, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numPrimitives) {
    var vertexPositions = new Float32Array(data, vertexByteOffset, numVertices * 3);
    Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_endian__["d" /* convertEndian32 */])(vertexPositions, endianness);
    if (indexByteOffset === undefined) {
        indexByteOffset = vertexByteOffset + 12 * numVertices;
    }
    var numIndices = void 0;
    if (numPrimitives !== undefined) {
        numIndices = numPrimitives * verticesPerPrimitive;
    }
    // For compatibility with Firefox, length argument must not be undefined.
    var indices = numIndices === undefined ? new Uint32Array(data, indexByteOffset) : new Uint32Array(data, indexByteOffset, numIndices);
    if (indices.length % verticesPerPrimitive !== 0) {
        throw new Error(`Number of indices is not a multiple of ${verticesPerPrimitive}: ${indices.length}.`);
    }
    Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_endian__["d" /* convertEndian32 */])(indices, endianness);
    chunk.vertexPositions = vertexPositions;
    chunk.indices = indices;
}
/**
 * Extracts vertex positions and triangle vertex indices of the specified endianness from `data'.
 *
 * Vertex normals are computed.
 *
 * See decodeVertexPositionsAndIndices above.
 */
function decodeTriangleVertexPositionsAndIndices(chunk, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numTriangles) {
    decodeVertexPositionsAndIndices(chunk, /*verticesPerPrimitive=*/3, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numTriangles);
    chunk.vertexNormals = computeVertexNormals(chunk.vertexPositions, chunk.indices);
}
class MeshSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        var fragmentSource = this.fragmentSource = this.registerDisposer(rpc.getRef(options['fragmentSource']));
        fragmentSource.meshSource = this;
    }
    getChunk(objectId, clipBounds) {
        var key = Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_segmentation_display_state_base__["b" /* getObjectKey */])(objectId, clipBounds);
        var chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(ManifestChunk);
            chunk.initializeManifestChunk(key, objectId, clipBounds);
            this.addChunk(chunk);
        }
        return chunk;
    }
    getFragmentChunk(manifestChunk, fragmentId) {
        // TODO(blakely): This ends up storing two copies of the fragment if the manifestChunk's key was
        // generated with a clipBounds. Ideally we'd key the fragments by "objectId/fragmentId" since it
        // doesn't matter what manifest chunk it was requested from, but we can't at the moment since
        // the frontend's fragmentSource.chunks is only updated when the chunkManager detects a chunk
        // has been updated. This results in the "inverse" fragments showing up, i.e. going from
        // clipBounds=>none shows all the fragments that were not contained within the starting clipping
        // bounds. 
        //
        // let bareKey = getObjectKey(manifestChunk.objectId); 
        // let key = `${bareKey}/${fragmentId}`;
        var key = `${manifestChunk.key}/${fragmentId}`;
        var fragmentSource = this.fragmentSource;
        var chunk = fragmentSource.chunks.get(key);
        if (chunk === undefined) {
            chunk = fragmentSource.getNewChunk_(FragmentChunk);
            chunk.initializeFragmentChunk(key, manifestChunk, fragmentId);
            fragmentSource.addChunk(chunk);
        }
        return chunk;
    }
}
/* unused harmony export MeshSource */

class ParameterizedMeshSource extends MeshSource {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ParameterizedMeshSource;

var FragmentSource = class FragmentSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["ChunkSource"] {
    constructor() {
        super(...arguments);
        this.meshSource = null;
    }
    download(chunk, cancellationToken) {
        return this.meshSource.downloadFragment(chunk, cancellationToken);
    }
};
FragmentSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_base__["a" /* FRAGMENT_SOURCE_RPC_ID */])], FragmentSource);

var MeshLayer = class MeshLayer extends __WEBPACK_IMPORTED_MODULE_3_neuroglancer_segmentation_display_state_backend__["a" /* SegmentationLayerSharedObjectCounterpart */] {
    constructor(rpc, options) {
        super(rpc, options);
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        var visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        var priorityTier = Object(__WEBPACK_IMPORTED_MODULE_9_neuroglancer_visibility_priority_backend__["b" /* getPriorityTier */])(visibility);
        var basePriority = Object(__WEBPACK_IMPORTED_MODULE_9_neuroglancer_visibility_priority_backend__["a" /* getBasePriority */])(visibility);
        var source = this.source,
            chunkManager = this.chunkManager;

        Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_segmentation_display_state_base__["a" /* forEachVisibleSegment */])(this, objectId => {
            var manifestChunk = source.getChunk(objectId, this.clipBounds.value);
            chunkManager.requestChunk(manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);
            if (manifestChunk.state === __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER) {
                for (var fragmentId of manifestChunk.fragmentIds) {
                    var fragmentChunk = source.getFragmentChunk(manifestChunk, fragmentId);
                    chunkManager.requestChunk(fragmentChunk, priorityTier, basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY);
                }
            }
        });
    }
};
MeshLayer = __decorate([Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_base__["b" /* MESH_LAYER_RPC_ID */])], MeshLayer);


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = decodeRawChunk;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend_chunk_decoders_postprocess__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_geom__ = __webpack_require__(1);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




function decodeRawChunk(chunk, response) {
    var endianness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_endian__["a" /* ENDIANNESS */];
    var spec = chunk.source.spec;
    var dataType = spec.dataType;

    var numElements = Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_geom__["h" /* prod3 */])(chunk.chunkDataSize);
    var bytesPerElement = __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["a" /* DATA_TYPE_BYTES */][dataType];
    var expectedBytes = numElements * bytesPerElement * spec.numChannels;
    if (expectedBytes !== response.byteLength) {
        throw new Error(`Raw-format chunk is ${response.byteLength} bytes, ` + `but ${numElements} * ${bytesPerElement} = ${expectedBytes} bytes are expected.`);
    }
    var data = void 0;
    switch (dataType) {
        case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].UINT8:
            data = new Uint8Array(response);
            break;
        case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].UINT16:
            data = new Uint16Array(response);
            Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_endian__["c" /* convertEndian16 */])(data, endianness);
            break;
        case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].UINT32:
        case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].UINT64:
            data = new Uint32Array(response);
            Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_endian__["d" /* convertEndian32 */])(data, endianness);
            break;
        case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].FLOAT32:
            data = new Float32Array(response);
            Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_endian__["d" /* convertEndian32 */])(data, endianness);
            break;
        default:
            throw new Error(`Unexpected data type: ${dataType}.`);
    }
    Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend_chunk_decoders_postprocess__["a" /* postProcessRawData */])(chunk, data);
}

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = partitionArray;
/* unused harmony export maybePadArray */
/* harmony export (immutable) */ __webpack_exports__["a"] = getFortranOrderStrides;
/* harmony export (immutable) */ __webpack_exports__["c"] = transposeArray2d;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Partitions array[start:end] such that all elements for which predicate
 * returns true are before the elements for which predicate returns false.
 *
 * predicate will be called exactly once for each element in array[start:end],
 * in order.
 *
 * @returns {number} The index of the first element for which predicate returns
 * false, or end if there is no such element.
 */
function partitionArray(array, start, end, predicate) {
    while (start < end) {
        var x = array[start];
        if (predicate(x)) {
            ++start;
            continue;
        }
        --end;
        array[start] = array[end];
        array[end] = x;
    }
    return end;
}
/**
 * Returns an array of size newSize that starts with the contents of array.
 * Either returns array if it has the correct size, or a new array with zero
 * padding at the end.
 */
function maybePadArray(array, newSize) {
    if (array.length === newSize) {
        return array;
    }
    var newArray = new array.constructor(newSize);
    newArray.set(array);
    return newArray;
}
function getFortranOrderStrides(size) {
    var baseStride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var length = size.length;
    var strides = new Array(length);
    var stride = strides[0] = baseStride;
    for (var i = 1; i < length; ++i) {
        stride *= size[i - 1];
        strides[i] = stride;
    }
    return strides;
}
/**
 * Converts an array of shape [majorSize, minorSize] to
 * [minorSize, majorSize].
 */
function transposeArray2d(array, majorSize, minorSize) {
    var transpose = new array.constructor(array.length);
    for (var i = 0; i < majorSize * minorSize; i += minorSize) {
        for (var j = 0; j < minorSize; j++) {
            var index = i / minorSize;
            transpose[j * majorSize + index] = array[i + j];
        }
    }
    return transpose;
}

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export BLOCK_HEADER_SIZE */
/* unused harmony export newCache */
/* harmony export (immutable) */ __webpack_exports__["c"] = writeBlock;
/* harmony export (immutable) */ __webpack_exports__["a"] = encodeChannel;
/* harmony export (immutable) */ __webpack_exports__["b"] = encodeChannels;
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// DO NOT EDIT.  Generated from
// templates/neuroglancer/sliceview/compressed_segmentation/encode_common.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BLOCK_HEADER_SIZE = 2;
function newCache() {
    return new Map();
}
function writeEncodedRepresentation(outputData, outputOffset, encodingBuffer, indexBuffer, encodedBits, encodedSize32Bits) {
    // Write encoded representation.
    if (encodedBits > 0) {
        switch (encodedBits) {
            case 1:
                {
                    for (var wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {
                        var word = 0;
                        word |= indexBuffer[encodingBuffer[elementIndex + 0]] << 0;
                        word |= indexBuffer[encodingBuffer[elementIndex + 1]] << 1;
                        word |= indexBuffer[encodingBuffer[elementIndex + 2]] << 2;
                        word |= indexBuffer[encodingBuffer[elementIndex + 3]] << 3;
                        word |= indexBuffer[encodingBuffer[elementIndex + 4]] << 4;
                        word |= indexBuffer[encodingBuffer[elementIndex + 5]] << 5;
                        word |= indexBuffer[encodingBuffer[elementIndex + 6]] << 6;
                        word |= indexBuffer[encodingBuffer[elementIndex + 7]] << 7;
                        word |= indexBuffer[encodingBuffer[elementIndex + 8]] << 8;
                        word |= indexBuffer[encodingBuffer[elementIndex + 9]] << 9;
                        word |= indexBuffer[encodingBuffer[elementIndex + 10]] << 10;
                        word |= indexBuffer[encodingBuffer[elementIndex + 11]] << 11;
                        word |= indexBuffer[encodingBuffer[elementIndex + 12]] << 12;
                        word |= indexBuffer[encodingBuffer[elementIndex + 13]] << 13;
                        word |= indexBuffer[encodingBuffer[elementIndex + 14]] << 14;
                        word |= indexBuffer[encodingBuffer[elementIndex + 15]] << 15;
                        word |= indexBuffer[encodingBuffer[elementIndex + 16]] << 16;
                        word |= indexBuffer[encodingBuffer[elementIndex + 17]] << 17;
                        word |= indexBuffer[encodingBuffer[elementIndex + 18]] << 18;
                        word |= indexBuffer[encodingBuffer[elementIndex + 19]] << 19;
                        word |= indexBuffer[encodingBuffer[elementIndex + 20]] << 20;
                        word |= indexBuffer[encodingBuffer[elementIndex + 21]] << 21;
                        word |= indexBuffer[encodingBuffer[elementIndex + 22]] << 22;
                        word |= indexBuffer[encodingBuffer[elementIndex + 23]] << 23;
                        word |= indexBuffer[encodingBuffer[elementIndex + 24]] << 24;
                        word |= indexBuffer[encodingBuffer[elementIndex + 25]] << 25;
                        word |= indexBuffer[encodingBuffer[elementIndex + 26]] << 26;
                        word |= indexBuffer[encodingBuffer[elementIndex + 27]] << 27;
                        word |= indexBuffer[encodingBuffer[elementIndex + 28]] << 28;
                        word |= indexBuffer[encodingBuffer[elementIndex + 29]] << 29;
                        word |= indexBuffer[encodingBuffer[elementIndex + 30]] << 30;
                        word |= indexBuffer[encodingBuffer[elementIndex + 31]] << 31;
                        outputData[outputOffset + wordIndex] = word;
                        elementIndex += 32;
                    }
                }
                break;
            case 2:
                {
                    for (var _wordIndex = 0, _elementIndex = 0; _wordIndex < encodedSize32Bits; ++_wordIndex) {
                        var _word = 0;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 0]] << 0;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 1]] << 2;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 2]] << 4;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 3]] << 6;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 4]] << 8;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 5]] << 10;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 6]] << 12;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 7]] << 14;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 8]] << 16;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 9]] << 18;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 10]] << 20;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 11]] << 22;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 12]] << 24;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 13]] << 26;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 14]] << 28;
                        _word |= indexBuffer[encodingBuffer[_elementIndex + 15]] << 30;
                        outputData[outputOffset + _wordIndex] = _word;
                        _elementIndex += 16;
                    }
                }
                break;
            case 4:
                {
                    for (var _wordIndex2 = 0, _elementIndex2 = 0; _wordIndex2 < encodedSize32Bits; ++_wordIndex2) {
                        var _word2 = 0;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 0]] << 0;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 1]] << 4;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 2]] << 8;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 3]] << 12;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 4]] << 16;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 5]] << 20;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 6]] << 24;
                        _word2 |= indexBuffer[encodingBuffer[_elementIndex2 + 7]] << 28;
                        outputData[outputOffset + _wordIndex2] = _word2;
                        _elementIndex2 += 8;
                    }
                }
                break;
            case 8:
                {
                    for (var _wordIndex3 = 0, _elementIndex3 = 0; _wordIndex3 < encodedSize32Bits; ++_wordIndex3) {
                        var _word3 = 0;
                        _word3 |= indexBuffer[encodingBuffer[_elementIndex3 + 0]] << 0;
                        _word3 |= indexBuffer[encodingBuffer[_elementIndex3 + 1]] << 8;
                        _word3 |= indexBuffer[encodingBuffer[_elementIndex3 + 2]] << 16;
                        _word3 |= indexBuffer[encodingBuffer[_elementIndex3 + 3]] << 24;
                        outputData[outputOffset + _wordIndex3] = _word3;
                        _elementIndex3 += 4;
                    }
                }
                break;
            case 16:
                {
                    for (var _wordIndex4 = 0, _elementIndex4 = 0; _wordIndex4 < encodedSize32Bits; ++_wordIndex4) {
                        var _word4 = 0;
                        _word4 |= indexBuffer[encodingBuffer[_elementIndex4 + 0]] << 0;
                        _word4 |= indexBuffer[encodingBuffer[_elementIndex4 + 1]] << 16;
                        outputData[outputOffset + _wordIndex4] = _word4;
                        _elementIndex4 += 2;
                    }
                }
                break;
            case 32:
                {
                    for (var _wordIndex5 = 0, _elementIndex5 = 0; _wordIndex5 < encodedSize32Bits; ++_wordIndex5) {
                        var _word5 = 0;
                        _word5 |= indexBuffer[encodingBuffer[_elementIndex5 + 0]] << 0;
                        outputData[outputOffset + _wordIndex5] = _word5;
                        _elementIndex5 += 1;
                    }
                }
                break;
        }
    }
}
function writeBlock(output, baseOffset, cache, numBlockElements, numUniqueValues, valuesBuffer2, encodingBuffer, indexBuffer2, uint32sPerElement) {
    var encodedBits = void 0;
    if (numUniqueValues === 1) {
        encodedBits = 0;
    } else {
        encodedBits = 1;
        while (1 << encodedBits < numUniqueValues) {
            encodedBits *= 2;
        }
    }
    var encodedSize32bits = Math.ceil(encodedBits * numBlockElements / 32);
    var encodedValueBaseOffset = output.length;
    var elementsToWrite = encodedSize32bits;
    var writeTable = false;
    var key = Array.prototype.join.call(valuesBuffer2.subarray(0, numUniqueValues * uint32sPerElement), ',');
    var tableOffset = cache.get(key);
    if (tableOffset === undefined) {
        writeTable = true;
        elementsToWrite += numUniqueValues * uint32sPerElement;
        tableOffset = encodedValueBaseOffset + encodedSize32bits - baseOffset;
        cache.set(key, tableOffset);
    }
    output.resize(encodedValueBaseOffset + elementsToWrite);
    var outputData = output.data;
    writeEncodedRepresentation(outputData, encodedValueBaseOffset, encodingBuffer, indexBuffer2, encodedBits, encodedSize32bits);
    // Write table
    if (writeTable) {
        var curOutputOff = encodedValueBaseOffset + encodedSize32bits;
        for (var i = 0, length = numUniqueValues * uint32sPerElement; i < length; ++i) {
            outputData[curOutputOff++] = valuesBuffer2[i];
        }
    }
    return [encodedBits, tableOffset];
}
function encodeChannel(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock) {
    // Maps a sorted list of table entries in the form <low>,<high>,<low>,<high>,... to the table
    // offset relative to baseOffset.
    var cache = newCache();
    var gridSize = new Array(3);
    var blockIndexSize = BLOCK_HEADER_SIZE;
    for (var i = 0; i < 3; ++i) {
        var curGridSize = gridSize[i] = Math.ceil(volumeSize[i] / blockSize[i]);
        blockIndexSize *= curGridSize;
    }
    var gx = gridSize[0],
        gy = gridSize[1],
        gz = gridSize[2];
    var xSize = volumeSize[0],
        ySize = volumeSize[1],
        zSize = volumeSize[2];
    var xBlockSize = blockSize[0],
        yBlockSize = blockSize[1],
        zBlockSize = blockSize[2];
    var baseOffset = output.length;
    var headerOffset = baseOffset;
    var actualSize = [0, 0, 0];
    output.resize(baseOffset + blockIndexSize);
    var sx = inputStrides[0],
        sy = inputStrides[1],
        sz = inputStrides[2];
    for (var bz = 0; bz < gz; ++bz) {
        actualSize[2] = Math.min(zBlockSize, zSize - bz * zBlockSize);
        for (var by = 0; by < gy; ++by) {
            actualSize[1] = Math.min(yBlockSize, ySize - by * yBlockSize);
            for (var bx = 0; bx < gx; ++bx) {
                actualSize[0] = Math.min(xBlockSize, xSize - bx * xBlockSize);
                var inputOffset = bz * zBlockSize * sz + by * yBlockSize * sy + bx * xBlockSize * sx;
                var encodedValueBaseOffset = output.length - baseOffset;

                var _encodeBlock = encodeBlock(rawData, baseInputOffset + inputOffset, inputStrides, blockSize, actualSize, baseOffset, cache, output),
                    _encodeBlock2 = _slicedToArray(_encodeBlock, 2),
                    encodedBits = _encodeBlock2[0],
                    tableOffset = _encodeBlock2[1];

                var outputData = output.data;
                outputData[headerOffset++] = tableOffset | encodedBits << 24;
                outputData[headerOffset++] = encodedValueBaseOffset;
            }
        }
    }
}
function encodeChannels(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock) {
    var channelOffsetOutputBase = output.length;
    var numChannels = volumeSize[3];
    output.resize(channelOffsetOutputBase + numChannels);
    for (var channel = 0; channel < numChannels; ++channel) {
        output.data[channelOffsetOutputBase + channel] = output.length;
        encodeChannel(output, blockSize, rawData, volumeSize, baseInputOffset + inputStrides[3] * channel, inputStrides, encodeBlock);
    }
}

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliceView", function() { return SliceView; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_base__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_signal__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_visibility_priority_backend__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};






var BASE_PRIORITY = -1e12;
var SCALE_PRIORITY_MULTIPLIER = 1e9;
// Temporary values used by SliceView.updateVisibleChunk
var tempChunkPosition = __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].create();
var tempChunkDataSize = __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].create();
var tempCenter = __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].create();
class SliceViewCounterpartBase extends __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_base__["c" /* SliceViewBase */] {
    constructor(rpc, options) {
        super();
        this.initializeSharedObject(rpc, options['id']);
    }
}
var SliceViewIntermediateBase = Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_visibility_priority_backend__["c" /* withSharedVisibility */])(Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["withChunkManager"])(SliceViewCounterpartBase));
var SliceView = class SliceView extends SliceViewIntermediateBase {
    constructor(rpc, options) {
        super(rpc, options);
        this.handleLayerChanged = () => {
            if (this.hasValidViewport) {
                this.chunkManager.scheduleUpdateChunkPriorities();
            }
        };
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateVisibleChunks();
        }));
    }
    onViewportChanged() {
        this.chunkManager.scheduleUpdateChunkPriorities();
    }
    updateVisibleChunks() {
        var globalCenter = this.centerDataPosition;
        var chunkManager = this.chunkManager;
        var visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        var priorityTier = Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_visibility_priority_backend__["b" /* getPriorityTier */])(visibility);
        var basePriority = Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_visibility_priority_backend__["a" /* getBasePriority */])(visibility);
        basePriority += BASE_PRIORITY;
        var localCenter = tempCenter;
        var getLayoutObject = chunkLayout => {
            chunkLayout.globalToLocalSpatial(localCenter, globalCenter);
            return this.visibleChunkLayouts.get(chunkLayout);
        };
        function addChunk(chunkLayout, sources, positionInChunks, visibleSources) {
            __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].multiply(tempChunkPosition, positionInChunks, chunkLayout.size);
            var priority = -__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].distance(localCenter, tempChunkPosition);
            for (var source of visibleSources) {
                var priorityIndex = sources.get(source);
                var chunk = source.getChunk(positionInChunks);
                chunkManager.requestChunk(chunk, priorityTier, basePriority + priority + SCALE_PRIORITY_MULTIPLIER * priorityIndex);
            }
        }
        this.computeVisibleChunks(getLayoutObject, addChunk);
    }
    removeVisibleLayer(layer) {
        this.visibleLayers.delete(layer);
        layer.layerChanged.remove(this.handleLayerChanged);
        this.visibleSourcesStale = true;
        if (this.hasValidViewport) {
            this.chunkManager.scheduleUpdateChunkPriorities();
        }
    }
    disposed() {
        for (var layer of this.visibleLayers.keys()) {
            this.removeVisibleLayer(layer);
        }
        super.disposed();
    }
};
SliceView = __decorate([Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_base__["b" /* SLICEVIEW_RPC_ID */])], SliceView);

Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__["f" /* registerRPC */])('SliceView.updateView', function (x) {
    var obj = this.get(x.id);
    if (x.width) {
        obj.setViewportSize(x.width, x.height);
    }
    if (x.viewportToData) {
        obj.setViewportToDataMatrix(x.viewportToData);
    }
});
Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__["f" /* registerRPC */])('SliceView.addVisibleLayer', function (x) {
    var obj = this.get(x['id']);
    var layer = this.get(x['layerId']);
    obj.visibleLayers.set(layer, []);
    layer.layerChanged.add(obj.handleLayerChanged);
    obj.visibleSourcesStale = true;
    if (obj.hasValidViewport) {
        obj.chunkManager.scheduleUpdateChunkPriorities();
    }
});
Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__["f" /* registerRPC */])('SliceView.removeVisibleLayer', function (x) {
    var obj = this.get(x['id']);
    var layer = this.get(x['layerId']);
    obj.removeVisibleLayer(layer);
});
class SliceViewChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["Chunk"] {
    constructor() {
        super();
        this.source = null;
        this.chunkGridPosition = __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].create();
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initialize(key);
        __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].copy(this.chunkGridPosition, chunkGridPosition);
        this.chunkDataSize = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        var chunkDataSize = this.chunkDataSize;
        if (chunkDataSize !== this.source.spec.chunkDataSize) {
            msg['chunkDataSize'] = chunkDataSize;
        }
        msg['chunkGridPosition'] = this.chunkGridPosition;
    }
    downloadSucceeded() {
        super.downloadSucceeded();
    }
    freeSystemMemory() {}
    toString() {
        return this.source.toString() + ':' + Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["m" /* vec3Key */])(this.chunkGridPosition);
    }
}
/* harmony export (immutable) */ __webpack_exports__["SliceViewChunk"] = SliceViewChunk;

class SliceViewChunkSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
    }
    /**
     * Helper function for computing the voxel bounds of a chunk based on its chunkGridPosition.
     *
     * This assumes that the grid of chunk positions starts at this.baseVoxelOffset.  Chunks are
     * clipped to lie within upperVoxelBound, but are not clipped to lie within lowerVoxelBound.  (The
     * frontend code currently cannot handle chunks clipped at their lower corner, and the chunk
     * layout can generally be chosen so that lowerVoxelBound lies on a chunk boundary.)
     *
     * This sets chunk.chunkDataSize to a copy of the returned chunkDataSize if it differs from
     * this.spec.chunkDataSize; otherwise, it is set to this.spec.chunkDataSize.
     *
     * @returns A globally-allocated Vec3 containing the chunk corner position in voxel coordinates.
     * The returned Vec3 will be invalidated by any subsequent call to this method, even on a
     * different VolumeChunkSource instance.
     */
    computeChunkBounds(chunk) {
        var spec = this.spec;
        var upperVoxelBound = spec.upperVoxelBound;

        var origChunkDataSize = spec.chunkDataSize;
        var newChunkDataSize = tempChunkDataSize;
        // Chunk start position in voxel coordinates.
        var chunkPosition = __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].multiply(tempChunkPosition, chunk.chunkGridPosition, origChunkDataSize);
        // Specifies whether the chunk only partially fits within the data bounds.
        var partial = false;
        for (var i = 0; i < 3; ++i) {
            var upper = Math.min(upperVoxelBound[i], chunkPosition[i] + origChunkDataSize[i]);
            var size = newChunkDataSize[i] = upper - chunkPosition[i];
            if (size !== origChunkDataSize[i]) {
                partial = true;
            }
        }
        __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].add(chunkPosition, chunkPosition, this.spec.baseVoxelOffset);
        if (partial) {
            chunk.chunkDataSize = __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].clone(newChunkDataSize);
        } else {
            chunk.chunkDataSize = origChunkDataSize;
        }
        return chunkPosition;
    }
}
/* harmony export (immutable) */ __webpack_exports__["SliceViewChunkSource"] = SliceViewChunkSource;

class RenderLayer extends __WEBPACK_IMPORTED_MODULE_5_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */] {
    constructor(rpc, options) {
        super(rpc, options);
        this.layerChanged = new __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_signal__["a" /* NullarySignal */]();
        var sources = this.sources = new Array();
        for (var alternativeIds of options['sources']) {
            var alternatives = new Array();
            sources.push(alternatives);
            for (var sourceId of alternativeIds) {
                var source = rpc.get(sourceId);
                this.registerDisposer(source.addRef());
                alternatives.push(source);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["RenderLayer"] = RenderLayer;

/**
 * Extends SliceViewChunkSource with a parameters member.
 *
 * Subclasses should be decorated with
 * src/neuroglancer/chunk_manager/backend.ts:registerChunkSource.
 */
class ParameterizedSliceViewChunkSource extends SliceViewChunkSource {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
    }
}
/* harmony export (immutable) */ __webpack_exports__["ParameterizedSliceViewChunkSource"] = ParameterizedSliceViewChunkSource;


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getObjectKey;
/* harmony export (immutable) */ __webpack_exports__["a"] = forEachVisibleSegment;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a string key for identifying a uint64 object id.  This is faster than
 * Uint64.prototype.toString().
 */
function getObjectKey(objectId, bounds) {
    var boundsSuffix = bounds ? `_${bounds.center.toString()}_${bounds.size.toString()}` : '';
    return `${objectId.low},${objectId.high}${boundsSuffix}`;
}
function forEachVisibleSegment(state, callback) {
    var visibleSegments = state.visibleSegments,
        segmentEquivalences = state.segmentEquivalences;

    for (var rootObjectId of visibleSegments) {
        // TODO(jbms): Remove this check if logic is added to ensure that it always holds.
        if (!segmentEquivalences.allSets.isMinElement(rootObjectId)) {
            continue;
        }
        for (var objectId of segmentEquivalences.setElements(rootObjectId)) {
            callback(objectId, rootObjectId);
        }
    }
}

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = decodeCompressedSegmentationChunk;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function decodeCompressedSegmentationChunk(chunk, response) {
  chunk.data = new Uint32Array(response);
}

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = postProcessRawData;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_compressed_segmentation_encode_uint32__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_compressed_segmentation_encode_uint64__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint32array_builder__ = __webpack_require__(78);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Converts raw data volumes to the appropriate format required by the frontend.
 */




var tempBuffer = new __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint32array_builder__["a" /* Uint32ArrayBuilder */](20000);
var tempVolumeSize = new Array(4);
function postProcessRawData(chunk, data) {
    var spec = chunk.source.spec;

    if (spec.compressedSegmentationBlockSize) {
        var dataType = spec.dataType;

        tempBuffer.clear();
        var chunkDataSize = chunk.chunkDataSize;
        tempVolumeSize[0] = chunkDataSize[0];
        tempVolumeSize[1] = chunkDataSize[1];
        tempVolumeSize[2] = chunkDataSize[2];
        tempVolumeSize[3] = spec.numChannels;
        switch (dataType) {
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["a" /* DataType */].UINT32:
                Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_compressed_segmentation_encode_uint32__["a" /* encodeChannels */])(tempBuffer, spec.compressedSegmentationBlockSize, data, tempVolumeSize);
                break;
            case __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["a" /* DataType */].UINT64:
                Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_compressed_segmentation_encode_uint64__["a" /* encodeChannels */])(tempBuffer, spec.compressedSegmentationBlockSize, data, tempVolumeSize);
                break;
            default:
                throw new Error(`Unsupported data type for compressed segmentation: ${__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["a" /* DataType */][dataType]}`);
        }
        chunk.data = new Uint32Array(tempBuffer.view);
    } else {
        chunk.data = data;
    }
}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Top level file is just a mixin of submodules & constants


var assign    = __webpack_require__(4).assign;

var deflate   = __webpack_require__(83);
var inflate   = __webpack_require__(86);
var constants = __webpack_require__(46);

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_cancellation__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_http_request__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_object_id__ = __webpack_require__(104);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Provides a simple way to request a file on the backend with priority integration.
 */





class GenericFileChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["Chunk"] {
    constructor() {
        super(...arguments);
        this.backendOnly = true;
    }
    initialize(key) {
        super.initialize(key);
        this.requesters = new Set();
    }
    downloadSucceeded() {
        super.downloadSucceeded();
        var requesters = this.requesters,
            data = this.data;

        this.requesters = undefined;
        for (var requester of requesters) {
            requester.resolve(data);
        }
    }
    downloadFailed(error) {
        super.downloadFailed(error);
        var requesters = this.requesters;

        this.requesters = undefined;
        for (var requester of requesters) {
            requester.reject(error);
        }
    }
    freeSystemMemory() {
        this.data = undefined;
    }
}
class GenericFileSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["ChunkSourceBase"] {
    constructor(chunkManager, decodeFile) {
        super(chunkManager);
        this.decodeFile = decodeFile;
        this.registerDisposer(chunkManager);
        // This source is unusual in that it updates its own chunk priorities.
        this.registerDisposer(this.chunkManager.recomputeChunkPrioritiesLate.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        var chunkManager = this.chunkManager;

        for (var chunk of this.chunks.values()) {
            var requesters = chunk.requesters;

            if (requesters !== undefined) {
                for (var requester of requesters) {
                    var _requester$getPriorit = requester.getPriority(),
                        priorityTier = _requester$getPriorit.priorityTier,
                        priority = _requester$getPriorit.priority;

                    chunkManager.requestChunk(chunk, priorityTier, priority);
                }
            }
        }
    }
    download(chunk, cancellationToken) {
        return Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_http_request__["b" /* openHttpRequest */])(chunk.key), 'arraybuffer', cancellationToken).then(response => {
            chunk.data = this.decodeFile(response);
        });
    }
    /**
     * Precondition: priorityTier <= ChunkPriorityTier.LAST_ORDERED_TIER
     */
    getData(key, getPriority, cancellationToken) {
        var chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(GenericFileChunk);
            chunk.initialize(key);
            this.addChunk(chunk);
        }
        return Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_cancellation__["c" /* makeCancelablePromise */])(cancellationToken, (resolve, reject, token) => {
            // If the data is already available or the request has already failed, resolve/reject the
            // promise immediately.
            switch (chunk.state) {
                case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["e" /* ChunkState */].FAILED:
                    reject(chunk.error);
                    return;
                case __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["e" /* ChunkState */].SYSTEM_MEMORY_WORKER:
                    resolve(chunk.data);
                    return;
            }
            var requester = { resolve, reject, getPriority };
            chunk.requesters.add(requester);
            token.add(() => {
                var _chunk = chunk,
                    requesters = _chunk.requesters;

                if (requesters !== undefined) {
                    requesters.delete(requester);
                    this.chunkManager.scheduleUpdateChunkPriorities();
                }
                reject(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_cancellation__["a" /* CANCELED */]);
            });
            this.chunkManager.scheduleUpdateChunkPriorities();
        });
    }
    /**
     * Reference count of chunkManager should be incremented by the caller.
     */
    static get(chunkManager, decodeFile) {
        return chunkManager.memoize.get(`getFileSource:${Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_object_id__["a" /* getObjectId */])(decodeFile)}`, () => new GenericFileSource(chunkManager, decodeFile));
    }
    /**
     * Reference count of chunkManager should be incremented by the caller.
     */
    static getData(chunkManager, decodeFile, key, getPriority, cancellationToken) {
        var source = GenericFileSource.get(chunkManager, decodeFile);
        var result = source.getData(key, getPriority, cancellationToken);
        source.dispose();
        return result;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GenericFileSource;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || {};



/*** Static Pseudo-constants ***/

nifti.Utils.crcTable = null;
nifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;
nifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;



/*** Static methods ***/

nifti.Utils.getStringAt = function (data, start, end) {
    var str = "", ctr, ch;

    for (ctr = start; ctr < end; ctr += 1) {
        ch = data.getUint8(ctr);

        if (ch !== 0) {
            str += String.fromCharCode(ch);
        }
    }

    return str;
};



nifti.Utils.getByteAt = function (data, start) {
    return data.getInt8(start);
};



nifti.Utils.getShortAt = function (data, start, littleEndian) {
    return data.getInt16(start, littleEndian);
};



nifti.Utils.getIntAt = function (data, start, littleEndian) {
    return data.getInt32(start, littleEndian);
};



nifti.Utils.getFloatAt = function (data, start, littleEndian) {
    return data.getFloat32(start, littleEndian);
};



nifti.Utils.getDoubleAt = function (data, start, littleEndian) {
    return data.getFloat64(start, littleEndian);
};



nifti.Utils.getLongAt = function (data, start, littleEndian) {
    var ctr, array = [], value = 0;

    for (ctr = 0; ctr < 8; ctr += 1) {
        array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);
    }

    for (ctr = array.length - 1; ctr >= 0; ctr--) {
        value = (value * 256) + array[ctr];
    }

    return value;
};



nifti.Utils.toArrayBuffer = function (buffer) {
    var ab, view, i;

    ab = new ArrayBuffer(buffer.length);
    view = new Uint8Array(ab);
    for (i = 0; i < buffer.length; i += 1) {
        view[i] = buffer[i];
    }
    return ab;
};



nifti.Utils.isString = function (obj) {
    return (typeof obj === "string" || obj instanceof String);
};


nifti.Utils.formatNumber = function (num, shortFormat) {
    var val = 0;

    if (nifti.Utils.isString(num)) {
        val = Number(num);
    } else {
        val = num;
    }

    if (shortFormat) {
        val = val.toPrecision(5);
    } else {
        val = val.toPrecision(7);
    }

    return parseFloat(val);
};



// http://stackoverflow.com/questions/18638900/javascript-crc32
nifti.Utils.makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
};



nifti.Utils.crc32 = function(dataView) {
    var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < dataView.byteLength; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.Utils;
}


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rpc", function() { return rpc; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var rpc = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_worker_rpc__["a" /* RPC */](self);

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RefCounted {
    constructor() {
        this.refCount = 1;
    }
    addRef() {
        ++this.refCount;
        return this;
    }
    dispose() {
        if (--this.refCount !== 0) {
            return;
        }
        this.refCountReachedZero();
    }
    refCountReachedZero() {
        this.disposed();
        var disposers = this.disposers;

        if (disposers != null) {
            var numDisposers = disposers.length;
            for (var i = numDisposers; i > 0; --i) {
                var disposer = disposers[i - 1];
                if (typeof disposer === 'object') {
                    disposer.dispose();
                } else {
                    disposer.call(this);
                }
            }
            this.disposers = undefined;
        }
        this.wasDisposed = true;
    }
    disposed() {}
    registerDisposer(f) {
        var disposers = this.disposers;

        if (disposers == null) {
            this.disposers = [f];
        } else {
            disposers.push(f);
        }
        return f;
    }
    unregisterDisposer(f) {
        var disposers = this.disposers;

        if (disposers != null) {
            var index = disposers.indexOf(f);
            if (index !== -1) {
                disposers.splice(index, 1);
            }
        }
        return f;
    }
    registerEventListener(target, eventType, listener, arg) {
        target.addEventListener(eventType, listener, arg);
        this.registerDisposer(() => target.removeEventListener(eventType, listener, arg));
    }
    registerCancellable(cancellable) {
        this.registerDisposer(() => {
            cancellable.cancel();
        });
        return cancellable;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RefCounted;

class RefCountedValue extends RefCounted {
    constructor(value) {
        super();
        this.value = value;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = RefCountedValue;


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__ = __webpack_require__(34);
/* unused harmony reexport glMatrix */
/* unused harmony reexport mat2 */
/* unused harmony reexport mat2d */
/* unused harmony reexport mat3 */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__; });
/* unused harmony reexport vec2 */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__; });
/* unused harmony reexport vec4 */
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.4.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER













/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = create;
/* unused harmony export fromMat4 */
/* unused harmony export clone */
/* unused harmony export copy */
/* unused harmony export fromValues */
/* unused harmony export set */
/* unused harmony export identity */
/* unused harmony export transpose */
/* unused harmony export invert */
/* unused harmony export adjoint */
/* unused harmony export determinant */
/* unused harmony export multiply */
/* unused harmony export translate */
/* unused harmony export rotate */
/* unused harmony export scale */
/* unused harmony export fromTranslation */
/* unused harmony export fromRotation */
/* unused harmony export fromScaling */
/* unused harmony export fromMat2d */
/* unused harmony export fromQuat */
/* unused harmony export normalFromMat4 */
/* unused harmony export projection */
/* unused harmony export str */
/* unused harmony export frob */
/* unused harmony export add */
/* unused harmony export subtract */
/* unused harmony export multiplyScalar */
/* unused harmony export multiplyScalarAndAdd */
/* unused harmony export exactEquals */
/* unused harmony export equals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](9);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    let a01 = a[1], a02 = a[2], a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function invert(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  let b01 = a22 * a11 - a12 * a21;
  let b11 = -a22 * a10 + a12 * a20;
  let b21 = a21 * a10 - a11 * a20;

  // Calculate the determinant
  let det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function adjoint(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  out[0] = (a11 * a22 - a12 * a21);
  out[1] = (a02 * a21 - a01 * a22);
  out[2] = (a01 * a12 - a02 * a11);
  out[3] = (a12 * a20 - a10 * a22);
  out[4] = (a00 * a22 - a02 * a20);
  out[5] = (a02 * a10 - a00 * a12);
  out[6] = (a10 * a21 - a11 * a20);
  out[7] = (a01 * a20 - a00 * a21);
  out[8] = (a00 * a11 - a01 * a10);
  return out;
}

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function multiply(out, a, b) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  let b00 = b[0], b01 = b[1], b02 = b[2];
  let b10 = b[3], b11 = b[4], b12 = b[5];
  let b20 = b[6], b21 = b[7], b22 = b[8];

  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;

  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;

  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
function translate(out, a, v) {
  let a00 = a[0], a01 = a[1], a02 = a[2],
    a10 = a[3], a11 = a[4], a12 = a[5],
    a20 = a[6], a21 = a[7], a22 = a[8],
    x = v[0], y = v[1];

  out[0] = a00;
  out[1] = a01;
  out[2] = a02;

  out[3] = a10;
  out[4] = a11;
  out[5] = a12;

  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function rotate(out, a, rad) {
  let a00 = a[0], a01 = a[1], a02 = a[2],
    a10 = a[3], a11 = a[4], a12 = a[5],
    a20 = a[6], a21 = a[7], a22 = a[8],

    s = Math.sin(rad),
    c = Math.cos(rad);

  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;

  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;

  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
function scale(out, a, v) {
  let x = v[0], y = v[1];

  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];

  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];

  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad), c = Math.cos(rad);

  out[0] = c;
  out[1] = s;
  out[2] = 0;

  out[3] = -s;
  out[4] = c;
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;

  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;

  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;

  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
function fromQuat(out, q) {
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let yx = y * x2;
  let yy = y * y2;
  let zx = z * x2;
  let zy = z * y2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;

  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;

  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;

  return out;
}

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
function normalFromMat4(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

  return out;
}

/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */
function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
}

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
          a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
}

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}



/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  out[6] = a[6] + (b[6] * scale);
  out[7] = a[7] + (b[7] * scale);
  out[8] = a[8] + (b[8] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
}

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link mat3.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */



/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["cross"] = cross;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["hermite"] = hermite;
/* harmony export (immutable) */ __webpack_exports__["bezier"] = bezier;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["transformMat3"] = transformMat3;
/* harmony export (immutable) */ __webpack_exports__["transformQuat"] = transformQuat;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["angle"] = angle;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](3);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
function clone(a) {
  var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  return Math.sqrt(x*x + y*y + z*z);
}

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  return out;
}

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  return Math.sqrt(x*x + y*y + z*z);
}

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  return x*x + y*y + z*z;
}

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  return x*x + y*y + z*z;
}

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let len = x*x + y*y + z*z;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  let ax = a[0], ay = a[1], az = a[2];
  let bx = b[0], by = b[1], bz = b[2];

  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
  let ax = a[0];
  let ay = a[1];
  let az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function hermite(out, a, b, c, d, t) {
  let factorTimes2 = t * t;
  let factor1 = factorTimes2 * (2 * t - 3) + 1;
  let factor2 = factorTimes2 * (t - 2) + t;
  let factor3 = factorTimes2 * (t - 1);
  let factor4 = factorTimes2 * (3 - 2 * t);

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function bezier(out, a, b, c, d, t) {
  let inverseFactor = 1 - t;
  let inverseFactorTimesTwo = inverseFactor * inverseFactor;
  let factorTimes2 = t * t;
  let factor1 = inverseFactorTimesTwo * inverseFactor;
  let factor2 = 3 * t * inverseFactorTimesTwo;
  let factor3 = 3 * factorTimes2 * inverseFactor;
  let factor4 = factorTimes2 * t;

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
function random(out, scale) {
  scale = scale || 1.0;

  let r = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]() * 2.0 * Math.PI;
  let z = (__WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]() * 2.0) - 1.0;
  let zScale = Math.sqrt(1.0-z*z) * scale;

  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
  let x = a[0], y = a[1], z = a[2];
  let w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
function transformMat3(out, a, m) {
  let x = a[0], y = a[1], z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
function transformQuat(out, a, q) {
  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

  let x = a[0], y = a[1], z = a[2];
  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];

  // calculate quat * vec
  let ix = qw * x + qy * z - qz * y;
  let iy = qw * y + qz * x - qx * z;
  let iz = qw * z + qx * y - qy * x;
  let iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  return out;
}

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateX(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0];
  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateY(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  r[1] = p[1];
  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateZ(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  r[2] = p[2];

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
  let tempA = fromValues(a[0], a[1], a[2]);
  let tempB = fromValues(b[0], b[1], b[2]);

  normalize(tempA, tempA);
  normalize(tempB, tempB);

  let cosine = dot(tempA, tempB);

  if(cosine > 1.0) {
    return 0;
  }
  else if(cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2];
  let b0 = b[0], b1 = b[1], b2 = b[2];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
}

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec3.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec3.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec3.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec3.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 3;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export create */
/* harmony export (immutable) */ __webpack_exports__["b"] = clone;
/* harmony export (immutable) */ __webpack_exports__["g"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["c"] = copy;
/* harmony export (immutable) */ __webpack_exports__["l"] = set;
/* harmony export (immutable) */ __webpack_exports__["a"] = add;
/* unused harmony export subtract */
/* unused harmony export multiply */
/* unused harmony export divide */
/* unused harmony export ceil */
/* unused harmony export floor */
/* unused harmony export min */
/* unused harmony export max */
/* unused harmony export round */
/* harmony export (immutable) */ __webpack_exports__["k"] = scale;
/* unused harmony export scaleAndAdd */
/* unused harmony export distance */
/* unused harmony export squaredDistance */
/* harmony export (immutable) */ __webpack_exports__["h"] = length;
/* harmony export (immutable) */ __webpack_exports__["m"] = squaredLength;
/* unused harmony export negate */
/* unused harmony export inverse */
/* harmony export (immutable) */ __webpack_exports__["j"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["d"] = dot;
/* harmony export (immutable) */ __webpack_exports__["i"] = lerp;
/* unused harmony export random */
/* unused harmony export transformMat4 */
/* unused harmony export transformQuat */
/* unused harmony export str */
/* harmony export (immutable) */ __webpack_exports__["f"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["e"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
function fromValues(x, y, z, w) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  return out;
}

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  let w = b[3] - a[3];
  return Math.sqrt(x*x + y*y + z*z + w*w);
}

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  let w = b[3] - a[3];
  return x*x + y*y + z*z + w*w;
}

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  return Math.sqrt(x*x + y*y + z*z + w*w);
}

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  return x*x + y*y + z*z + w*w;
}

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize(out, a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  let len = x*x + y*y + z*z + w*w;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp(out, a, b, t) {
  let ax = a[0];
  let ay = a[1];
  let az = a[2];
  let aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
function random(out, vectorScale) {
  vectorScale = vectorScale || 1.0;

  //TODO: This is a pretty awful way of doing this. Find something better.
  out[0] = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]();
  out[1] = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]();
  out[2] = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]();
  out[3] = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]();
  normalize(out, out);
  scale(out, out, vectorScale);
  return out;
}

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4(out, a, m) {
  let x = a[0], y = a[1], z = a[2], w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
function transformQuat(out, a, q) {
  let x = a[0], y = a[1], z = a[2];
  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];

  // calculate quat * vec
  let ix = qw * x + qy * z - qz * y;
  let iy = qw * y + qz * x - qx * z;
  let iz = qw * z + qx * y - qy * x;
  let iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */


/**
 * Alias for {@link vec4.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link vec4.divide}
 * @function
 */
const div = divide;
/* unused harmony export div */


/**
 * Alias for {@link vec4.distance}
 * @function
 */
const dist = distance;
/* unused harmony export dist */


/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* unused harmony export sqrDist */


/**
 * Alias for {@link vec4.length}
 * @function
 */
const len = length;
/* unused harmony export len */


/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* unused harmony export sqrLen */


/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 4;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
    }

    return a;
  };
})();
/* unused harmony export forEach */



/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return implementation; });
/* harmony export (immutable) */ __webpack_exports__["a"] = getToken;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Implementation {}
/* unused harmony export Implementation */

var implementation = new Implementation();
var promise = null;
var token = null;
function getToken(invalidToken) {
    if (promise !== null && (token === null || invalidToken == null || invalidToken['generationId'] !== token['generationId'])) {
        // Either we already have a valid token, or we are already obtaining one.
        return promise;
    }
    token = null;
    promise = implementation.getNewTokenPromise(invalidToken);
    promise.then(t => {
        token = t;
    });
    return promise;
}

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export numPendingRequests */
/* unused harmony export PRODUCTION_INSTANCE */
/* unused harmony export INSTANCE_NAMES */
/* unused harmony export INSTANCE_BASE_URLS */
/* unused harmony export INSTANCE_IDENTIFIERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = brainmapsInstanceKey;
/* unused harmony export setupBrainmapsInstance */
/* harmony export (immutable) */ __webpack_exports__["b"] = makeRequest;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_implementation__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_cancellation__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_http_request__ = __webpack_require__(8);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var numPendingRequests = 0;
var PRODUCTION_INSTANCE = 0;
var INSTANCE_NAMES = [];
/**
 * Maps a BrainmapsInstance to the list of base URL shards to use for accessing it.
 */
var INSTANCE_BASE_URLS = [];
var instanceHostname = [];
var INSTANCE_IDENTIFIERS = [];
function brainmapsInstanceKey(instance) {
    return INSTANCE_IDENTIFIERS[instance];
}
function setupBrainmapsInstance(instance, hostname, identifier, name) {
    INSTANCE_IDENTIFIERS[instance] = identifier;
    INSTANCE_NAMES[instance] = name;
    instanceHostname[instance] = hostname;
    var baseUrls = [`https://${hostname}`];
    INSTANCE_BASE_URLS[instance] = baseUrls;
}
setupBrainmapsInstance(PRODUCTION_INSTANCE, 'brainmaps.googleapis.com', 'prod', 'Brain Maps');
function makeRequest(instance, httpCall) {
    var cancellationToken = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_cancellation__["d" /* uncancelableToken */];

    /**
     * undefined means request not yet attempted.  null means request
     * cancelled.
     */
    var xhr = undefined;
    return new Promise((resolve, reject) => {
        var abort = () => {
            var origXhr = xhr;
            xhr = null;
            if (origXhr != null) {
                origXhr.abort();
            }
            reject(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_cancellation__["a" /* CANCELED */]);
        };
        cancellationToken.add(abort);
        function start(token) {
            if (xhr === null) {
                --numPendingRequests;
                return;
            }
            xhr = Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(INSTANCE_BASE_URLS[instance], httpCall.path, httpCall.method);
            xhr.responseType = httpCall.responseType;
            xhr.setRequestHeader('Authorization', `${token['tokenType']} ${token['accessToken']}`);
            xhr.onloadend = function () {
                if (xhr === null) {
                    --numPendingRequests;
                    return;
                }
                var status = this.status;
                if (status >= 200 && status < 300) {
                    --numPendingRequests;
                    cancellationToken.remove(abort);
                    resolve(this.response);
                } else if (status === 401) {
                    // Authorization needed.
                    Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_implementation__["a" /* getToken */])(token).then(start);
                } else if (status === 504) {
                    // Gateway timeout can occur if the server takes too long to reply.  Retry.
                    Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_implementation__["a" /* getToken */])().then(start);
                } else {
                    --numPendingRequests;
                    cancellationToken.remove(abort);
                    reject(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_http_request__["a" /* HttpError */].fromXhr(this));
                }
            };
            xhr.send(httpCall.payload);
        }
        Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_implementation__["a" /* getToken */])().then(start);
    });
}

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_shared_disjoint_sets__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_uint64_set__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_visibility_priority_backend__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Import to register the shared object types.





var Base = Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_visibility_priority_backend__["c" /* withSharedVisibility */])(Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_chunk_manager_backend__["withChunkManager"])(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */]));
class SegmentationLayerSharedObjectCounterpart extends Base {
    constructor(rpc, options) {
        super(rpc, options);
        // No need to increase the reference count of visibleSegments or
        // segmentEquivalences since our owner will hold a reference to their owners.
        this.visibleSegments = rpc.get(options['visibleSegments']);
        this.clipBounds = rpc.get(options['clipBounds']);
        this.segmentEquivalences = rpc.get(options['segmentEquivalences']);
        var scheduleUpdateChunkPriorities = () => {
            this.chunkManager.scheduleUpdateChunkPriorities();
        };
        this.registerDisposer(this.visibleSegments.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.segmentEquivalences.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.clipBounds.changed.add(scheduleUpdateChunkPriorities));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SegmentationLayerSharedObjectCounterpart;


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SkeletonLayer */
/* harmony export (immutable) */ __webpack_exports__["b"] = decodeSkeletonVertexPositionsAndIndices;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_mesh_backend__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_segmentation_display_state_backend__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_segmentation_display_state_base__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_skeleton_base__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_uint64__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_visibility_priority_backend__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};








var SKELETON_CHUNK_PRIORITY = 60;
// Chunk that contains the skeleton of a single object.
class SkeletonChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["Chunk"] {
    constructor() {
        super();
        this.objectId = new __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_uint64__["a" /* Uint64 */]();
        this.vertexPositions = null;
        this.vertexAttributes = null;
        this.indices = null;
    }
    initializeSkeletonChunk(key, objectId) {
        super.initialize(key);
        this.objectId.assign(objectId);
    }
    freeSystemMemory() {
        this.vertexPositions = this.indices = null;
    }
    getVertexAttributeBytes() {
        var total = this.vertexPositions.byteLength;
        var vertexAttributes = this.vertexAttributes;

        if (vertexAttributes != null) {
            vertexAttributes.forEach(a => {
                total += a.byteLength;
            });
        }
        return total;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        var vertexPositions = this.vertexPositions;
        var indices = this.indices;
        msg['indices'] = indices;
        transfers.push(indices.buffer);
        var vertexAttributes = this.vertexAttributes;

        if (vertexAttributes != null && vertexAttributes.length > 0) {
            var vertexData = new Uint8Array(this.getVertexAttributeBytes());
            vertexData.set(new Uint8Array(vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength));
            var vertexAttributeOffsets = msg['vertexAttributeOffsets'] = new Uint32Array(vertexAttributes.length + 1);
            vertexAttributeOffsets[0] = 0;
            var offset = vertexPositions.byteLength;
            vertexAttributes.forEach((a, i) => {
                vertexAttributeOffsets[i + 1] = offset;
                vertexData.set(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), offset);
                offset += a.byteLength;
            });
            transfers.push(vertexData.buffer);
            msg['vertexAttributes'] = vertexData;
        } else {
            msg['vertexAttributes'] = new Uint8Array(vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength);
            msg['vertexAttributeOffsets'] = Uint32Array.of(0);
            if (vertexPositions.buffer !== transfers[0]) {
                transfers.push(vertexPositions.buffer);
            }
        }
        this.vertexPositions = this.indices = this.vertexAttributes = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = this.indices.byteLength + this.getVertexAttributeBytes();
        super.downloadSucceeded();
    }
}
/* unused harmony export SkeletonChunk */

class SkeletonSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["ChunkSource"] {
    getChunk(objectId) {
        var key = Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_segmentation_display_state_base__["b" /* getObjectKey */])(objectId);
        var chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(SkeletonChunk);
            chunk.initializeSkeletonChunk(key, objectId);
            this.addChunk(chunk);
        }
        return chunk;
    }
}
/* unused harmony export SkeletonSource */

class ParameterizedSkeletonSource extends SkeletonSource {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ParameterizedSkeletonSource;

var SkeletonLayer = class SkeletonLayer extends __WEBPACK_IMPORTED_MODULE_2_neuroglancer_segmentation_display_state_backend__["a" /* SegmentationLayerSharedObjectCounterpart */] {
    constructor(rpc, options) {
        super(rpc, options);
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        var visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        var priorityTier = Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_visibility_priority_backend__["b" /* getPriorityTier */])(visibility);
        var basePriority = Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_visibility_priority_backend__["a" /* getBasePriority */])(visibility);
        var source = this.source,
            chunkManager = this.chunkManager;

        Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_segmentation_display_state_base__["a" /* forEachVisibleSegment */])(this, objectId => {
            var chunk = source.getChunk(objectId);
            chunkManager.requestChunk(chunk, priorityTier, basePriority + SKELETON_CHUNK_PRIORITY);
        });
    }
};
SkeletonLayer = __decorate([Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_skeleton_base__["a" /* SKELETON_LAYER_RPC_ID */])], SkeletonLayer);

/**
 * Extracts vertex positions and edge vertex indices of the specified endianness from `data'.
 *
 * See documentation of decodeVertexPositionsAndIndices.
 */
function decodeSkeletonVertexPositionsAndIndices(chunk, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numEdges) {
    Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_mesh_backend__["e" /* decodeVertexPositionsAndIndices */])(chunk, /*verticesPerPrimitive=*/2, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numEdges);
}

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return VolumeType; });
/* unused harmony export DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 */
/* unused harmony export VOLUME_RPC_ID */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return VOLUME_RENDERLAYER_RPC_ID; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__ = __webpack_require__(1);
/* unused harmony reexport DATA_TYPE_BYTES */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b"]; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Specifies the interpretation of volumetric data.
 */
var VolumeType;
(function (VolumeType) {
    VolumeType[VolumeType["UNKNOWN"] = 0] = "UNKNOWN";
    VolumeType[VolumeType["IMAGE"] = 1] = "IMAGE";
    VolumeType[VolumeType["SEGMENTATION"] = 2] = "SEGMENTATION";
})(VolumeType || (VolumeType = {}));
/**
 * By default, choose a chunk size with at most 2^18 = 262144 voxels.
 */
var DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;
/**
 * Specifies a chunk layout and voxel size.
 */
class VolumeChunkSpecification extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["d" /* SliceViewChunkSpecification */] {
    constructor(options) {
        super(options);
        var dataType = this.dataType = options.dataType;
        var numChannels = this.numChannels = options.numChannels;
        this.chunkBytes = Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["h" /* prod3 */])(options.chunkDataSize) * __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["a" /* DATA_TYPE_BYTES */][dataType] * numChannels;
        this.compressedSegmentationBlockSize = options.compressedSegmentationBlockSize;
    }
    static make(options) {
        return new VolumeChunkSpecification(Object.assign({}, options, { transform: Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["f" /* getCombinedTransform */])(options.transform, options.volumeSourceOptions) }));
    }
    static fromObject(msg) {
        return new VolumeChunkSpecification(msg);
    }
    toObject() {
        return {
            transform: this.chunkLayout.transform,
            numChannels: this.numChannels,
            chunkDataSize: this.chunkDataSize,
            voxelSize: this.voxelSize,
            dataType: this.dataType,
            lowerVoxelBound: this.lowerVoxelBound,
            upperVoxelBound: this.upperVoxelBound,
            lowerClipBound: this.lowerClipBound,
            upperClipBound: this.upperClipBound,
            baseVoxelOffset: this.baseVoxelOffset,
            compressedSegmentationBlockSize: this.compressedSegmentationBlockSize
        };
    }
    /**
     * Returns a VolumeChunkSpecification with default compression specified if suitable for the
     * volumeType.
     */
    static withDefaultCompression(options) {
        var compressedSegmentationBlockSize = options.compressedSegmentationBlockSize,
            dataType = options.dataType,
            voxelSize = options.voxelSize,
            transform = options.transform,
            lowerVoxelBound = options.lowerVoxelBound,
            upperVoxelBound = options.upperVoxelBound;

        transform = Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["f" /* getCombinedTransform */])(transform, options.volumeSourceOptions);
        if (compressedSegmentationBlockSize === undefined && options.volumeType === VolumeType.SEGMENTATION && (dataType === __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].UINT32 || dataType === __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_data_type__["b" /* DataType */].UINT64)) {
            compressedSegmentationBlockSize = Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["g" /* getNearIsotropicBlockSize */])({ voxelSize, transform, lowerVoxelBound, upperVoxelBound, maxVoxelsPerChunkLog2: 9 });
        }
        return new VolumeChunkSpecification(Object.assign({}, options, { compressedSegmentationBlockSize, transform }));
    }
    static getDefaults(options) {
        var adjustedOptions = Object.assign({}, options, { transform: Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["f" /* getCombinedTransform */])(options.transform, options.volumeSourceOptions) });
        var _options$chunkDataSiz = options.chunkDataSizes,
            chunkDataSizes = _options$chunkDataSiz === undefined ? Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["e" /* getChunkDataSizes */])(adjustedOptions) : _options$chunkDataSiz;

        return chunkDataSizes.map(chunkDataSize => VolumeChunkSpecification.withDefaultCompression(Object.assign({}, options, { chunkDataSize })));
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = VolumeChunkSpecification;

var VOLUME_RPC_ID = 'volume';
var VOLUME_RENDERLAYER_RPC_ID = 'volume/RenderLayer';

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_ndstore_base__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_backend_chunk_decoders_jpeg__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_ndstoreNpz__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_raw__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_http_request__ = __webpack_require__(8);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var chunkDecoders = new Map();
chunkDecoders.set('npz', __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_ndstoreNpz__["a" /* decodeNdstoreNpzChunk */]);
chunkDecoders.set('jpeg', __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */]);
chunkDecoders.set('raw', __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_raw__["a" /* decodeRawChunk */]);
var VolumeChunkSource = class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
    }
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var path = `${parameters.urlPrefix}/${parameters.key}/${parameters.channel}/` + `${parameters.encoding}/${parameters.resolution}`;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            var chunkPosition = this.computeChunkBounds(chunk);
            var chunkDataSize = chunk.chunkDataSize;
            for (var i = 0; i < 3; ++i) {
                path += `/${chunkPosition[i]},${chunkPosition[i] + chunkDataSize[i]}`;
            }
        }
        if (parameters.neariso) {
            path += `/neariso/`;
        }
        return Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path), 'arraybuffer', cancellationToken).then(response => this.chunkDecoder(chunk, response));
    }
};
VolumeChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_ndstore_base__["a" /* VolumeChunkSourceParameters */])], VolumeChunkSource);


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = decodeNdstoreNpzChunk;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend_chunk_decoders_postprocess__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_base__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_npy__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_pako__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_pako___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_pako__);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This decodes the NDStore (https://github.com/neurodata/ndstore) NPZ format, which is the Python
 * NPY binary format with zlib encoding.
 *
 * This is NOT the same as the Python NPZ format, which is a ZIP file containing multiple files
 * (each corresponding to a different variable) in NPY binary format.
 */





function decodeNdstoreNpzChunk(chunk, response) {
    var parseResult = Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_npy__["a" /* parseNpy */])(Object(__WEBPACK_IMPORTED_MODULE_4_pako__["inflate"])(new Uint8Array(response)));
    var chunkDataSize = chunk.chunkDataSize;
    var source = chunk.source;
    var numChannels = source.spec.numChannels;
    var shape = parseResult.shape;

    if (shape.length !== 4 || shape[0] !== numChannels || shape[1] !== chunkDataSize[2] || shape[2] !== chunkDataSize[1] || shape[3] !== chunkDataSize[0]) {
        throw new Error(`Shape ${JSON.stringify(shape)} does not match chunkDataSize ${Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["m" /* vec3Key */])(chunkDataSize)}`);
    }
    var parsedDataType = parseResult.dataType.dataType;
    var spec = source.spec;

    if (parsedDataType !== spec.dataType) {
        throw new Error(`Data type ${__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_base__["a" /* DataType */][parsedDataType]} does not match ` + `expected data type ${__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_base__["a" /* DataType */][spec.dataType]}`);
    }
    Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend_chunk_decoders_postprocess__["a" /* postProcessRawData */])(chunk, parseResult.data);
}

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(4);


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(28) : null);



/*** Constructor ***/

/**
 * The NIFTI1 constructor.
 * @constructor
 * @property {boolean} littleEndian
 * @property {number} dim_info
 * @property {number[]} dims - image dimensions
 * @property {number} intent_p1
 * @property {number} intent_p2
 * @property {number} intent_p3
 * @property {number} intent_code
 * @property {number} datatypeCode
 * @property {number} numBitsPerVoxel
 * @property {number} slice_start
 * @property {number} slice_end
 * @property {number} slice_code
 * @property {number[]} pixDims - voxel dimensions
 * @property {number} vox_offset
 * @property {number} scl_slope
 * @property {number} scl_inter
 * @property {number} xyzt_units
 * @property {number} cal_max
 * @property {number} cal_min
 * @property {number} slice_duration
 * @property {number} toffset
 * @property {string} description
 * @property {string} aux_file
 * @property {string} intent_name
 * @property {number} qform_code
 * @property {number} sform_code
 * @property {number} quatern_b
 * @property {number} quatern_c
 * @property {number} quatern_d
 * @property {number} quatern_x
 * @property {number} quatern_y
 * @property {number} quatern_z
 * @property {Array.<Array.<number>>} affine
 * @property {string} magic
 * @property {boolean} isHDR - if hdr/img format
 * @property {number[]} extensionFlag
 * @property {number} extensionSize
 * @property {number} extensionCode
 * @type {Function}
 */
nifti.NIFTI1 = nifti.NIFTI1 || function () {
    this.littleEndian = false;
    this.dim_info = 0;
    this.dims = [];
    this.intent_p1 = 0;
    this.intent_p2 = 0;
    this.intent_p3 = 0;
    this.intent_code = 0;
    this.datatypeCode = 0;
    this.numBitsPerVoxel = 0;
    this.slice_start = 0;
    this.slice_end = 0;
    this.slice_code = 0;
    this.pixDims = [];
    this.vox_offset = 0;
    this.scl_slope = 1;
    this.scl_inter = 0;
    this.xyzt_units = 0;
    this.cal_max = 0;
    this.cal_min = 0;
    this.slice_duration = 0;
    this.toffset = 0;
    this.description = "";
    this.aux_file = "";
    this.intent_name = "";
    this.qform_code = 0;
    this.sform_code = 0;
    this.quatern_b = 0;
    this.quatern_c = 0;
    this.quatern_d = 0;
    this.qoffset_x = 0;
    this.qoffset_y = 0;
    this.qoffset_z = 0;
    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    this.magic = 0;
    this.isHDR = false;
    this.extensionFlag = [0, 0, 0, 0];
    this.extensionSize = 0;
    this.extensionCode = 0;
};



/*** Static Pseudo-constants ***/

// datatype codes
nifti.NIFTI1.TYPE_NONE            = 0;
nifti.NIFTI1.TYPE_BINARY          = 1;
nifti.NIFTI1.TYPE_UINT8           = 2;
nifti.NIFTI1.TYPE_INT16           = 4;
nifti.NIFTI1.TYPE_INT32           = 8;
nifti.NIFTI1.TYPE_FLOAT32        = 16;
nifti.NIFTI1.TYPE_COMPLEX64      = 32;
nifti.NIFTI1.TYPE_FLOAT64        = 64;
nifti.NIFTI1.TYPE_RGB24         = 128;
nifti.NIFTI1.TYPE_INT8          = 256;
nifti.NIFTI1.TYPE_UINT16        = 512;
nifti.NIFTI1.TYPE_UINT32        = 768;
nifti.NIFTI1.TYPE_INT64        = 1024;
nifti.NIFTI1.TYPE_UINT64       = 1280;
nifti.NIFTI1.TYPE_FLOAT128     = 1536;
nifti.NIFTI1.TYPE_COMPLEX128   = 1792;
nifti.NIFTI1.TYPE_COMPLEX256   = 2048;

// transform codes
nifti.NIFTI1.XFORM_UNKNOWN        = 0;
nifti.NIFTI1.XFORM_SCANNER_ANAT   = 1;
nifti.NIFTI1.XFORM_ALIGNED_ANAT   = 2;
nifti.NIFTI1.XFORM_TALAIRACH      = 3;
nifti.NIFTI1.XFORM_MNI_152        = 4;

// unit codes
nifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;
nifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;
nifti.NIFTI1.UNITS_UNKNOWN        = 0;
nifti.NIFTI1.UNITS_METER          = 1;
nifti.NIFTI1.UNITS_MM             = 2;
nifti.NIFTI1.UNITS_MICRON         = 3;
nifti.NIFTI1.UNITS_SEC            = 8;
nifti.NIFTI1.UNITS_MSEC          = 16;
nifti.NIFTI1.UNITS_USEC          = 24;
nifti.NIFTI1.UNITS_HZ            = 32;
nifti.NIFTI1.UNITS_PPM           = 40;
nifti.NIFTI1.UNITS_RADS          = 48;

// nifti1 codes
nifti.NIFTI1.MAGIC_COOKIE = 348;
nifti.NIFTI1.STANDARD_HEADER_SIZE = 348;
nifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;
nifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31];  // n+1 (.nii)
nifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31];  // ni1 (.hdr/.img)
nifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;


/*** Prototype Methods ***/

/**
 * Reads the header data.
 * @param {ArrayBuffer} data
 */
nifti.NIFTI1.prototype.readHeader = function (data) {
    var rawData = new DataView(data),
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
        ctr,
        ctrOut,
        ctrIn,
        index;

    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {  // try as little endian
        this.littleEndian = true;
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
    }

    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {
        throw new Error("This does not appear to be a NIFTI file!");
    }

    this.dim_info = nifti.Utils.getByteAt(rawData, 39);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 40 + (ctr * 2);
        this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);
    }

    this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);
    this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);
    this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);
    this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);

    this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);
    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);

    this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 76 + (ctr * 4);
        this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
    }

    this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);

    this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);
    this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);

    this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);
    this.slice_code = nifti.Utils.getByteAt(rawData, 122);

    this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);

    this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);
    this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);

    this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);
    this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);

    this.description = nifti.Utils.getStringAt(rawData, 148, 228);
    this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);

    this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);
    this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);

    this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);
    this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);
    this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);
    this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);
    this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);
    this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);

    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
            index = 280 + (((ctrOut * 4) + ctrIn) * 4);
            this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
        }
    }

    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;

    this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);
    this.magic = nifti.Utils.getStringAt(rawData, 344, 348);

    this.isHDR = (this.magic === nifti.NIFTI1.MAGIC_NUMBER2);

    if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {
        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);
        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);
        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);
        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);

        if (this.extensionFlag[0]) {
            this.extensionSize = this.getExtensionSize(rawData);
            this.extensionCode = this.getExtensionCode(rawData);
        }
    }
};


/**
 * Returns a formatted string of header fields.
 * @returns {string}
 */
nifti.NIFTI1.prototype.toFormattedString = function () {
    var fmt = nifti.Utils.formatNumber,
        string = "";

    string += ("Dim Info = " + this.dim_info + "\n");

    string += ("Image Dimensions (1-8): " +
        this.dims[0] + ", " +
        this.dims[1] + ", " +
        this.dims[2] + ", " +
        this.dims[3] + ", " +
        this.dims[4] + ", " +
        this.dims[5] + ", " +
        this.dims[6] + ", " +
        this.dims[7] + "\n");

    string += ("Intent Parameters (1-3): " +
        this.intent_p1 + ", " +
        this.intent_p2 + ", " +
        this.intent_p3) + "\n";

    string += ("Intent Code = " + this.intent_code + "\n");
    string += ("Datatype = " + this.datatypeCode +  " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n");
    string += ("Bits Per Voxel = " + this.numBitsPerVoxel + "\n");
    string += ("Slice Start = " + this.slice_start + "\n");
    string += ("Voxel Dimensions (1-8): " +
        fmt(this.pixDims[0]) + ", " +
        fmt(this.pixDims[1]) + ", " +
        fmt(this.pixDims[2]) + ", " +
        fmt(this.pixDims[3]) + ", " +
        fmt(this.pixDims[4]) + ", " +
        fmt(this.pixDims[5]) + ", " +
        fmt(this.pixDims[6]) + ", " +
        fmt(this.pixDims[7]) + "\n");

    string += ("Image Offset = " + this.vox_offset + "\n");
    string += ("Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n");
    string += ("Slice End = " + this.slice_end + "\n");
    string += ("Slice Code = " + this.slice_code + "\n");
    string += ("Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n");
    string += ("Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n");
    string += ("Slice Duration = " + this.slice_duration + "\n");
    string += ("Time Axis Shift = " + this.toffset + "\n");
    string += ("Description: \"" + this.description + "\"\n");
    string += ("Auxiliary File: \"" + this.aux_file + "\"\n");
    string += ("Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n");
    string += ("S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n");
    string += ("Quaternion Parameters:  " +
        "b = " + fmt(this.quatern_b) + "  " +
        "c = " + fmt(this.quatern_c) + "  " +
        "d = " + fmt(this.quatern_d) + "\n");

    string += ("Quaternion Offsets:  " +
        "x = " + this.qoffset_x + "  " +
        "y = " + this.qoffset_y + "  " +
        "z = " + this.qoffset_z + "\n");

    string += ("S-Form Parameters X: " +
        fmt(this.affine[0][0]) + ", " +
        fmt(this.affine[0][1]) + ", " +
        fmt(this.affine[0][2]) + ", " +
        fmt(this.affine[0][3]) + "\n");

    string += ("S-Form Parameters Y: " +
        fmt(this.affine[1][0]) + ", " +
        fmt(this.affine[1][1]) + ", " +
        fmt(this.affine[1][2]) + ", " +
        fmt(this.affine[1][3]) + "\n");

    string += ("S-Form Parameters Z: " +
        fmt(this.affine[2][0]) + ", " +
        fmt(this.affine[2][1]) + ", " +
        fmt(this.affine[2][2]) + ", " +
        fmt(this.affine[2][3]) + "\n");

    string += ("Intent Name: \"" + this.intent_name + "\"\n");

    if (this.extensionFlag[0]) {
        string += ("Extension: Size = " + this.extensionSize + "  Code = " + this.extensionCode + "\n");

    }

    return string;
};


/**
 * Returns a human-readable string of datatype.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {
    if (code === nifti.NIFTI1.TYPE_UINT8) {
        return "1-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT16) {
        return "2-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT32) {
        return "4-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {
        return "4-Byte Float";
    } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {
        return "8-Byte Float";
    } else if (code === nifti.NIFTI1.TYPE_RGB24) {
        return "RGB";
    } else if (code === nifti.NIFTI1.TYPE_INT8) {
        return "1-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT16) {
        return "2-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT32) {
        return "4-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT64) {
        return "8-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT64) {
        return "8-Byte Unsigned Integer";
    } else {
        return "Unknown";
    }
};


/**
 * Returns a human-readable string of transform type.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getTransformCodeString = function (code) {
    if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {
        return "Scanner";
    } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {
        return "Aligned";
    } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {
        return "Talairach";
    } else if (code === nifti.NIFTI1.XFORM_MNI_152) {
        return "MNI";
    } else {
        return "Unknown";
    }
};


/**
 * Returns a human-readable string of spatial and temporal units.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getUnitsCodeString = function (code) {
    if (code === nifti.NIFTI1.UNITS_METER) {
        return "Meters";
    } else if (code === nifti.NIFTI1.UNITS_MM) {
        return "Millimeters";
    } else if (code === nifti.NIFTI1.UNITS_MICRON) {
        return "Microns";
    } else if (code === nifti.NIFTI1.UNITS_SEC) {
        return "Seconds";
    } else if (code === nifti.NIFTI1.UNITS_MSEC) {
        return "Milliseconds";
    } else if (code === nifti.NIFTI1.UNITS_USEC) {
        return "Microseconds";
    } else if (code === nifti.NIFTI1.UNITS_HZ) {
        return "Hz";
    } else if (code === nifti.NIFTI1.UNITS_PPM) {
        return "PPM";
    } else if (code === nifti.NIFTI1.UNITS_RADS) {
        return "Rads";
    } else {
        return "Unknown";
    }
};


/**
 * Returns the qform matrix.
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI1.prototype.getQformMat = function () {
    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x,
        this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);
};



/**
 * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {number} qb
 * @param {number} qc
 * @param {number} qd
 * @param {number} qx
 * @param {number} qy
 * @param {number} qz
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @param {number} qfac
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz,
                                                qfac) {
    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        a,
        b = qb,
        c = qc,
        d = qd,
        xd,
        yd,
        zd;

    // last row is always [ 0 0 0 1 ]
    R[3][0] = R[3][1] = R[3][2] = 0.0;
    R[3][3] = 1.0;

    // compute a parameter from b,c,d
    a = 1.0 - (b * b + c * c + d * d);
    if (a < 0.0000001) {                   /* special case */

        a = 1.0 / Math.sqrt(b * b + c * c + d * d);
        b *= a;
        c *= a;
        d *= a;        /* normalize (b,c,d) vector */
        a = 0.0;                        /* a = 0 ==> 180 degree rotation */
    } else {

        a = Math.sqrt(a);                     /* angle = 2*arccos(a) */
    }

    // load rotation matrix, including scaling factors for voxel sizes
    xd = (dx > 0.0) ? dx : 1.0;       /* make sure are positive */
    yd = (dy > 0.0) ? dy : 1.0;
    zd = (dz > 0.0) ? dz : 1.0;

    if (qfac < 0.0) {
        zd = -zd;         /* left handedness? */
    }

    R[0][0] =       (a * a + b * b - c * c - d * d) * xd;
    R[0][1] = 2.0 * (b * c - a * d) * yd;
    R[0][2] = 2.0 * (b * d + a * c) * zd;
    R[1][0] = 2.0 * (b * c + a * d) * xd;
    R[1][1] =       (a * a + c * c - b * b - d * d) * yd;
    R[1][2] = 2.0 * (c * d - a * b) * zd;
    R[2][0] = 2.0 * (b * d - a * c) * xd;
    R[2][1] = 2.0 * (c * d + a * b) * yd;
    R[2][2] =       (a * a + d * d - c * c - b * b) * zd;

    // load offsets
    R[0][3] = qx;
    R[1][3] = qy;
    R[2][3] = qz;

    return R;
};



/**
 * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {Array.<Array.<number>>} R
 * @returns {string}
 */
nifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {
    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest,
        M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;
    k = 0;

    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */

    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */

    /* load column vectors for each (i,j,k) direction from matrix */

    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/

    xi = R[0][0];
    xj = R[0][1];
    xk = R[0][2];

    yi = R[1][0];
    yj = R[1][1];
    yk = R[1][2];

    zi = R[2][0];
    zj = R[2][1];
    zk = R[2][2];

    /* normalize column vectors to get unit vectors along each ijk-axis */

    /* normalize i axis */
    val = Math.sqrt(xi * xi + yi * yi + zi * zi);
    if (val === 0.0) {  /* stupid input */
        return null;
    }

    xi /= val;
    yi /= val;
    zi /= val;

    /* normalize j axis */
    val = Math.sqrt(xj * xj + yj * yj + zj * zj);
    if (val === 0.0) {  /* stupid input */
        return null;
    }

    xj /= val;
    yj /= val;
    zj /= val;

    /* orthogonalize j axis to i axis, if needed */
    val = xi * xj + yi * yj + zi * zj;    /* dot product between i and j */
    if (Math.abs(val) > 1.E-4) {
        xj -= val * xi;
        yj -= val * yi;
        zj -= val * zi;
        val = Math.sqrt(xj * xj + yj * yj + zj * zj);  /* must renormalize */
        if (val === 0.0) {              /* j was parallel to i? */
            return null;
        }
        xj /= val;
        yj /= val;
        zj /= val;
    }

    /* normalize k axis; if it is zero, make it the cross product i x j */
    val = Math.sqrt(xk * xk + yk * yk + zk * zk);
    if (val === 0.0) {
        xk = yi * zj - zi * yj;
        yk = zi * xj - zj * xi;
        zk = xi * yj - yi * xj;
    } else {
        xk /= val;
        yk /= val;
        zk /= val;
    }

    /* orthogonalize k to i */
    val = xi * xk + yi * yk + zi * zk;    /* dot product between i and k */
    if (Math.abs(val) > 1.E-4) {
        xk -= val * xi;
        yk -= val * yi;
        zk -= val * zi;
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {    /* bad */
            return null;
        }
        xk /= val;
        yk /= val;
        zk /= val;
    }

    /* orthogonalize k to j */
    val = xj * xk + yj * yk + zj * zk;    /* dot product between j and k */
    if (Math.abs(val) > 1.e-4) {
        xk -= val * xj;
        yk -= val * yj;
        zk -= val * zj;
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {     /* bad */
            return null;
        }
        xk /= val;
        yk /= val;
        zk /= val;
    }

    Q[0][0] = xi;
    Q[0][1] = xj;
    Q[0][2] = xk;
    Q[1][0] = yi;
    Q[1][1] = yj;
    Q[1][2] = yk;
    Q[2][0] = zi;
    Q[2][1] = zj;
    Q[2][2] = zk;

    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */

    detQ = this.nifti_mat33_determ(Q);
    if (detQ === 0.0) { /* shouldn't happen unless user is a DUFIS */
        return null;
    }

    /* Build and test all possible +1/-1 coordinate permutation matrices P;
     then find the P such that the rotation matrix M=PQ is closest to the
     identity, in the sense of M having the smallest total rotation angle. */

    /* Despite the formidable looking 6 nested loops, there are
     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */

    vbest = -666.0;
    ibest = pbest = qbest = rbest = 1;
    jbest = 2;
    kbest = 3;

    for (i = 1; i <= 3; i += 1) {     /* i = column number to use for row #1 */
        for (j = 1; j <= 3; j += 1) {    /* j = column number to use for row #2 */
            if (i !== j) {
                for (k = 1; k <= 3; k += 1) {  /* k = column number to use for row #3 */
                    if (!(i === k || j === k)) {
                        P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;
                        for (p = -1; p <= 1; p += 2) {    /* p,q,r are -1 or +1      */
                            for (q = -1; q <= 1; q += 2) {   /* and go into rows #1,2,3 */
                                for (r = -1; r <= 1; r += 2) {
                                    P[0][i - 1] = p;
                                    P[1][j - 1] = q;
                                    P[2][k - 1] = r;
                                    detP = this.nifti_mat33_determ(P);           /* sign of permutation */
                                    if ((detP * detQ) > 0.0) {
                                        M = this.nifti_mat33_mul(P, Q);

                                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */
                                        /* we want largest trace(M) == smallest angle == M nearest to I */

                                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */
                                        if (val > vbest) {
                                            vbest = val;
                                            ibest = i;
                                            jbest = j;
                                            kbest = k;
                                            pbest = p;
                                            qbest = q;
                                            rbest = r;
                                        }
                                    }  /* doesn't match sign of Q */
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.

     The matrix P that corresponds is the best permutation approximation
     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates
     to the (i,j,k) axes.

     For example, the first row of P (which contains pbest in column ibest)
     determines the way the i axis points relative to the anatomical
     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,
     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).

     So, using ibest and pbest, we can assign the output code for
     the i axis.  Mutatis mutandis for the j and k axes, of course. */

    iChar = jChar = kChar = iSense = jSense = kSense = 0;

    switch (ibest * pbest) {
        case 1: /*i = NIFTI_L2R*/
            iChar = 'X';
            iSense = '+';
            break;
        case -1: /*i = NIFTI_R2L*/
            iChar = 'X';
            iSense = '-';
            break;
        case 2: /*i = NIFTI_P2A*/
            iChar = 'Y';
            iSense = '+';
            break;
        case -2: /*i = NIFTI_A2P*/
            iChar = 'Y';
            iSense = '-';
            break;
        case 3: /*i = NIFTI_I2S*/
            iChar = 'Z';
            iSense = '+';
            break;
        case -3: /*i = NIFTI_S2I*/
            iChar = 'Z';
            iSense = '-';
            break;
    }

    switch (jbest * qbest) {
        case 1: /*j = NIFTI_L2R*/
            jChar = 'X';
            jSense = '+';
            break;
        case -1: /*j = NIFTI_R2L*/
            jChar = 'X';
            jSense = '-';
            break;
        case 2: /*j = NIFTI_P2A*/
            jChar = 'Y';
            jSense = '+';
            break;
        case -2: /*j = NIFTI_A2P*/
            jChar = 'Y';
            jSense = '-';
            break;
        case 3: /*j = NIFTI_I2S*/
            jChar = 'Z';
            jSense = '+';
            break;
        case -3: /*j = NIFTI_S2I*/
            jChar = 'Z';
            jSense = '-';
            break;
    }

    switch (kbest * rbest) {
        case 1: /*k = NIFTI_L2R*/
            kChar = 'X';
            kSense = '+';
            break;
        case -1: /*k = NIFTI_R2L*/
            kChar = 'X';
            kSense = '-';
            break;
        case 2: /*k = NIFTI_P2A*/
            kChar = 'Y';
            kSense = '+';
            break;
        case -2: /*k = NIFTI_A2P*/
            kChar = 'Y';
            kSense = '-';
            break;
        case 3: /*k = NIFTI_I2S*/
            kChar = 'Z';
            kSense = '+';
            break;
        case -3: /*k = NIFTI_S2I*/
            kChar = 'Z';
            kSense = '-';
            break;
    }

    return (iChar + jChar + kChar + iSense + jSense + kSense);
};



nifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {
    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        i,
        j;

    for (i = 0; i < 3; i += 1) {
        for (j = 0; j < 3; j += 1) {
            C[i][j] =  A[i][0] * B[0][j]  + A[i][1] * B[1][j] + A[i][2] * B[2][j];
        }
    }

    return C;
};



nifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {
    var r11, r12, r13, r21, r22, r23, r31, r32, r33;
    /*  INPUT MATRIX:  */
    r11 = R[0][0];
    r12 = R[0][1];
    r13 = R[0][2];
    r21 = R[1][0];
    r22 = R[1][1];
    r23 = R[1][2];
    r31 = R[2][0];
    r32 = R[2][1];
    r33 = R[2][2];

    return (r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13);
};


/**
 * Returns the byte index of the extension.
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionLocation = function() {
    return nifti.NIFTI1.MAGIC_COOKIE + 4;
};


/**
 * Returns the extension size.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionSize = function(data) {
    return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);
};



/**
 * Returns the extension code.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionCode = function(data) {
    return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.NIFTI1;
}


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = registerSingleMeshFactory;
/* harmony export (immutable) */ __webpack_exports__["b"] = registerSingleMeshVertexAttributesFactory;
/* unused harmony export getMesh */
/* unused harmony export getMeshVertexAttributes */
/* unused harmony export getMinMax */
/* unused harmony export getCombinedMesh */
/* unused harmony export SingleMeshSource */
/* unused harmony export SingleMeshLayer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_single_mesh_base__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_json__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_visibility_priority_backend__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_worker_rpc__ = __webpack_require__(0);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var SINGLE_MESH_CHUNK_PRIORITY = 50;
/**
 * Chunk that contains the single mesh.
 */
class SingleMeshChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["Chunk"] {
    constructor() {
        super();
        this.data = null;
    }
    freeSystemMemory() {
        this.data = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        var _data = this.data,
            vertexPositions = _data.vertexPositions,
            indices = _data.indices,
            vertexNormals = _data.vertexNormals,
            vertexAttributes = _data.vertexAttributes;

        msg['vertexPositions'] = vertexPositions;
        msg['indices'] = indices;
        msg['vertexNormals'] = vertexNormals;
        msg['vertexAttributes'] = vertexAttributes;
        var transferSet = new Set();
        transferSet.add(vertexPositions.buffer);
        transferSet.add(indices.buffer);
        transferSet.add(vertexNormals.buffer);
        for (var data of vertexAttributes) {
            transferSet.add(data.buffer);
        }
        transfers.push(...transferSet);
        this.data = null;
    }
    downloadSucceeded() {
        var _data2 = this.data,
            vertexPositions = _data2.vertexPositions,
            indices = _data2.indices,
            vertexNormals = _data2.vertexNormals,
            vertexAttributes = _data2.vertexAttributes;

        var totalBytes = this.gpuMemoryBytes = vertexPositions.byteLength + indices.byteLength + vertexNormals.byteLength;
        for (var data of vertexAttributes) {
            totalBytes += data.byteLength;
        }
        this.systemMemoryBytes = this.gpuMemoryBytes = totalBytes;
        super.downloadSucceeded();
    }
}
/* unused harmony export SingleMeshChunk */

var singleMeshFactories = new Map();
var singleMeshVertexAttributesFactories = new Map();
function registerSingleMeshFactory(name, factory) {
    singleMeshFactories.set(name, factory);
}
function registerSingleMeshVertexAttributesFactory(name, factory) {
    singleMeshVertexAttributesFactories.set(name, factory);
}
var protocolPattern = /^(?:([a-zA-Z-+_]+):\/\/)?(.*)$/;
function getDataSource(factories, url) {
    var m = url.match(protocolPattern);
    if (m === null || m[1] === undefined) {
        throw new Error(`Data source URL must have the form "<protocol>://<path>".`);
    }
    var dataSource = m[1];
    var factory = factories.get(dataSource);
    if (factory === undefined) {
        throw new Error(`Unsupported data source: ${JSON.stringify(dataSource)}.`);
    }
    return [factory, m[2], dataSource];
}
function getMesh(chunkManager, url, getPriority, cancellationToken) {
    var _getDataSource = getDataSource(singleMeshFactories, url),
        _getDataSource2 = _slicedToArray(_getDataSource, 2),
        factory = _getDataSource2[0],
        path = _getDataSource2[1];

    return factory.getMesh(chunkManager, path, getPriority, cancellationToken);
}
function getMeshVertexAttributes(chunkManager, url, getPriority, cancellationToken) {
    var _getDataSource3 = getDataSource(singleMeshVertexAttributesFactories, url),
        _getDataSource4 = _slicedToArray(_getDataSource3, 2),
        factory = _getDataSource4[0],
        path = _getDataSource4[1];

    return factory.getMeshVertexAttributes(chunkManager, path, getPriority, cancellationToken);
}
function getMinMax(array) {
    var min = Number.POSITIVE_INFINITY;
    var max = Number.NEGATIVE_INFINITY;
    for (var value of array) {
        min = Math.min(min, value);
        max = Math.max(max, value);
    }
    return [min, max];
}
function getCombinedMesh(chunkManager, parameters, getPriority, cancellationToken) {
    var promises = [getMesh(chunkManager, parameters.meshSourceUrl, getPriority, cancellationToken)];
    for (var source of parameters.attributeSourceUrls) {
        promises.push(getMeshVertexAttributes(chunkManager, source, getPriority, cancellationToken));
    }
    return Promise.all(promises).then(results => {
        var origMesh = results[0];
        var combinedMesh = {
            info: {
                numVertices: origMesh.info.numVertices,
                numTriangles: origMesh.info.numTriangles,
                vertexAttributes: []
            },
            vertexPositions: origMesh.vertexPositions,
            indices: origMesh.indices,
            vertexNormals: origMesh.vertexNormals,
            vertexAttributes: []
        };
        function addAttribute(info, data, source) {
            var _getMinMax = getMinMax(data),
                _getMinMax2 = _slicedToArray(_getMinMax, 2),
                min = _getMinMax2[0],
                max = _getMinMax2[1];

            combinedMesh.info.vertexAttributes.push({
                name: info.name,
                source,
                numComponents: info.numComponents,
                dataType: info.dataType,
                min,
                max
            });
            combinedMesh.vertexAttributes.push(data);
        }
        function addAttributes(info, data, source) {
            var numAttributes = info.length;
            for (var i = 0; i < numAttributes; ++i) {
                addAttribute(info[i], data[i], source);
            }
        }
        addAttributes(origMesh.info.vertexAttributes, origMesh.vertexAttributes);
        parameters.attributeSourceUrls.forEach((source, i) => {
            var result = results[i + 1];
            if (result.numVertices !== origMesh.info.numVertices) {
                throw new Error(`Vertex attribute source ${JSON.stringify(source)} specifies attributes for ` + `${result.numVertices} vertices, but mesh has ${origMesh.info.numVertices} vertices.`);
            }
            addAttributes(result.attributeInfo, result.attributes, source);
        });
        return combinedMesh;
    });
}
var SingleMeshSource = class SingleMeshSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
        this.info = options['info'];
    }
    getChunk() {
        var key = __WEBPACK_IMPORTED_MODULE_3_neuroglancer_single_mesh_base__["b" /* SINGLE_MESH_CHUNK_KEY */];
        var chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(SingleMeshChunk);
            chunk.initialize(key);
            this.addChunk(chunk);
        }
        return chunk;
    }
    download(chunk, cancellationToken) {
        var getPriority = () => ({ priorityTier: chunk.priorityTier, priority: chunk.priority });
        return getCombinedMesh(this.chunkManager, this.parameters, getPriority, cancellationToken).then(data => {
            if (Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_json__["c" /* stableStringify */])(data.info) !== Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_json__["c" /* stableStringify */])(this.info)) {
                throw new Error(`Mesh info has changed.`);
            }
            if (data.vertexNormals === undefined) {
                data.vertexNormals = Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__["b" /* computeVertexNormals */])(data.vertexPositions, data.indices);
            }
            chunk.data = data;
        });
    }
};
SingleMeshSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_single_mesh_base__["d" /* SINGLE_MESH_SOURCE_RPC_ID */])], SingleMeshSource);

var SingleMeshLayerBase = Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_visibility_priority_backend__["c" /* withSharedVisibility */])(Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["withChunkManager"])(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */]));
var SingleMeshLayer = class SingleMeshLayer extends SingleMeshLayerBase {
    constructor(rpc, options) {
        super(rpc, options);
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        var visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        var priorityTier = Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_visibility_priority_backend__["b" /* getPriorityTier */])(visibility);
        var basePriority = Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_visibility_priority_backend__["a" /* getBasePriority */])(visibility);
        var source = this.source,
            chunkManager = this.chunkManager;

        var chunk = source.getChunk();
        chunkManager.requestChunk(chunk, priorityTier, basePriority + SINGLE_MESH_CHUNK_PRIORITY);
    }
};
SingleMeshLayer = __decorate([Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_single_mesh_base__["c" /* SINGLE_MESH_LAYER_RPC_ID */])], SingleMeshLayer);

var INFO_PRIORITY = 1000;
Object(__WEBPACK_IMPORTED_MODULE_6_neuroglancer_worker_rpc__["e" /* registerPromiseRPC */])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_single_mesh_base__["a" /* GET_SINGLE_MESH_INFO_RPC_ID */], function (x, cancellationToken) {
    var chunkManager = this.getRef(x['chunkManager']);
    try {
        var parameters = x['parameters'];
        return getCombinedMesh(chunkManager, parameters, () => ({ priorityTier: __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].VISIBLE, priority: INFO_PRIORITY }), cancellationToken).then(mesh => ({ value: mesh.info }));
    } finally {
        chunkManager.dispose();
    }
});

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export isGzipFormat */
/* harmony export (immutable) */ __webpack_exports__["a"] = maybeDecompressGzip;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_pako__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_pako___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_pako__);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Detects gzip format based on the 2 magic bytes at the start.
 */
function isGzipFormat(data) {
    var view = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    return view.length > 2 && view[0] === 0x1F && view[1] === 0x8B;
}
/**
 * Decompress `data` if it is in gzip format, otherwise just return it.
 */
function maybeDecompressGzip(data) {
    var byteView = void 0;
    if (data instanceof ArrayBuffer) {
        byteView = new Uint8Array(data);
    } else {
        byteView = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    }
    if (isGzipFormat(byteView)) {
        return Object(__WEBPACK_IMPORTED_MODULE_0_pako__["inflate"])(byteView);
    }
    return byteView;
}

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29);
__webpack_require__(2);
__webpack_require__(21);
__webpack_require__(65);
__webpack_require__(40);
__webpack_require__(91);
__webpack_require__(93);
__webpack_require__(98);
__webpack_require__(99);
__webpack_require__(101);
__webpack_require__(103);
__webpack_require__(108);
module.exports = __webpack_require__(111);


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* harmony default export */ __webpack_exports__["a"] = (class {
    static insertAfter(head, x) {
        var next = head.next0;
        x.next0 = next;
        x.prev0 = head;
        head.next0 = x;
        next.prev0 = x;
    }
    static insertBefore(head, x) {
        var prev = head.prev0;
        x.prev0 = prev;
        x.next0 = head;
        head.prev0 = x;
        prev.next0 = x;
    }
    static front(head) {
        var next = head.next0;
        if (next === head) {
            return null;
        }
        return next;
    }
    static back(head) {
        var next = head.prev0;
        if (next === head) {
            return null;
        }
        return next;
    }
    static pop(x) {
        var next = x.next0;
        var prev = x.prev0;
        next.prev0 = prev;
        prev.next0 = next;
        x.next0 = null;
        x.prev0 = null;
        return x;
    }
    static *iterator(head) {
        for (var x = head.next0; x !== head; x = x.next0) {
            yield x;
        }
    }
    static *reverseIterator(head) {
        for (var x = head.prev0; x !== head; x = x.prev0) {
            yield x;
        }
    }
    static initializeHead(head) {
        head.next0 = head.prev0 = head;
    }
});

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* harmony default export */ __webpack_exports__["a"] = (class {
    static insertAfter(head, x) {
        var next = head.next1;
        x.next1 = next;
        x.prev1 = head;
        head.next1 = x;
        next.prev1 = x;
    }
    static insertBefore(head, x) {
        var prev = head.prev1;
        x.prev1 = prev;
        x.next1 = head;
        head.prev1 = x;
        prev.next1 = x;
    }
    static front(head) {
        var next = head.next1;
        if (next === head) {
            return null;
        }
        return next;
    }
    static back(head) {
        var next = head.prev1;
        if (next === head) {
            return null;
        }
        return next;
    }
    static pop(x) {
        var next = x.next1;
        var prev = x.prev1;
        next.prev1 = prev;
        prev.next1 = next;
        x.next1 = null;
        x.prev1 = null;
        return x;
    }
    static *iterator(head) {
        for (var x = head.next1; x !== head; x = x.next1) {
            yield x;
        }
    }
    static *reverseIterator(head) {
        for (var x = head.prev1; x !== head; x = x.prev1) {
            yield x;
        }
    }
    static initializeHead(head) {
        head.next1 = head.prev1 = head;
    }
});

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_disposable__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_json__ = __webpack_require__(5);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Memoize {
    constructor() {
        this.map = new Map();
    }
    /**
     * If getter throws an exception, no value is added.
     */
    get(key, getter) {
        var map = this.map;

        var obj = map.get(key);
        if (obj === undefined) {
            obj = getter();
            obj.registerDisposer(() => {
                map.delete(key);
            });
            map.set(key, obj);
        } else {
            obj.addRef();
        }
        return obj;
    }
}
/* unused harmony export Memoize */

class StringMemoize extends Memoize {
    get(x, getter) {
        if (typeof x !== 'string') {
            x = Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_json__["c" /* stableStringify */])(x);
        }
        return super.get(x, getter);
    }
    getUncounted(x, getter) {
        return this.get(x, () => new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_disposable__["b" /* RefCountedValue */](getter())).value;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StringMemoize;


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export create */
/* unused harmony export clone */
/* unused harmony export copy */
/* unused harmony export identity */
/* unused harmony export fromValues */
/* unused harmony export set */
/* unused harmony export transpose */
/* unused harmony export invert */
/* unused harmony export adjoint */
/* unused harmony export determinant */
/* unused harmony export multiply */
/* unused harmony export rotate */
/* unused harmony export scale */
/* unused harmony export fromRotation */
/* unused harmony export fromScaling */
/* unused harmony export str */
/* unused harmony export frob */
/* unused harmony export LDU */
/* unused harmony export add */
/* unused harmony export subtract */
/* unused harmony export exactEquals */
/* unused harmony export equals */
/* unused harmony export multiplyScalar */
/* unused harmony export multiplyScalarAndAdd */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
function fromValues(m00, m01, m10, m11) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    let a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function invert(out, a) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];

  // Calculate the determinant
  let det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] =  a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] =  a0 * det;

  return out;
}

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  let a0 = a[0];
  out[0] =  a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] =  a0;

  return out;
}

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function multiply(out, a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function rotate(out, a, rad) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = a0 *  c + a2 * s;
  out[1] = a1 *  c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
function scale(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let v0 = v[0], v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
}

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2]/a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  return out;
}

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link mat2.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */



/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export create */
/* unused harmony export clone */
/* unused harmony export copy */
/* unused harmony export identity */
/* unused harmony export fromValues */
/* unused harmony export set */
/* unused harmony export invert */
/* unused harmony export determinant */
/* unused harmony export multiply */
/* unused harmony export rotate */
/* unused harmony export scale */
/* unused harmony export translate */
/* unused harmony export fromRotation */
/* unused harmony export fromScaling */
/* unused harmony export fromTranslation */
/* unused harmony export str */
/* unused harmony export frob */
/* unused harmony export add */
/* unused harmony export subtract */
/* unused harmony export multiplyScalar */
/* unused harmony export multiplyScalarAndAdd */
/* unused harmony export exactEquals */
/* unused harmony export equals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](6);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
function fromValues(a, b, c, d, tx, ty) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function invert(out, a) {
  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];
  let atx = a[4], aty = a[5];

  let det = aa * ad - ab * ac;
  if(!det){
    return null;
  }
  det = 1.0 / det;

  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function multiply(out, a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function rotate(out, a, rad) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = a0 *  c + a2 * s;
  out[1] = a1 *  c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
function scale(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let v0 = v[0], v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
function translate(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let v0 = v[0], v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad), c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
          a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
}

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */



/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["transpose"] = transpose;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["adjoint"] = adjoint;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["translate"] = translate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["fromTranslation"] = fromTranslation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromXRotation"] = fromXRotation;
/* harmony export (immutable) */ __webpack_exports__["fromYRotation"] = fromYRotation;
/* harmony export (immutable) */ __webpack_exports__["fromZRotation"] = fromZRotation;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslation"] = fromRotationTranslation;
/* harmony export (immutable) */ __webpack_exports__["getTranslation"] = getTranslation;
/* harmony export (immutable) */ __webpack_exports__["getScaling"] = getScaling;
/* harmony export (immutable) */ __webpack_exports__["getRotation"] = getRotation;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslationScale"] = fromRotationTranslationScale;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslationScaleOrigin"] = fromRotationTranslationScaleOrigin;
/* harmony export (immutable) */ __webpack_exports__["fromQuat"] = fromQuat;
/* harmony export (immutable) */ __webpack_exports__["frustum"] = frustum;
/* harmony export (immutable) */ __webpack_exports__["perspective"] = perspective;
/* harmony export (immutable) */ __webpack_exports__["perspectiveFromFieldOfView"] = perspectiveFromFieldOfView;
/* harmony export (immutable) */ __webpack_exports__["ortho"] = ortho;
/* harmony export (immutable) */ __webpack_exports__["lookAt"] = lookAt;
/* harmony export (immutable) */ __webpack_exports__["targetTo"] = targetTo;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 4x4 Matrix
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](16);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    let a01 = a[1], a02 = a[2], a03 = a[3];
    let a12 = a[6], a13 = a[7];
    let a23 = a[11];

    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

  return out;
}

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
  return out;
}

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  // Cache only the current line of the second matrix
  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
  return out;
}

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
  let x = v[0], y = v[1], z = v[2];
  let a00, a01, a02, a03;
  let a10, a11, a12, a13;
  let a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
  let x = v[0], y = v[1], z = v[2];

  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
  let x = axis[0], y = axis[1], z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s, c, t;
  let a00, a01, a02, a03;
  let a10, a11, a12, a13;
  let a20, a21, a22, a23;
  let b00, b01, b02;
  let b10, b11, b12;
  let b20, b21, b22;

  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]) { return null; }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

  // Construct the elements of the rotation matrix
  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

  // Perform rotation-specific matrix multiplication
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) { // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a10 = a[4];
  let a11 = a[5];
  let a12 = a[6];
  let a13 = a[7];
  let a20 = a[8];
  let a21 = a[9];
  let a22 = a[10];
  let a23 = a[11];

  if (a !== out) { // If the source and destination differ, copy the unchanged rows
    out[0]  = a[0];
    out[1]  = a[1];
    out[2]  = a[2];
    out[3]  = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a00 = a[0];
  let a01 = a[1];
  let a02 = a[2];
  let a03 = a[3];
  let a20 = a[8];
  let a21 = a[9];
  let a22 = a[10];
  let a23 = a[11];

  if (a !== out) { // If the source and destination differ, copy the unchanged rows
    out[4]  = a[4];
    out[5]  = a[5];
    out[6]  = a[6];
    out[7]  = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a00 = a[0];
  let a01 = a[1];
  let a02 = a[2];
  let a03 = a[3];
  let a10 = a[4];
  let a11 = a[5];
  let a12 = a[6];
  let a13 = a[7];

  if (a !== out) { // If the source and destination differ, copy the unchanged last row
    out[8]  = a[8];
    out[9]  = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function fromRotation(out, rad, axis) {
  let x = axis[0], y = axis[1], z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s, c, t;

  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]) { return null; }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromXRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = 1;
  out[1]  = 0;
  out[2]  = 0;
  out[3]  = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromYRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = c;
  out[1]  = 0;
  out[2]  = -s;
  out[3]  = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromZRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = c;
  out[1]  = s;
  out[2]  = 0;
  out[3]  = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
}

/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getScaling(out, mat) {
  let m11 = mat[0];
  let m12 = mat[1];
  let m13 = mat[2];
  let m21 = mat[4];
  let m22 = mat[5];
  let m23 = mat[6];
  let m31 = mat[8];
  let m32 = mat[9];
  let m33 = mat[10];

  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);

  return out;
}

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
function getRotation(out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  let trace = mat[0] + mat[5] + mat[10];
  let S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S;
    out[2] = (mat[1] - mat[4]) / S;
  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) {
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S;
    out[2] = (mat[8] + mat[2]) / S;
  } else if (mat[5] > mat[10]) {
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S;
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S;
  } else {
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;
  let sx = s[0];
  let sy = s[1];
  let sz = s[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  let sx = s[0];
  let sy = s[1];
  let sz = s[2];

  let ox = o[0];
  let oy = o[1];
  let oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
}

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
function fromQuat(out, q) {
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let yx = y * x2;
  let yy = y * y2;
  let zx = z * x2;
  let zy = z * y2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;

  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;

  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;

  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;

  return out;
}

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
  let rl = 1 / (right - left);
  let tb = 1 / (top - bottom);
  let nf = 1 / (near - far);
  out[0] = (near * 2) * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = (near * 2) * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = (far * near * 2) * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
  let f = 1.0 / Math.tan(fovy / 2);
  let nf = 1 / (near - far);
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = (2 * far * near) * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);
  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);
  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);
  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);
  let xScale = 2.0 / (leftTan + rightTan);
  let yScale = 2.0 / (upTan + downTan);

  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = ((upTan - downTan) * yScale * 0.5);
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = (far * near) / (near - far);
  out[15] = 0.0;
  return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
  let lr = 1 / (left - right);
  let bt = 1 / (bottom - top);
  let nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  let eyex = eye[0];
  let eyey = eye[1];
  let eyez = eye[2];
  let upx = up[0];
  let upy = up[1];
  let upz = up[2];
  let centerx = center[0];
  let centery = center[1];
  let centerz = center[2];

  if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] &&
      Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] &&
      Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]) {
    return mat4.identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;

  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;

  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;

  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;

  return out;
}

/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function targetTo(out, eye, target, up) {
  let eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];

  let z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];

  let len = z0*z0 + z1*z1 + z2*z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  let x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
}

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  out[6] = a[6] + (b[6] * scale);
  out[7] = a[7] + (b[7] * scale);
  out[8] = a[8] + (b[8] * scale);
  out[9] = a[9] + (b[9] * scale);
  out[10] = a[10] + (b[10] * scale);
  out[11] = a[11] + (b[11] * scale);
  out[12] = a[12] + (b[12] * scale);
  out[13] = a[13] + (b[13] * scale);
  out[14] = a[14] + (b[14] * scale);
  out[15] = a[15] + (b[15] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&
         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&
         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];
  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];
  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];
  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];

  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];
  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];
  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];
  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];

  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
          Math.abs(a9 - b9) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
          Math.abs(a10 - b10) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
          Math.abs(a11 - b11) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
          Math.abs(a12 - b12) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
          Math.abs(a13 - b13) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
          Math.abs(a14 - b14) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
          Math.abs(a15 - b15) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
}

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat4.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["setAxisAngle"] = setAxisAngle;
/* harmony export (immutable) */ __webpack_exports__["getAxisAngle"] = getAxisAngle;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["calculateW"] = calculateW;
/* harmony export (immutable) */ __webpack_exports__["slerp"] = slerp;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["conjugate"] = conjugate;
/* harmony export (immutable) */ __webpack_exports__["fromMat3"] = fromMat3;
/* harmony export (immutable) */ __webpack_exports__["fromEuler"] = fromEuler;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mat3__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vec4__ = __webpack_require__(34);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */






/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  let s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
function getAxisAngle(out_axis, q) {
  let rad = Math.acos(q[3]) * 2.0;
  let s = Math.sin(rad / 2.0);
  if (s != 0.0) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply(out, a, b) {
  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = b[0], by = b[1], bz = b[2], bw = b[3];

  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let by = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bz = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW(out, a) {
  let x = a[0], y = a[1], z = a[2];

  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = b[0], by = b[1], bz = b[2], bw = b[3];

  let omega, cosom, sinom, scale0, scale1;

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  // adjust signs (if necessary)
  if ( cosom < 0.0 ) {
    cosom = -cosom;
    bx = - bx;
    by = - by;
    bz = - bz;
    bw = - bw;
  }
  // calculate coefficients
  if ( (1.0 - cosom) > 0.000001 ) {
    // standard case (slerp)
    omega  = Math.acos(cosom);
    sinom  = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;

  return out;
}

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert(out, a) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;
  let invDot = dot ? 1.0/dot : 0;

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0*invDot;
  out[1] = -a1*invDot;
  out[2] = -a2*invDot;
  out[3] = a3*invDot;
  return out;
}

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  let fTrace = m[0] + m[4] + m[8];
  let fRoot;

  if ( fTrace > 0.0 ) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0);  // 2w
    out[3] = 0.5 * fRoot;
    fRoot = 0.5/fRoot;  // 1/(4w)
    out[0] = (m[5]-m[7])*fRoot;
    out[1] = (m[6]-m[2])*fRoot;
    out[2] = (m[1]-m[3])*fRoot;
  } else {
    // |w| <= 1/2
    let i = 0;
    if ( m[4] > m[0] )
      i = 1;
    if ( m[8] > m[i*3+i] )
      i = 2;
    let j = (i+1)%3;
    let k = (i+2)%3;

    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
  }

  return out;
}

/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */
function fromEuler(out, x, y, z) {
    let halfToRad = 0.5 * Math.PI / 180.0;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;

    let sx = Math.sin(x);
    let cx = Math.cos(x);
    let sy = Math.sin(y);
    let cy = Math.cos(y);
    let sz = Math.sin(z);
    let cz = Math.cos(z);

    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;

    return out;
}

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
const clone = __WEBPACK_IMPORTED_MODULE_3__vec4__["b" /* clone */];
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;


/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
const fromValues = __WEBPACK_IMPORTED_MODULE_3__vec4__["g" /* fromValues */];
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;


/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
const copy = __WEBPACK_IMPORTED_MODULE_3__vec4__["c" /* copy */];
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;


/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
const set = __WEBPACK_IMPORTED_MODULE_3__vec4__["l" /* set */];
/* harmony export (immutable) */ __webpack_exports__["set"] = set;


/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
const add = __WEBPACK_IMPORTED_MODULE_3__vec4__["a" /* add */];
/* harmony export (immutable) */ __webpack_exports__["add"] = add;


/**
 * Alias for {@link quat.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
const scale = __WEBPACK_IMPORTED_MODULE_3__vec4__["k" /* scale */];
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;


/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
const dot = __WEBPACK_IMPORTED_MODULE_3__vec4__["d" /* dot */];
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;


/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
const lerp = __WEBPACK_IMPORTED_MODULE_3__vec4__["i" /* lerp */];
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;


/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */
const length = __WEBPACK_IMPORTED_MODULE_3__vec4__["h" /* length */];
/* harmony export (immutable) */ __webpack_exports__["length"] = length;


/**
 * Alias for {@link quat.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
const squaredLength = __WEBPACK_IMPORTED_MODULE_3__vec4__["m" /* squaredLength */];
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;


/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
const normalize = __WEBPACK_IMPORTED_MODULE_3__vec4__["j" /* normalize */];
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;


/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const exactEquals = __WEBPACK_IMPORTED_MODULE_3__vec4__["f" /* exactEquals */];
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;


/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const equals = __WEBPACK_IMPORTED_MODULE_3__vec4__["e" /* equals */];
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;


/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
const rotationTo = (function() {
  let tmpvec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["create"]();
  let xUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["fromValues"](1,0,0);
  let yUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["fromValues"](0,1,0);

  return function(out, a, b) {
    let dot = __WEBPACK_IMPORTED_MODULE_2__vec3__["dot"](a, b);
    if (dot < -0.999999) {
      __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, xUnitVec3, a);
      if (__WEBPACK_IMPORTED_MODULE_2__vec3__["len"](tmpvec3) < 0.000001)
        __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, yUnitVec3, a);
      __WEBPACK_IMPORTED_MODULE_2__vec3__["normalize"](tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
})();
/* harmony export (immutable) */ __webpack_exports__["rotationTo"] = rotationTo;


/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
const sqlerp = (function () {
  let temp1 = create();
  let temp2 = create();

  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));

    return out;
  };
}());
/* harmony export (immutable) */ __webpack_exports__["sqlerp"] = sqlerp;


/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
const setAxes = (function() {
  let matr = __WEBPACK_IMPORTED_MODULE_1__mat3__["a" /* create */]();

  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];

    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];

    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];

    return normalize(out, fromMat3(out, matr));
  };
})();
/* harmony export (immutable) */ __webpack_exports__["setAxes"] = setAxes;



/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export create */
/* unused harmony export clone */
/* unused harmony export fromValues */
/* unused harmony export copy */
/* unused harmony export set */
/* unused harmony export add */
/* unused harmony export subtract */
/* unused harmony export multiply */
/* unused harmony export divide */
/* unused harmony export ceil */
/* unused harmony export floor */
/* unused harmony export min */
/* unused harmony export max */
/* unused harmony export round */
/* unused harmony export scale */
/* unused harmony export scaleAndAdd */
/* unused harmony export distance */
/* unused harmony export squaredDistance */
/* unused harmony export length */
/* unused harmony export squaredLength */
/* unused harmony export negate */
/* unused harmony export inverse */
/* unused harmony export normalize */
/* unused harmony export dot */
/* unused harmony export cross */
/* unused harmony export lerp */
/* unused harmony export random */
/* unused harmony export transformMat2 */
/* unused harmony export transformMat2d */
/* unused harmony export transformMat3 */
/* unused harmony export transformMat4 */
/* unused harmony export str */
/* unused harmony export exactEquals */
/* unused harmony export equals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(3);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](2);
  out[0] = 0;
  out[1] = 0;
  return out;
}

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
function fromValues(x, y) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](2);
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
};

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
};

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
function round (out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1];
  return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1];
  return x*x + y*y;
};

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  var x = a[0],
    y = a[1];
  return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength (a) {
  var x = a[0],
    y = a[1];
  return x*x + y*y;
};

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
  var x = a[0],
    y = a[1];
  var len = x*x + y*y;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
  }
  return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
  var ax = a[0],
    ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
function random(out, scale) {
  scale = scale || 1.0;
  var r = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2d(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat3(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
  let x = a[0];
  let y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1];
  let b0 = b[0], b1 = b[1];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */]*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
}

/**
 * Alias for {@link vec2.length}
 * @function
 */
const len = length;
/* unused harmony export len */


/**
 * Alias for {@link vec2.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */


/**
 * Alias for {@link vec2.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link vec2.divide}
 * @function
 */
const div = divide;
/* unused harmony export div */


/**
 * Alias for {@link vec2.distance}
 * @function
 */
const dist = distance;
/* unused harmony export dist */


/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* unused harmony export sqrDist */


/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* unused harmony export sqrLen */


/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 2;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1];
    }

    return a;
  };
})();
/* unused harmony export forEach */



/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Pairing heap.
 *
 * The root node is the minimum element according to comparator.
 *
 * @final
 */
class Implementation {
    /**
     * @param compare Returns true iff a < b.
     */
    constructor(compare) {
        this.compare = compare;
    }
    meld(a, b) {
        if (b === null) {
            return a;
        }
        if (a === null) {
            return b;
        }
        var compare = this.compare;

        if (compare(b, a)) {
            var temp = a;
            a = b;
            b = temp;
        }
        var aChild = a.child0;
        b.next0 = aChild;
        b.prev0 = a;
        if (aChild !== null) {
            aChild.prev0 = b;
        }
        a.child0 = b;
        return a;
    }
    combineChildren(node) {
        var cur = node.child0;
        if (cur === null) {
            return null;
        }
        // While in this function, we will use the nextProperty to create a
        // singly-linked list of pairwise-merged nodes that still need to be
        // merged together.
        var head = null;
        while (true) {
            var curNext = cur.next0;
            var next = void 0,
                m = void 0;
            if (curNext === null) {
                next = null;
                m = cur;
            } else {
                next = curNext.next0;
                m = this.meld(cur, curNext);
            }
            m.next0 = head;
            head = m;
            if (next === null) {
                break;
            }
            cur = next;
        }
        var root = head;
        head = head.next0;
        while (true) {
            if (head === null) {
                break;
            }
            var _next = head.next0;
            root = this.meld(root, head);
            head = _next;
        }
        root.prev0 = null;
        root.next0 = null;
        return root;
    }
    removeMin(root) {
        var newRoot = this.combineChildren(root);
        root.next0 = null;
        root.prev0 = null;
        root.child0 = null;
        return newRoot;
    }
    remove(root, node) {
        if (root === node) {
            return this.removeMin(root);
        }
        var prev = node.prev0;
        var next = node.next0;
        if (prev.child0 === node) {
            prev.child0 = next;
        } else {
            prev.next0 = next;
        }
        if (next !== null) {
            next.prev0 = prev;
        }
        var newRoot = this.meld(root, this.combineChildren(node));
        node.next0 = null;
        node.prev0 = null;
        node.child0 = null;
        return newRoot;
    }
    /**
     * Returns a new iterator over the entries in the heap.
     */
    *entries(root) {
        if (root !== null) {
            var child = root.child0;
            yield root;
            while (child !== null) {
                var next = child.next0;
                yield* this.entries(child);
                child = next;
            }
        }
    }
    /**
     * Returns a new iterator over the entries in the heap.  The entries
     * will be removed as they are iterated.
     */
    *removedEntries(root) {
        if (root !== null) {
            var child = root.child0;
            root.child0 = null;
            root.next0 = null;
            root.prev0 = null;
            yield root;
            while (child !== null) {
                var next = child.next0;
                child.child0 = null;
                child.next0 = null;
                child.prev0 = null;
                yield* this.entries(child);
                child = next;
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Implementation;


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Pairing heap.
 *
 * The root node is the minimum element according to comparator.
 *
 * @final
 */
class Implementation {
    /**
     * @param compare Returns true iff a < b.
     */
    constructor(compare) {
        this.compare = compare;
    }
    meld(a, b) {
        if (b === null) {
            return a;
        }
        if (a === null) {
            return b;
        }
        var compare = this.compare;

        if (compare(b, a)) {
            var temp = a;
            a = b;
            b = temp;
        }
        var aChild = a.child1;
        b.next1 = aChild;
        b.prev1 = a;
        if (aChild !== null) {
            aChild.prev1 = b;
        }
        a.child1 = b;
        return a;
    }
    combineChildren(node) {
        var cur = node.child1;
        if (cur === null) {
            return null;
        }
        // While in this function, we will use the nextProperty to create a
        // singly-linked list of pairwise-merged nodes that still need to be
        // merged together.
        var head = null;
        while (true) {
            var curNext = cur.next1;
            var next = void 0,
                m = void 0;
            if (curNext === null) {
                next = null;
                m = cur;
            } else {
                next = curNext.next1;
                m = this.meld(cur, curNext);
            }
            m.next1 = head;
            head = m;
            if (next === null) {
                break;
            }
            cur = next;
        }
        var root = head;
        head = head.next1;
        while (true) {
            if (head === null) {
                break;
            }
            var _next = head.next1;
            root = this.meld(root, head);
            head = _next;
        }
        root.prev1 = null;
        root.next1 = null;
        return root;
    }
    removeMin(root) {
        var newRoot = this.combineChildren(root);
        root.next1 = null;
        root.prev1 = null;
        root.child1 = null;
        return newRoot;
    }
    remove(root, node) {
        if (root === node) {
            return this.removeMin(root);
        }
        var prev = node.prev1;
        var next = node.next1;
        if (prev.child1 === node) {
            prev.child1 = next;
        } else {
            prev.next1 = next;
        }
        if (next !== null) {
            next.prev1 = prev;
        }
        var newRoot = this.meld(root, this.combineChildren(node));
        node.next1 = null;
        node.prev1 = null;
        node.child1 = null;
        return newRoot;
    }
    /**
     * Returns a new iterator over the entries in the heap.
     */
    *entries(root) {
        if (root !== null) {
            var child = root.child1;
            yield root;
            while (child !== null) {
                var next = child.next1;
                yield* this.entries(child);
                child = next;
            }
        }
    }
    /**
     * Returns a new iterator over the entries in the heap.  The entries
     * will be removed as they are iterated.
     */
    *removedEntries(root) {
        if (root !== null) {
            var child = root.child1;
            root.child1 = null;
            root.next1 = null;
            root.prev1 = null;
            yield root;
            while (child !== null) {
                var next = child.next1;
                child.child1 = null;
                child.next1 = null;
                child.prev1 = null;
                yield* this.entries(child);
                child = next;
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Implementation;


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__ = __webpack_require__(1);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class ChunkLayout {
    constructor(size) {
        var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["c" /* identityMat4 */];

        this.size = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].clone(size);
        this.transform = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["g" /* mat4 */].clone(transform);
        this.invTransform = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["g" /* mat4 */].invert(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["g" /* mat4 */].create(), transform);
    }
    toObject(msg) {
        msg['size'] = this.size;
        msg['transform'] = this.transform;
    }
    static get(size) {
        var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["c" /* identityMat4 */];

        var cache = ChunkLayout.cache;
        var key = JSON.stringify([Array.from(size), Array.from(transform)]);
        var obj = cache.get(key);
        if (obj === undefined) {
            obj = new ChunkLayout(size, transform);
            cache.set(key, obj);
        }
        return obj;
    }
    static fromObject(msg) {
        return ChunkLayout.get(msg['size'], msg['transform']);
    }
    /**
     * Transform local spatial coordinates to global spatial coordinates.
     */
    localSpatialToGlobal(out, localSpatial) {
        return __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].transformMat4(out, localSpatial, this.transform);
    }
    /**
     * Transform global spatial coordinates to local spatial coordinates.
     */
    globalToLocalSpatial(out, globalSpatial) {
        return __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].transformMat4(out, globalSpatial, this.invTransform);
    }
    globalToLocalGrid(out, globalSpatial) {
        this.globalToLocalSpatial(out, globalSpatial);
        __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["l" /* vec3 */].divide(out, out, this.size);
        return out;
    }
    localSpatialVectorToGlobal(out, localVector) {
        return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["k" /* transformVectorByMat4 */])(out, localVector, this.transform);
    }
    globalToLocalSpatialVector(out, globalVector) {
        return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["k" /* transformVectorByMat4 */])(out, globalVector, this.invTransform);
    }
    assignLocalSpatialToGlobalMat4(out) {
        return __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_geom__["g" /* mat4 */].copy(out, this.transform);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChunkLayout;

ChunkLayout.cache = new Map();

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = approxEqual;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function approxEqual(a, b) {
    if (a === b) {
        return true;
    }
    return Math.abs(a - b) / Math.min(Math.abs(a), Math.abs(b)) < 1e-6;
}

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SharedWatchableValue */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_trackable_value__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * @file Facility for sharing arbitrary values that support structural cloning between threads.
 */


var CHANGED_RPC_METHOD_ID = 'SharedWatchableValue.changed';
var SharedWatchableValue = SharedWatchableValue_1 = class SharedWatchableValue extends __WEBPACK_IMPORTED_MODULE_1_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */] {
    constructor(rpc) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        super(rpc, options);
        /**
         * The value is being updated to reflect a remote change.
         * @internal
         */
        this.updatingValue_ = false;
        if (rpc !== undefined) {
            this.base = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_trackable_value__["a" /* WatchableValue */](options['value']);
            this.setupChangedHandler();
        }
    }
    initializeCounterpart(rpc) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        options['value'] = this.value;
        super.initializeCounterpart(rpc, options);
    }
    setupChangedHandler() {
        this.registerDisposer(this.base.changed.add(() => {
            if (this.updatingValue_) {
                this.updatingValue_ = false;
            } else {
                var rpc = this.rpc;

                if (rpc !== null) {
                    rpc.invoke(CHANGED_RPC_METHOD_ID, { 'id': this.rpcId, 'value': this.value });
                }
            }
        }));
    }
    static makeFromExisting(rpc, base) {
        var obj = new SharedWatchableValue_1();
        obj.base = base;
        obj.setupChangedHandler();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    static make(rpc, value) {
        return SharedWatchableValue_1.makeFromExisting(rpc, new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_trackable_value__["a" /* WatchableValue */](value));
    }
    get value() {
        return this.base.value;
    }
    set value(value) {
        this.base.value = value;
    }
    get changed() {
        return this.base.changed;
    }
};
SharedWatchableValue = SharedWatchableValue_1 = __decorate([Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_worker_rpc__["g" /* registerSharedObject */])('SharedWatchableValue')], SharedWatchableValue);

Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_worker_rpc__["f" /* registerRPC */])(CHANGED_RPC_METHOD_ID, function (x) {
    var obj = this.get(x['id']);
    obj.updatingValue_ = true;
    obj.base.value = x['value'];
    obj.updatingValue_ = false;
});
var SharedWatchableValue_1;

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_signal__ = __webpack_require__(15);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class WatchableValue {
    constructor(value_) {
        this.value_ = value_;
        this.changed = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_signal__["a" /* NullarySignal */]();
    }
    get value() {
        return this.value_;
    }
    set value(newValue) {
        if (newValue !== this.value_) {
            this.value_ = newValue;
            this.changed.dispatch();
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WatchableValue;

class TrackableValue extends WatchableValue {
    constructor(value, validator) {
        var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : value;

        super(value);
        this.validator = validator;
        this.defaultValue = defaultValue;
    }
    toJSON() {
        var value_ = this.value_;

        if (value_ === this.defaultValue) {
            return undefined;
        }
        return this.value_;
    }
    reset() {
        this.value = this.defaultValue;
    }
    restoreState(x) {
        if (x !== undefined) {
            var validator = this.validator;

            try {
                this.value = validator(x);
                return;
            } catch (ignoredError) {}
        }
        this.value = this.defaultValue;
    }
}
/* unused harmony export TrackableValue */


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSource", function() { return MeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSource", function() { return SkeletonSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_backend__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_datasource_brainmaps_api__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_mesh_backend__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_skeleton_backend__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_sliceview_backend_chunk_decoders_jpeg__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_sliceview_backend_chunk_decoders_raw__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_neuroglancer_util_json__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_neuroglancer_util_uint64__ = __webpack_require__(6);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};














var CHUNK_DECODERS = new Map([[__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["c" /* VolumeChunkEncoding */].RAW, __WEBPACK_IMPORTED_MODULE_8_neuroglancer_sliceview_backend_chunk_decoders_raw__["a" /* decodeRawChunk */]], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["c" /* VolumeChunkEncoding */].JPEG, __WEBPACK_IMPORTED_MODULE_7_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */]], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["c" /* VolumeChunkEncoding */].COMPRESSED_SEGMENTATION, __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__["a" /* decodeCompressedSegmentationChunk */]]]);
function applyChangeStack(changeStack, payload) {
    if (!changeStack) {
        return;
    }
    payload.change_spec = {
        change_stack_id: changeStack.changeStackId
    };
    if (changeStack.timeStamp) {
        payload.change_spec.time_stamp = changeStack.timeStamp;
    }
    if (changeStack.skipEquivalences) {
        payload.change_spec.skip_equivalences = changeStack.skipEquivalences;
    }
}
var VolumeChunkSource = class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_9_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor() {
        super(...arguments);
        this.chunkDecoder = CHUNK_DECODERS.get(this.parameters.encoding);
    }
    applyEncodingParams(payload) {
        var encoding = this.parameters.encoding;

        switch (encoding) {
            case __WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["c" /* VolumeChunkEncoding */].RAW:
                payload.subvolume_format = 'RAW';
                break;
            case __WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["c" /* VolumeChunkEncoding */].JPEG:
                payload.subvolume_format = 'SINGLE_IMAGE';
                payload.image_format_options = {
                    image_format: 'JPEG',
                    jpeg_quality: 70
                };
                return;
            case __WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["c" /* VolumeChunkEncoding */].COMPRESSED_SEGMENTATION:
                payload.subvolume_format = 'RAW';
                payload.image_format_options = {
                    compressed_segmentation_block_size: Object(__WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["m" /* vec3Key */])(this.spec.compressedSegmentationBlockSize)
                };
                break;
            default:
                throw new Error(`Invalid encoding: ${encoding}`);
        }
    }
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var path = void 0;
        // chunkPosition must not be captured, since it will be invalidated by the next call to
        // computeChunkBounds.
        var chunkPosition = this.computeChunkBounds(chunk);
        var chunkDataSize = chunk.chunkDataSize;
        path = `/v1/volumes/${parameters['volumeId']}/subvolume:binary`;
        var payload = {
            geometry: {
                corner: Object(__WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["m" /* vec3Key */])(chunkPosition),
                size: Object(__WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["m" /* vec3Key */])(chunkDataSize),
                scale: parameters.scaleIndex
            }
        };
        this.applyEncodingParams(payload);
        applyChangeStack(parameters.changeSpec, payload);
        var httpCall = {
            method: 'POST',
            payload: JSON.stringify(payload),
            path,
            responseType: 'arraybuffer'
        };
        return Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_datasource_brainmaps_api__["b" /* makeRequest */])(parameters['instance'], httpCall, cancellationToken).then(response => this.chunkDecoder(chunk, response));
    }
};
VolumeChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["d" /* VolumeSourceParameters */])], VolumeChunkSource);

function decodeManifestChunk(chunk, response) {
    Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_mesh_backend__["c" /* decodeJsonManifestChunk */])(chunk, response, 'fragmentKey');
    if (chunk.clipBounds) {
        chunk.fragmentIds = filterFragments(chunk.fragmentIds, chunk.clipBounds);
    }
    return chunk;
}
function filterFragments(fragmentIds, clipBounds) {
    clipBounds;
    if (!fragmentIds) {
        return fragmentIds;
    }
    var filteredFragments = [];
    for (var fragmentId of fragmentIds) {
        // TODO(blakely): Hardcoded for now, remove when we can filter on the backend.
        var fragmentSize = 500;
        var fragmentBounds = getFragmentBounds(fragmentId, __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].clone([fragmentSize, fragmentSize, fragmentSize]));
        if (boundsIntersect(fragmentBounds, clipBounds)) {
            filteredFragments.push(fragmentId);
        }
    }
    return filteredFragments;
}
function getFragmentBounds(fragmentId, fragmentSize) {
    var corner = getFragmentCorner(fragmentId, fragmentSize);
    var halfSize = __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].create();
    __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].scale(halfSize, fragmentSize, 0.5);
    var center = __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].create();
    __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].add(center, corner, halfSize);
    return {
        center,
        size: fragmentSize
    };
}
function getFragmentCorner(fragmentId, fragmentSize) {
    var id = new __WEBPACK_IMPORTED_MODULE_13_neuroglancer_util_uint64__["a" /* Uint64 */]();
    if (!id.tryParseString(fragmentId, 16)) {
        throw new Error(`Couldn't parse fragmentId ${fragmentId} as hex-encoded Uint64`);
    }
    if (id.high) {
        throw new Error(`Fragment ids > 2^32 not supported yet`);
    }
    var chunkCoord = Object(__WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["a" /* decodeMorton */])(id);
    var worldCoord = __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].create();
    return __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].mul(worldCoord, chunkCoord, fragmentSize);
}
function boundsIntersect(first, second) {
    function transformCorner(point, size, sign) {
        return [...point.map((value, idx) => value + sign * size[idx] / 2).values()];
    }
    function toMaxMinBounds(input) {
        return {
            min: __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].clone(transformCorner(input.center, input.size, -1)),
            max: __WEBPACK_IMPORTED_MODULE_11_neuroglancer_util_geom__["l" /* vec3 */].clone(transformCorner(input.center, input.size, 1))
        };
    }
    var a = toMaxMinBounds(first);
    var b = toMaxMinBounds(second);
    return a.min[0] <= b.max[0] && a.max[0] >= b.min[0] && a.min[1] <= b.max[1] && a.max[1] >= b.min[1] && a.min[2] <= b.max[2] && a.max[2] >= b.min[2];
}
function decodeManifestChunkWithSupervoxelIds(chunk, response) {
    Object(__WEBPACK_IMPORTED_MODULE_12_neuroglancer_util_json__["e" /* verifyObject */])(response);
    var fragmentKeys = Object(__WEBPACK_IMPORTED_MODULE_12_neuroglancer_util_json__["f" /* verifyObjectProperty */])(response, 'fragmentKey', __WEBPACK_IMPORTED_MODULE_12_neuroglancer_util_json__["h" /* verifyStringArray */]);
    var supervoxelIds = Object(__WEBPACK_IMPORTED_MODULE_12_neuroglancer_util_json__["f" /* verifyObjectProperty */])(response, 'supervoxelId', __WEBPACK_IMPORTED_MODULE_12_neuroglancer_util_json__["h" /* verifyStringArray */]);
    var length = fragmentKeys.length;
    if (length !== supervoxelIds.length) {
        throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');
    }
    chunk.fragmentIds = supervoxelIds.map((supervoxelId, index) => supervoxelId + '\0' + fragmentKeys[index]);
    if (chunk.clipBounds) {
        chunk.fragmentIds = filterFragments(chunk.fragmentIds, chunk.clipBounds);
    }
}
function decodeFragmentChunk(chunk, response) {
    var dv = new DataView(response);
    var numVertices = dv.getUint32(0, true);
    var numVerticesHigh = dv.getUint32(4, true);
    if (numVerticesHigh !== 0) {
        throw new Error(`The number of vertices should not exceed 2^32-1.`);
    }
    Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_mesh_backend__["d" /* decodeTriangleVertexPositionsAndIndices */])(chunk, response, __WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_endian__["b" /* Endianness */].LITTLE, /*vertexByteOffset=*/8, numVertices);
}
var MeshSource = class MeshSource extends __WEBPACK_IMPORTED_MODULE_4_neuroglancer_mesh_backend__["a" /* ParameterizedMeshSource */] {
    constructor() {
        super(...arguments);
        this.manifestDecoder = this.parameters.changeSpec !== undefined ? decodeManifestChunkWithSupervoxelIds : decodeManifestChunk;
        this.listFragmentsParams = (() => {
            var parameters = this.parameters;
            var changeSpec = parameters.changeSpec;

            if (changeSpec !== undefined) {
                return `&header.changeStackId=${changeSpec.changeStackId}&return_supervoxel_ids=true`;
            }
            return '';
        })();
    }
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var path = `/v1/objects/${parameters['volumeId']}/meshes/` + `${parameters['meshName']}:listfragments?object_id=${chunk.objectId}` + this.listFragmentsParams;
        var httpCall = {
            method: 'GET',
            path,
            responseType: 'json'
        };
        return Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_datasource_brainmaps_api__["b" /* makeRequest */])(parameters['instance'], httpCall, cancellationToken).then(response => this.manifestDecoder(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        var parameters = this.parameters;

        var objectId = void 0;
        var fragmentId = chunk.fragmentId;
        if (parameters.changeSpec !== undefined) {
            var splitIndex = fragmentId.indexOf('\0');
            objectId = fragmentId.substring(0, splitIndex);
            fragmentId = fragmentId.substring(splitIndex + 1);
        } else {
            objectId = chunk.manifestChunk.objectId.toString();
        }
        var path = `/v1/objects/${parameters['volumeId']}` + `/meshes/${parameters['meshName']}` + '/fragment:binary';
        var payload = {
            fragment_key: fragmentId,
            object_id: objectId
        };
        applyChangeStack(parameters.changeSpec, payload);
        var httpCall = {
            method: 'POST',
            path,
            payload: JSON.stringify(payload),
            responseType: 'arraybuffer'
        };
        return Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_datasource_brainmaps_api__["b" /* makeRequest */])(parameters['instance'], httpCall, cancellationToken).then(response => decodeFragmentChunk(chunk, response));
    }
};
MeshSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["a" /* MeshSourceParameters */])], MeshSource);

function decodeSkeletonChunk(chunk, response) {
    var dv = new DataView(response);
    var numVertices = dv.getUint32(0, true);
    var numVerticesHigh = dv.getUint32(4, true);
    if (numVerticesHigh !== 0) {
        throw new Error(`The number of vertices should not exceed 2^32-1.`);
    }
    var numEdges = dv.getUint32(8, true);
    var numEdgesHigh = dv.getUint32(12, true);
    if (numEdgesHigh !== 0) {
        throw new Error(`The number of edges should not exceed 2^32-1.`);
    }
    Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_skeleton_backend__["b" /* decodeSkeletonVertexPositionsAndIndices */])(chunk, response, __WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_endian__["b" /* Endianness */].LITTLE, /*vertexByteOffset=*/16, numVertices,
    /*indexByteOffset=*/undefined, /*numEdges=*/numEdges);
}
var SkeletonSource = class SkeletonSource extends __WEBPACK_IMPORTED_MODULE_5_neuroglancer_skeleton_backend__["a" /* ParameterizedSkeletonSource */] {
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var payload = {
            object_id: `${chunk.objectId}`
        };
        var path = `/v1/objects/${parameters['volumeId']}` + `/meshes/${parameters['meshName']}` + '/skeleton:binary';
        applyChangeStack(parameters.changeSpec, payload);
        var httpCall = {
            method: 'POST',
            path,
            payload: JSON.stringify(payload),
            responseType: 'arraybuffer'
        };
        return Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_datasource_brainmaps_api__["b" /* makeRequest */])(parameters['instance'], httpCall, cancellationToken).then(response => decodeSkeletonChunk(chunk, response));
    }
};
SkeletonSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_brainmaps_base__["b" /* SkeletonSourceParameters */])], SkeletonSource);


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_implementation__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_worker_rpc__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc_context__ = __webpack_require__(29);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * This implements the authentication API by simply forwarding all requests to the frontend.
 */



var resolvePromise = null;
__WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api_implementation__["b" /* implementation */].getNewTokenPromise = function (invalidToken) {
    var msg = {};
    if (invalidToken != null) {
        msg['invalidToken'] = invalidToken;
    }
    var promise = new Promise(function (resolve, _reject) {
        resolvePromise = resolve;
    });
    __WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc_context__["rpc"].invoke('brainmaps.requestToken', msg);
    return promise;
};
Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_worker_rpc__["f" /* registerRPC */])('brainmaps.receiveToken', function (x) {
    resolvePromise(x['authResult']);
});

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = simpleStringHash;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is a very simple string hash function.  It isn't secure, but
 * is suitable for sharding of requests.
 */
function simpleStringHash(s) {
  var h = 0;
  var length = s.length;
  for (var i = 0; i < length; ++i) {
    h = h * 31 + s.charCodeAt(i) | 0;
  }
  return h;
}

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return VolumeChunkEncoding; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api__ = __webpack_require__(36);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 0] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 1] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 2] = "COMPRESSED_SEGMENTATION";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class ChangeSpec {
    static stringify(p) {
        if (p === undefined) {
            return '';
        }
        return `${p['changeStackId']}/${p['timeStamp']}/${p['skipEquivalences']}`;
    }
}
/* unused harmony export ChangeSpec */

class VolumeSourceParameters {
    static stringify(p) {
        return `brainmaps-${Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api__["a" /* brainmapsInstanceKey */])(p['instance'])}:volume/${p['volumeId']}/` + `${p['scaleIndex']}/${VolumeChunkEncoding[p['encoding']]}/` + `${ChangeSpec.stringify(p['changeSpec'])}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["d"] = VolumeSourceParameters;

VolumeSourceParameters.RPC_ID = 'brainmaps/VolumeChunkSource';
class MeshSourceParameters {
    static stringify(p) {
        return `brainmaps:${Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_brainmaps_api__["a" /* brainmapsInstanceKey */])(p['instance'])}:mesh/` + `${p['volumeId']}/${p['meshName']}/` + `${ChangeSpec.stringify(p['changeSpec'])}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MeshSourceParameters;

MeshSourceParameters.RPC_ID = 'brainmaps/MeshSource';
class SkeletonSourceParameters extends MeshSourceParameters {}
/* harmony export (immutable) */ __webpack_exports__["b"] = SkeletonSourceParameters;

SkeletonSourceParameters.RPC_ID = 'brainmaps/SkeletonSource';

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MESH_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FRAGMENT_SOURCE_RPC_ID; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MESH_LAYER_RPC_ID = 'mesh/MeshLayer';
var FRAGMENT_SOURCE_RPC_ID = 'mesh/FragmentSource';

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SharedDisjointUint64Sets */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_disjoint_sets__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_json__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_signal__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint64__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var RPC_TYPE_ID = 'DisjointUint64Sets';
var ADD_METHOD_ID = 'DisjointUint64Sets.add';
var CLEAR_METHOD_ID = 'DisjointUint64Sets.clear';
var SharedDisjointUint64Sets = class SharedDisjointUint64Sets extends __WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */] {
    constructor() {
        super(...arguments);
        // All sets and sets for current session
        // All sets are used. Current go to json
        this.allSets = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_disjoint_sets__["a" /* DisjointUint64Sets */]();
        this.currentSets = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_disjoint_sets__["a" /* DisjointUint64Sets */]();
        this.changed = new __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_signal__["a" /* NullarySignal */]();
    }
    static makeWithCounterpart(rpc) {
        var obj = new this();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    disposed() {
        this.currentSets = undefined;
        this.allSets = undefined;
        this.changed = undefined;
        super.disposed();
    }
    linkSaved(a, b) {
        // Saved links go to full group
        this.allSets.link(a, b);
        this.changed.dispatch();
    }
    link(a, b) {
        // New links go to both groups
        this.allSets.link(a, b);
        if (this.currentSets.link(a, b)) {
            var rpc = this.rpc;

            if (rpc) {
                rpc.invoke(ADD_METHOD_ID, { 'id': this.rpcId, 'al': a.low, 'ah': a.high, 'bl': b.low, 'bh': b.high });
            }
            this.changed.dispatch();
        }
    }
    get(x) {
        return this.allSets.get(x);
    }
    clearAll() {
        // Clear all sets everywhere
        this.allSets.clear();
        if (this.currentSets.clear()) {
            var rpc = this.rpc;

            if (rpc) {
                rpc.invoke(CLEAR_METHOD_ID, { 'id': this.rpcId });
            }
            this.changed.dispatch();
        }
    }
    clearSaved() {
        // Only current sets
        this.allSets.clear();
        this.restoreSets(this.linkSaved, this.toJSON());
    }
    setElements(a) {
        return this.allSets.setElements(a);
    }
    get size() {
        return this.allSets.size;
    }
    toJSON() {
        return this.currentSets.toJSON();
    }
    restoreSets(linker, obj) {
        if (obj !== undefined) {
            var ids = [new __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint64__["a" /* Uint64 */](), new __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint64__["a" /* Uint64 */]()];
            Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_json__["a" /* parseArray */])(obj, z => {
                Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_json__["a" /* parseArray */])(z, (s, index) => {
                    ids[index % 2].parseString(String(s), 10);
                    if (index !== 0) {
                        // Link either current or saved elements
                        linker.call(this, ids[0], ids[1]);
                    }
                });
            });
        }
    }
    // Restores current sets
    restoreState(obj) {
        this.clearAll();
        this.restoreSets(this.link, obj);
    }
    // Restores saved sets
    restoreSaved(obj) {
        this.clearSaved();
        this.restoreSets(this.linkSaved, obj);
    }
};
SharedDisjointUint64Sets = __decorate([Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(RPC_TYPE_ID)], SharedDisjointUint64Sets);

var tempA = new __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint64__["a" /* Uint64 */]();
var tempB = new __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_uint64__["a" /* Uint64 */]();
Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__["f" /* registerRPC */])(ADD_METHOD_ID, function (x) {
    var obj = this.get(x['id']);
    tempA.low = x['al'];
    tempA.high = x['ah'];
    tempB.low = x['bl'];
    tempB.high = x['bh'];
    if (obj.currentSets.link(tempA, tempB)) {
        obj.changed.dispatch();
    }
});
Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_worker_rpc__["f" /* registerRPC */])(CLEAR_METHOD_ID, function (x) {
    var obj = this.get(x['id']);
    if (obj.currentSets.clear()) {
        obj.changed.dispatch();
    }
});

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_uint64__ = __webpack_require__(6);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var rankSymbol = Symbol('disjoint_sets:rank');
var parentSymbol = Symbol('disjoint_sets:parent');
var nextSymbol = Symbol('disjoint_sets:next');
var prevSymbol = Symbol('disjoint_sets:prev');
function findRepresentative(v) {
    // First pass: find the root, which will be stored in ancestor.
    var old = v;
    var ancestor = v[parentSymbol];
    while (ancestor !== v) {
        v = ancestor;
        ancestor = v[parentSymbol];
    }
    // Second pass: set all of the parent pointers along the path from the
    // original element `old' to refer directly to the root `ancestor'.
    v = old[parentSymbol];
    while (ancestor !== v) {
        old[parentSymbol] = ancestor;
        old = v;
        v = old[parentSymbol];
    }
    return ancestor;
}
function linkUnequalSetRepresentatives(i, j) {
    var iRank = i[rankSymbol];
    var jRank = j[rankSymbol];
    if (iRank > jRank) {
        j[parentSymbol] = i;
        return i;
    }
    i[parentSymbol] = j;
    if (iRank === jRank) {
        j[rankSymbol] = jRank + 1;
    }
    return j;
}
function spliceCircularLists(i, j) {
    var iPrev = i[prevSymbol];
    var jPrev = j[prevSymbol];
    // Connect end of i to beginning of j.
    j[prevSymbol] = iPrev;
    iPrev[nextSymbol] = j;
    // Connect end of j to beginning of i.
    i[prevSymbol] = jPrev;
    jPrev[nextSymbol] = i;
}
function* setElementIterator(i) {
    var j = i;
    do {
        yield j;
        j = j[nextSymbol];
    } while (j !== i);
}
function initializeElement(v) {
    v[parentSymbol] = v;
    v[rankSymbol] = 0;
    v[nextSymbol] = v[prevSymbol] = v;
}
var minSymbol = Symbol('disjoint_sets:min');
function isRootElement(v) {
    return v[parentSymbol] === v;
}
/**
 * Represents a collection of disjoint sets of Uint64 values.
 *
 * Supports merging sets, retrieving the minimum Uint64 value contained in a set (the representative
 * value), and iterating over the elements contained in a set.
 */
class DisjointUint64Sets {
    constructor() {
        this.map = new Map();
        this.generation = 0;
    }
    get(x) {
        var key = x.toString();
        var element = this.map.get(key);
        if (element === undefined) {
            return x;
        }
        return findRepresentative(element)[minSymbol];
    }
    isMinElement(x) {
        var y = this.get(x);
        return y === x || __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_uint64__["a" /* Uint64 */].equal(y, x);
    }
    makeSet(x) {
        var key = x.toString();
        var map = this.map;

        var element = map.get(key);
        if (element === undefined) {
            element = x.clone();
            initializeElement(element);
            element[minSymbol] = element;
            map.set(key, element);
            return element;
        }
        return findRepresentative(element);
    }
    link(a, b) {
        a = this.makeSet(a);
        b = this.makeSet(b);
        if (a === b) {
            return false;
        }
        this.generation++;
        var newNode = linkUnequalSetRepresentatives(a, b);
        spliceCircularLists(a, b);
        var aMin = a[minSymbol];
        var bMin = b[minSymbol];
        newNode[minSymbol] = __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_uint64__["a" /* Uint64 */].less(aMin, bMin) ? aMin : bMin;
        return true;
    }
    *setElements(a) {
        var key = a.toString();
        var element = this.map.get(key);
        if (element === undefined) {
            yield a;
        } else {
            yield* setElementIterator(element);
        }
    }
    clear() {
        var map = this.map;

        if (map.size === 0) {
            return false;
        }
        ++this.generation;
        map.clear();
        return true;
    }
    get size() {
        return this.map.size;
    }
    *mappings() {
        var temp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Array(2);

        for (var element of this.map.values()) {
            temp[0] = element;
            temp[1] = findRepresentative(element)[minSymbol];
            yield temp;
        }
    }
    [Symbol.iterator]() {
        return this.mappings();
    }
    /**
     * Returns an array of arrays of strings, where the arrays contained in the outer array correspond
     * to the disjoint sets, and the strings are the base-10 string representations of the members of
     * each set.  The members are sorted in numerical order, and the sets are sorted in numerical
     * order of their smallest elements.
     */
    toJSON() {
        var sets = new Array();
        for (var element of this.map.values()) {
            if (isRootElement(element)) {
                var members = new Array();
                for (var member of setElementIterator(element)) {
                    members.push(member);
                }
                members.sort(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_uint64__["a" /* Uint64 */].compare);
                sets.push(members);
            }
        }
        sets.sort((a, b) => __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_uint64__["a" /* Uint64 */].compare(a[0], b[0]));
        return sets.map(set => set.map(element => element.toString()));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DisjointUint64Sets;


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Uint64Set */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_gpu_hash_hash_table__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_signal__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var Uint64Set = Uint64Set_1 = class Uint64Set extends __WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc__["c" /* SharedObjectCounterpart */] {
    constructor() {
        super(...arguments);
        this.hashTable = new __WEBPACK_IMPORTED_MODULE_0_neuroglancer_gpu_hash_hash_table__["a" /* HashSetUint64 */]();
        this.changed = new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_signal__["b" /* Signal */]();
    }
    static makeWithCounterpart(rpc) {
        var obj = new Uint64Set_1();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    disposed() {
        super.disposed();
        this.hashTable = undefined;
        this.changed = undefined;
    }
    add_(x) {
        return this.hashTable.add(x);
    }
    add(x) {
        if (this.add_(x)) {
            var rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.add', { 'id': this.rpcId, 'value': x });
            }
            this.changed.dispatch(x, true);
        }
    }
    has(x) {
        return this.hashTable.has(x);
    }
    [Symbol.iterator]() {
        return this.hashTable.keys();
    }
    delete_(x) {
        return this.hashTable.delete(x);
    }
    delete(x) {
        if (this.delete_(x)) {
            var rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.delete', { 'id': this.rpcId, 'value': x });
            }
            this.changed.dispatch(x, false);
        }
    }
    get size() {
        return this.hashTable.size;
    }
    clear() {
        if (this.hashTable.clear()) {
            var rpc = this.rpc;

            if (rpc) {
                rpc.invoke('Uint64Set.clear', { 'id': this.rpcId });
            }
            this.changed.dispatch(null, false);
        }
    }
    toJSON() {
        var result = new Array();
        for (var id of this) {
            result.push(id.toString());
        }
        return result;
    }
};
Uint64Set = Uint64Set_1 = __decorate([Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc__["g" /* registerSharedObject */])('Uint64Set')], Uint64Set);

Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc__["f" /* registerRPC */])('Uint64Set.add', function (x) {
    var obj = this.get(x['id']);
    if (obj.add_(x['value'])) {
        obj.changed.dispatch();
    }
});
Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc__["f" /* registerRPC */])('Uint64Set.delete', function (x) {
    var obj = this.get(x['id']);
    if (obj.delete_(x['value'])) {
        obj.changed.dispatch();
    }
});
Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_worker_rpc__["f" /* registerRPC */])('Uint64Set.clear', function (x) {
    var obj = this.get(x['id']);
    if (obj.hashTable.clear()) {
        obj.changed.dispatch();
    }
});
var Uint64Set_1;

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export NUM_ALTERNATIVES */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_gpu_hash_hash_function__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__ = __webpack_require__(6);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var NUM_ALTERNATIVES = 3;
var DEFAULT_LOAD_FACTOR = 0.9;
var DEBUG = false;
// Key that needs to be inserted.  Temporary variables used during insert.  These can safely be
// global because control never leaves functions defined in this module while these are in use.
var pendingLow = 0,
    pendingHigh = 0,
    backupPendingLow = 0,
    backupPendingHigh = 0;
class HashTableBase {
    constructor() {
        var hashFunctions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HashTableBase.generateHashFunctions(NUM_ALTERNATIVES);

        this.loadFactor = DEFAULT_LOAD_FACTOR;
        this.size = 0;
        this.growFactor = 1.2;
        this.maxHeight = 8192;
        this.emptyLow = 4294967295;
        this.emptyHigh = 4294967295;
        this.maxRehashAttempts = 5;
        this.maxAttempts = 5;
        this.maxWidth = 4096 / this.entryStride;
        this.generation = 0;
        this.mungedEmptyKey = -1;
        this.hashFunctions = hashFunctions;
        this.allocate(4, 1);
    }
    updateHashFunctions(numHashes) {
        this.hashFunctions = HashTableBase.generateHashFunctions(numHashes);
        this.mungedEmptyKey = -1;
    }
    /**
     * Invokes callback with a modified version of the hash table data array.
     *
     * Replaces all slots that appear to be valid entries for (emptyLow, emptyHigh), i.e. slots that
     * contain (emptyLow, emptyHigh) and to which (emptyLow, emptyHigh) hashes, with (mungedEmptyKey,
     * mungedEmptyKey).
     *
     * mungedEmptyKey is chosen to be a 32-bit value with the property that the 64-bit value
     * (mungedEmptyKey, mungedEmptyKey) does not hash to any of the same slots as (emptyLow,
     * emptyHigh).
     *
     * This allows the modified data array to be used for lookups without special casing the empty
     * key.
     */
    tableWithMungedEmptyKey(callback) {
        var numHashes = this.hashFunctions.length;
        var emptySlots = new Array(numHashes);
        for (var i = 0; i < numHashes; ++i) {
            emptySlots[i] = this.getHash(i, this.emptyLow, this.emptyHigh);
        }
        var mungedEmptyKey = this.mungedEmptyKey;

        if (mungedEmptyKey === -1) {
            chooseMungedEmptyKey: while (true) {
                mungedEmptyKey = Math.random() * 0x1000000 >>> 0;
                for (var _i = 0; _i < numHashes; ++_i) {
                    var h = this.getHash(_i, mungedEmptyKey, mungedEmptyKey);
                    for (var j = 0; j < numHashes; ++j) {
                        if (emptySlots[j] === h) {
                            continue chooseMungedEmptyKey;
                        }
                    }
                }
                this.mungedEmptyKey = mungedEmptyKey;
                break;
            }
        }
        var table = this.table,
            emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh;

        for (var _i2 = 0; _i2 < numHashes; ++_i2) {
            var _h = emptySlots[_i2];
            if (table[_h] === emptyLow && table[_h + 1] === emptyHigh) {
                table[_h] = mungedEmptyKey;
                table[_h + 1] = mungedEmptyKey;
            }
        }
        try {
            callback(table);
        } finally {
            for (var _i3 = 0; _i3 < numHashes; ++_i3) {
                var _h2 = emptySlots[_i3];
                if (table[_h2] === mungedEmptyKey && table[_h2 + 1] === mungedEmptyKey) {
                    table[_h2] = emptyLow;
                    table[_h2 + 1] = emptyHigh;
                }
            }
        }
    }
    static generateHashFunctions() {
        var numAlternatives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NUM_ALTERNATIVES;

        var hashFunctions = [];
        for (var alt = 0; alt < numAlternatives; ++alt) {
            var curFunctions = [__WEBPACK_IMPORTED_MODULE_0_neuroglancer_gpu_hash_hash_function__["a" /* HashFunction */].generate(), __WEBPACK_IMPORTED_MODULE_0_neuroglancer_gpu_hash_hash_function__["a" /* HashFunction */].generate()];
            hashFunctions.push(curFunctions);
        }
        return hashFunctions;
    }
    getHash(hashIndex, low, high) {
        var hashes = this.hashFunctions[hashIndex];
        var width = this.width,
            height = this.height;
        var x = hashes[0].compute(low, high) % width;
        var y = hashes[1].compute(low, high) % height;
        return this.entryStride * (y * this.width + x);
    }
    /**
     * Iterates over the Uint64 keys contained in the hash set.
     *
     * The same temp value will be modified and yielded at every iteration.
     */
    *keys() {
        var temp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */]();
        var emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh,
            entryStride = this.entryStride;
        var table = this.table;

        for (var i = 0, length = table.length; i < length; i += entryStride) {
            var low = table[i],
                high = table[i + 1];
            if (low !== emptyLow || high !== emptyHigh) {
                temp.low = low;
                temp.high = high;
                yield temp;
            }
        }
    }
    indexOfPair(low, high) {
        var table = this.table,
            emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh;

        if (low === emptyLow && high === emptyHigh) {
            return -1;
        }
        for (var i = 0, numHashes = this.hashFunctions.length; i < numHashes; ++i) {
            var h = this.getHash(i, low, high);
            if (table[h] === low && table[h + 1] === high) {
                return h;
            }
        }
        return -1;
    }
    /**
     * Returns the offset into the hash table of the specified element, or -1 if the element is not
     * present.
     */
    indexOf(x) {
        return this.indexOfPair(x.low, x.high);
    }
    /**
     * Changes the empty key to a value that is not equal to the current empty key and is not present
     * in the table.
     *
     * This is called when an attempt is made to insert the empty key.
     */
    chooseAnotherEmptyKey() {
        var emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh,
            table = this.table,
            entryStride = this.entryStride;

        var newLow = void 0,
            newHigh = void 0;
        while (true) {
            newLow = Math.random() * 0x100000000 >>> 0;
            newHigh = Math.random() * 0x100000000 >>> 0;
            if (newLow === emptyLow && newHigh === emptyHigh) {
                continue;
            }
            if (this.hasPair(newLow, newHigh)) {
                continue;
            }
            break;
        }
        this.emptyLow = newLow;
        this.emptyHigh = newHigh;
        // Replace empty keys in the table.
        for (var h = 0, length = table.length; h < length; h += entryStride) {
            if (table[h] === emptyLow && table[h + 1] === emptyHigh) {
                table[h] = newLow;
                table[h + 1] = newHigh;
            }
        }
    }
    /**
     * Returns true iff the specified element is present.
     */
    has(x) {
        return this.indexOf(x) !== -1;
    }
    /**
     * Returns true iff the specified element is present.
     */
    hasPair(low, high) {
        return this.indexOfPair(low, high) !== -1;
    }
    delete(x) {
        var index = this.indexOf(x);
        if (index !== -1) {
            var table = this.table;

            table[index] = this.emptyLow;
            table[index + 1] = this.emptyHigh;
            ++this.generation;
            this.size--;
            return true;
        }
        return false;
    }
    clearTable() {
        var table = this.table,
            entryStride = this.entryStride,
            emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh;

        var length = table.length;
        for (var h = 0; h < length; h += entryStride) {
            table[h] = emptyLow;
            table[h + 1] = emptyHigh;
        }
    }
    clear() {
        if (this.size === 0) {
            return false;
        }
        this.size = 0;
        ++this.generation;
        this.clearTable();
        return true;
    }
    swapPending(table, offset) {
        var tempLow = pendingLow,
            tempHigh = pendingHigh;
        this.storePending(table, offset);
        table[offset] = tempLow;
        table[offset + 1] = tempHigh;
    }
    storePending(table, offset) {
        pendingLow = table[offset];
        pendingHigh = table[offset + 1];
    }
    backupPending() {
        backupPendingLow = pendingLow;
        backupPendingHigh = pendingHigh;
    }
    restorePending() {
        pendingLow = backupPendingLow;
        pendingHigh = backupPendingHigh;
    }
    tryToInsert() {
        if (DEBUG) {
            console.log(`tryToInsert: ${pendingLow}, ${pendingHigh}`);
        }
        var attempt = 0;
        var emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh,
            maxAttempts = this.maxAttempts,
            table = this.table;

        var numHashes = this.hashFunctions.length;
        var tableIndex = Math.floor(Math.random() * numHashes);
        while (true) {
            var h = this.getHash(tableIndex, pendingLow, pendingHigh);
            this.swapPending(table, h);
            if (pendingLow === emptyLow && pendingHigh === emptyHigh) {
                return true;
            }
            if (++attempt === maxAttempts) {
                break;
            }
            tableIndex = (tableIndex + Math.floor(Math.random() * (numHashes - 1)) + 1) % numHashes;
        }
        return false;
    }
    allocate(width, height) {
        var tableSize = width * height;
        this.width = width;
        this.height = height;
        var entryStride = this.entryStride;

        this.table = new Uint32Array(tableSize * entryStride);
        this.maxAttempts = tableSize;
        this.clearTable();
        this.capacity = tableSize * this.loadFactor;
        this.mungedEmptyKey = -1;
    }
    rehash(oldTable, width, height) {
        if (DEBUG) {
            console.log('rehash begin');
        }
        this.allocate(width, height);
        this.updateHashFunctions(this.hashFunctions.length);
        var emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh,
            entryStride = this.entryStride;

        for (var h = 0, length = oldTable.length; h < length; h += entryStride) {
            var low = oldTable[h],
                high = oldTable[h + 1];
            if (low !== emptyLow || high !== emptyHigh) {
                this.storePending(oldTable, h);
                if (!this.tryToInsert()) {
                    if (DEBUG) {
                        console.log('rehash failed');
                    }
                    return false;
                }
            }
        }
        if (DEBUG) {
            console.log('rehash end');
        }
        return true;
    }
    grow(desiredTableSize) {
        if (DEBUG) {
            console.log(`grow: ${desiredTableSize}`);
        }
        var oldTable = this.table;
        var width = this.width,
            height = this.height,
            maxWidth = this.maxWidth,
            maxHeight = this.maxHeight;

        while (true) {
            var origTableSize = width * height;
            width = Math.min(maxWidth, Math.ceil(desiredTableSize / this.height));
            if (width * height < desiredTableSize) {
                height = Math.min(maxHeight, Math.ceil(desiredTableSize / width));
            }
            var tableSize = width * height;
            if (tableSize < desiredTableSize && tableSize === origTableSize) {
                throw new Error('Maximum table size exceeded');
            }
            for (var rehashAttempt = 0; rehashAttempt < this.maxRehashAttempts; ++rehashAttempt) {
                if (this.rehash(oldTable, width, height)) {
                    if (DEBUG) {
                        console.log(`grow end`);
                    }
                    return;
                }
            }
            desiredTableSize = Math.ceil(this.growFactor * desiredTableSize);
        }
    }
    insertInternal() {
        ++this.generation;
        if (pendingLow === this.emptyLow && pendingHigh === this.emptyHigh) {
            this.chooseAnotherEmptyKey();
        }
        if (++this.size > this.capacity) {
            this.backupPending();
            this.grow(Math.ceil(this.growFactor * this.width * this.height));
            this.restorePending();
        }
        while (!this.tryToInsert()) {
            this.backupPending();
            this.grow(this.width * this.height);
            this.restorePending();
        }
    }
}
/* unused harmony export HashTableBase */

class HashSetUint64 extends HashTableBase {
    add(x) {
        var low = x.low,
            high = x.high;

        if (this.hasPair(low, high)) {
            return false;
        }
        if (DEBUG) {
            console.log(`add: ${low},${high}`);
        }
        pendingLow = low;
        pendingHigh = high;
        this.insertInternal();
        return true;
    }
    /**
     * Iterates over the keys.  The same temporary value will be modified and yielded at every
     * iteration.
     */
    [Symbol.iterator]() {
        return this.keys();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HashSetUint64;

HashSetUint64.prototype.entryStride = 2;
// Value that needs to be inserted.  Temporary variables used during insert.  These can safely be
// global because control never leaves functions defined in this module while these are in use.
var pendingValueLow = 0,
    pendingValueHigh = 0,
    backupPendingValueLow = 0,
    backupPendingValueHigh = 0;
class HashMapUint64 extends HashTableBase {
    set(key, value) {
        var low = key.low,
            high = key.high;

        if (this.hasPair(low, high)) {
            return false;
        }
        if (DEBUG) {
            console.log(`add: ${low},${high} -> ${value.low},${value.high}`);
        }
        pendingLow = low;
        pendingHigh = high;
        pendingValueLow = value.low;
        pendingValueHigh = value.high;
        this.insertInternal();
        return true;
    }
    get(key, value) {
        var h = this.indexOf(key);
        if (h === -1) {
            return false;
        }
        var table = this.table;

        value.low = table[h + 2];
        value.high = table[h + 3];
        return true;
    }
    swapPending(table, offset) {
        var tempLow = pendingValueLow,
            tempHigh = pendingValueHigh;
        super.swapPending(table, offset);
        table[offset + 2] = tempLow;
        table[offset + 3] = tempHigh;
    }
    storePending(table, offset) {
        super.storePending(table, offset);
        pendingValueLow = table[offset + 2];
        pendingValueHigh = table[offset + 3];
    }
    backupPending() {
        super.backupPending();
        backupPendingValueLow = pendingValueLow;
        backupPendingValueHigh = pendingValueHigh;
    }
    restorePending() {
        super.restorePending();
        pendingValueLow = backupPendingValueLow;
        pendingValueHigh = backupPendingValueHigh;
    }
    /**
     * Iterates over entries.  The same temporary value will be modified and yielded at every
     * iteration.
     */
    [Symbol.iterator]() {
        return this.entries();
    }
    /**
     * Iterates over entries.  The same temporary value will be modified and yielded at every
     * iteration.
     */
    *entries() {
        var temp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */](), new __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_uint64__["a" /* Uint64 */]()];
        var emptyLow = this.emptyLow,
            emptyHigh = this.emptyHigh,
            entryStride = this.entryStride;
        var table = this.table;

        var _temp = _slicedToArray(temp, 2),
            key = _temp[0],
            value = _temp[1];

        for (var i = 0, length = table.length; i < length; i += entryStride) {
            var low = table[i],
                high = table[i + 1];
            if (low !== emptyLow || high !== emptyHigh) {
                key.low = low;
                key.high = high;
                value.low = table[i + 2];
                value.high = table[i + 3];
                yield temp;
            }
        }
    }
}
/* unused harmony export HashMapUint64 */

HashMapUint64.prototype.entryStride = 4;

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export PRIME_MODULUS */
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PRIME_MODULUS = 4093;
class HashFunction {
    constructor(a0, a1, b, c) {
        this.a0 = a0;
        this.a1 = a1;
        this.b = b;
        this.c = c;
    }
    computeDotProduct(low, high) {
        var a0 = this.a0,
            a1 = this.a1;

        var a0DotLow = a0[0] * (low & 0xFF) + a0[1] * (low >> 8 & 0xFF) + a0[2] * (low >> 16 & 0xFF) + a0[3] * (low >> 24 & 0xFF);
        var a1DotHigh = a1[0] * (high & 0xFF) + a1[1] * (high >> 8 & 0xFF) + a1[2] * (high >> 16 & 0xFF) + a1[3] * (high >> 24 & 0xFF);
        return a0DotLow + a1DotHigh;
    }
    compute(low, high) {
        var b = this.b,
            c = this.c;

        var x = this.computeDotProduct(low, high);
        var x2 = x * x % PRIME_MODULUS;
        var result = (x + x2 * c + b) % PRIME_MODULUS;
        return result;
    }
    toString() {
        return `new HashFunction(Float32Array.of(${this.a0}), ` + `Float32Array.of(${this.a1}), ${this.b}, ${this.c})`;
    }
    static generate() {
        function genCoeff() {
            return Math.floor(Math.random() * PRIME_MODULUS);
        }
        function genVector() {
            return Float32Array.of(genCoeff(), genCoeff(), genCoeff(), genCoeff());
        }
        return new HashFunction(genVector(), genVector(), genCoeff(), genCoeff());
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HashFunction;


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SKELETON_LAYER_RPC_ID; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SKELETON_LAYER_RPC_ID = 'skeleton/SkeletonLayer';

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export encodeBlock */
/* unused harmony export encodeChannel */
/* harmony export (immutable) */ __webpack_exports__["a"] = encodeChannels;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__ = __webpack_require__(19);
/* unused harmony reexport newCache */
// DO NOT EDIT.  Generated from
// templates/neuroglancer/sliceview/compressed_segmentation/encode.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Support for compressing uint32/uint64 segment label chunks.
 */



var tempEncodingBuffer = void 0;
var tempValuesBuffer1 = void 0;
var tempValuesBuffer2 = void 0;
var tempIndexBuffer1 = void 0;
var tempIndexBuffer2 = void 0;
var uint32sPerElement = 1;
function encodeBlock(rawData, inputOffset, inputStrides, blockSize, actualSize, baseOffset, cache, output) {
    var ax = actualSize[0],
        ay = actualSize[1],
        az = actualSize[2];
    var bx = blockSize[0],
        by = blockSize[1],
        bz = blockSize[2];
    var sx = inputStrides[0],
        sy = inputStrides[1],
        sz = inputStrides[2];
    sz -= sy * ay;
    sy -= sx * ax;
    if (ax * ay * az === 0) {
        return [0, 0];
    }
    var numBlockElements = bx * by * bz + 31; // Add padding elements.
    if (tempEncodingBuffer === undefined || tempEncodingBuffer.length < numBlockElements) {
        tempEncodingBuffer = new Uint32Array(numBlockElements);
        tempValuesBuffer1 = new Uint32Array(numBlockElements * uint32sPerElement);
        tempValuesBuffer2 = new Uint32Array(numBlockElements * uint32sPerElement);
        tempIndexBuffer1 = new Uint32Array(numBlockElements);
        tempIndexBuffer2 = new Uint32Array(numBlockElements);
    }
    var encodingBuffer = tempEncodingBuffer.subarray(0, numBlockElements);
    encodingBuffer.fill(0);
    var valuesBuffer1 = tempValuesBuffer1;
    var valuesBuffer2 = tempValuesBuffer2;
    var indexBuffer1 = tempIndexBuffer1;
    var indexBuffer2 = tempIndexBuffer2;
    var noAdjacentDuplicateIndex = 0;
    {
        var prevLow = rawData[inputOffset] + 1 >>> 0;
        var curInputOff = inputOffset;
        var blockElementIndex = 0;
        var bsy = bx - ax;
        var bsz = bx * by - bx * ay;
        for (var z = 0; z < az; ++z, curInputOff += sz, blockElementIndex += bsz) {
            for (var y = 0; y < ay; ++y, curInputOff += sy, blockElementIndex += bsy) {
                for (var x = 0; x < ax; ++x, curInputOff += sx) {
                    var valueLow = rawData[curInputOff];
                    if (valueLow !== prevLow) {
                        prevLow = valuesBuffer1[noAdjacentDuplicateIndex * 1] = valueLow;
                        indexBuffer1[noAdjacentDuplicateIndex] = noAdjacentDuplicateIndex++;
                    }
                    encodingBuffer[blockElementIndex++] = noAdjacentDuplicateIndex;
                }
            }
        }
    }
    indexBuffer1.subarray(0, noAdjacentDuplicateIndex).sort((a, b) => {
        return valuesBuffer1[a] - valuesBuffer1[b];
    });
    var numUniqueValues = -1;
    {
        var _prevLow = valuesBuffer1[indexBuffer1[0] * uint32sPerElement] + 1 >>> 0;
        for (var i = 0; i < noAdjacentDuplicateIndex; ++i) {
            var index = indexBuffer1[i];
            var valueIndex = index * uint32sPerElement;
            var _valueLow = valuesBuffer1[valueIndex];
            if (_valueLow !== _prevLow) {
                ++numUniqueValues;
                var outputIndex2 = numUniqueValues * uint32sPerElement;
                _prevLow = valuesBuffer2[outputIndex2] = _valueLow;
            }
            indexBuffer2[index + 1] = numUniqueValues;
        }
        ++numUniqueValues;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__["c" /* writeBlock */])(output, baseOffset, cache, bx * by * bz, numUniqueValues, valuesBuffer2, encodingBuffer, indexBuffer2, uint32sPerElement);
}
function encodeChannel(output, blockSize, rawData, volumeSize) {
    var baseInputOffset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var inputStrides = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__["a" /* getFortranOrderStrides */])(volumeSize, 1);

    return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__["a" /* encodeChannel */])(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);
}
function encodeChannels(output, blockSize, rawData, volumeSize) {
    var baseInputOffset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var inputStrides = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__["a" /* getFortranOrderStrides */])(volumeSize, 1);

    return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__["b" /* encodeChannels */])(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);
}

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export encodeBlock */
/* unused harmony export encodeChannel */
/* harmony export (immutable) */ __webpack_exports__["a"] = encodeChannels;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__ = __webpack_require__(19);
/* unused harmony reexport newCache */
// DO NOT EDIT.  Generated from
// templates/neuroglancer/sliceview/compressed_segmentation/encode.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Support for compressing uint32/uint64 segment label chunks.
 */



var tempEncodingBuffer = void 0;
var tempValuesBuffer1 = void 0;
var tempValuesBuffer2 = void 0;
var tempIndexBuffer1 = void 0;
var tempIndexBuffer2 = void 0;
var uint32sPerElement = 2;
function encodeBlock(rawData, inputOffset, inputStrides, blockSize, actualSize, baseOffset, cache, output) {
    var ax = actualSize[0],
        ay = actualSize[1],
        az = actualSize[2];
    var bx = blockSize[0],
        by = blockSize[1],
        bz = blockSize[2];
    var sx = inputStrides[0],
        sy = inputStrides[1],
        sz = inputStrides[2];
    sz -= sy * ay;
    sy -= sx * ax;
    if (ax * ay * az === 0) {
        return [0, 0];
    }
    var numBlockElements = bx * by * bz + 31; // Add padding elements.
    if (tempEncodingBuffer === undefined || tempEncodingBuffer.length < numBlockElements) {
        tempEncodingBuffer = new Uint32Array(numBlockElements);
        tempValuesBuffer1 = new Uint32Array(numBlockElements * uint32sPerElement);
        tempValuesBuffer2 = new Uint32Array(numBlockElements * uint32sPerElement);
        tempIndexBuffer1 = new Uint32Array(numBlockElements);
        tempIndexBuffer2 = new Uint32Array(numBlockElements);
    }
    var encodingBuffer = tempEncodingBuffer.subarray(0, numBlockElements);
    encodingBuffer.fill(0);
    var valuesBuffer1 = tempValuesBuffer1;
    var valuesBuffer2 = tempValuesBuffer2;
    var indexBuffer1 = tempIndexBuffer1;
    var indexBuffer2 = tempIndexBuffer2;
    var noAdjacentDuplicateIndex = 0;
    {
        var prevLow = rawData[inputOffset] + 1 >>> 0;
        var prevHigh = 0;
        var curInputOff = inputOffset;
        var blockElementIndex = 0;
        var bsy = bx - ax;
        var bsz = bx * by - bx * ay;
        for (var z = 0; z < az; ++z, curInputOff += sz, blockElementIndex += bsz) {
            for (var y = 0; y < ay; ++y, curInputOff += sy, blockElementIndex += bsy) {
                for (var x = 0; x < ax; ++x, curInputOff += sx) {
                    var valueLow = rawData[curInputOff];
                    var valueHigh = rawData[curInputOff + 1];
                    if (valueLow !== prevLow || valueHigh !== prevHigh) {
                        prevLow = valuesBuffer1[noAdjacentDuplicateIndex * 2] = valueLow;
                        prevHigh = valuesBuffer1[noAdjacentDuplicateIndex * 2 + 1] = valueHigh;
                        indexBuffer1[noAdjacentDuplicateIndex] = noAdjacentDuplicateIndex++;
                    }
                    encodingBuffer[blockElementIndex++] = noAdjacentDuplicateIndex;
                }
            }
        }
    }
    indexBuffer1.subarray(0, noAdjacentDuplicateIndex).sort((a, b) => {
        var aHigh = valuesBuffer1[2 * a + 1];
        var bHigh = valuesBuffer1[2 * b + 1];
        var aLow = valuesBuffer1[2 * a];
        var bLow = valuesBuffer1[2 * b];
        return aHigh - bHigh || aLow - bLow;
    });
    var numUniqueValues = -1;
    {
        var _prevLow = valuesBuffer1[indexBuffer1[0] * uint32sPerElement] + 1 >>> 0;
        var _prevHigh = 0;
        for (var i = 0; i < noAdjacentDuplicateIndex; ++i) {
            var index = indexBuffer1[i];
            var valueIndex = index * uint32sPerElement;
            var _valueLow = valuesBuffer1[valueIndex];
            var _valueHigh = valuesBuffer1[valueIndex + 1];
            if (_valueLow !== _prevLow || _valueHigh !== _prevHigh) {
                ++numUniqueValues;
                var outputIndex2 = numUniqueValues * uint32sPerElement;
                _prevLow = valuesBuffer2[outputIndex2] = _valueLow;
                _prevHigh = valuesBuffer2[outputIndex2 + 1] = _valueHigh;
            }
            indexBuffer2[index + 1] = numUniqueValues;
        }
        ++numUniqueValues;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__["c" /* writeBlock */])(output, baseOffset, cache, bx * by * bz, numUniqueValues, valuesBuffer2, encodingBuffer, indexBuffer2, uint32sPerElement);
}
function encodeChannel(output, blockSize, rawData, volumeSize) {
    var baseInputOffset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var inputStrides = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__["a" /* getFortranOrderStrides */])(volumeSize, 2);

    return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__["a" /* encodeChannel */])(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);
}
function encodeChannels(output, blockSize, rawData, volumeSize) {
    var baseInputOffset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var inputStrides = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__["a" /* getFortranOrderStrides */])(volumeSize, 2);

    return Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_compressed_segmentation_encode_common__["b" /* encodeChannels */])(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);
}

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// DO NOT EDIT.  Generated from templates/neuroglancer/util/typedarray_builder.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Uint32ArrayBuilder {
    constructor() {
        var initialCapacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;

        this.length = 0;
        this.data = new Uint32Array(initialCapacity);
    }
    resize(newLength) {
        var data = this.data;

        if (newLength > data.length) {
            var newData = new Uint32Array(Math.max(newLength, data.length * 2));
            newData.set(data.subarray(0, this.length));
            this.data = newData;
        }
        this.length = newLength;
    }
    get view() {
        var data = this.data;

        return new Uint32Array(data.buffer, data.byteOffset, this.length);
    }
    shrinkToFit() {
        this.data = new Uint32Array(this.view);
    }
    clear() {
        this.length = 0;
    }
    appendArray(other) {
        var length = this.length;

        this.resize(length + other.length);
        this.data.set(other, length);
    }
    eraseRange(start, end) {
        this.data.copyWithin(start, end, this.length);
        this.length -= end - start;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Uint32ArrayBuilder;


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = decodeJpegStack;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jpgjs__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jpgjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jpgjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__ = __webpack_require__(1);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



function decodeJpegStack(data, chunkDataSize, numComponents) {
    var parser = new __WEBPACK_IMPORTED_MODULE_0_jpgjs__["JpegDecoder"]();
    parser.parse(data);
    // Just check that the total number pixels matches the expected value.
    if (parser.width * parser.height !== chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2]) {
        throw new Error(`JPEG data does not have the expected dimensions: ` + `width=${parser.width}, height=${parser.height}, ` + `chunkDataSize=${__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["l" /* vec3 */].str(chunkDataSize)}`);
    }
    if (parser.numComponents !== numComponents) {
        throw new Error(`JPEG data does not have the expected number of components: ` + `components=${parser.numComponents}, expected=${numComponents}`);
    }
    if (parser.numComponents === 1) {
        return parser.getData(parser.width, parser.height, /*forceRGBOutput=*/false);
    } else if (parser.numComponents === 3) {
        var output = parser.getData(parser.width, parser.height, /*forceRGBOutput=*/false);
        return Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_array__["c" /* transposeArray2d */])(output, parser.width * parser.height, 3);
    } else {
        throw new Error(`JPEG data has an unsupported number of components: components=${parser.numComponents}`);
    }
}

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @license
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function loadURLasArrayBuffer(path, callback) {
    if (path.indexOf("data:") === 0) {
        var offset = path.indexOf("base64,") + 7;
        var data = atob(path.substring(offset));
        var arr = new Uint8Array(data.length);
        for (var i = data.length - 1; i >= 0; i--) {
            arr[i] = data.charCodeAt(i);
        }
        callback(arr.buffer);
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.open("GET", path, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = function() {
        callback(xhr.response);
    };
    xhr.send(null);
}

var JpegImage = function jpegImage() {
    function JpegImage() {
        this._src = null;
        this._parser = new PDFJS.JpegImage();
        this.onload = null;
    }
    JpegImage.prototype = {
        get src() {
            return this._src;
        },
        set src(value) {
            this.load(value);
        },
        get width() {
            return this._parser.width;
        },
        get height() {
            return this._parser.height;
        },
        load: function load(path) {
            this._src = path;
            loadURLasArrayBuffer(path, function(buffer) {
                this.parse(new Uint8Array(buffer));
                if (this.onload) {
                    this.onload();
                }
            }.bind(this));
        },
        parse: function(data) {
            this._parser.parse(data);
        },
        getData: function(width, height) {
            return this._parser.getData(width, height, false);
        },
        copyToImageData: function copyToImageData(imageData) {
            if (this._parser.numComponents === 2 || this._parser.numComponents > 4) {
                throw new Error("Unsupported amount of components");
            }
            var width = imageData.width, height = imageData.height;
            var imageDataBytes = width * height * 4;
            var imageDataArray = imageData.data;
            var i, j;
            if (this._parser.numComponents === 1) {
                var values = this._parser.getData(width, height, false);
                for (i = 0, j = 0; i < imageDataBytes; ) {
                    var value = values[j++];
                    imageDataArray[i++] = value;
                    imageDataArray[i++] = value;
                    imageDataArray[i++] = value;
                    imageDataArray[i++] = 255;
                }
                return;
            }
            var rgb = this._parser.getData(width, height, true);
            for (i = 0, j = 0; i < imageDataBytes; ) {
                imageDataArray[i++] = rgb[j++];
                imageDataArray[i++] = rgb[j++];
                imageDataArray[i++] = rgb[j++];
                imageDataArray[i++] = 255;
            }
        }
    };
    return JpegImage;
}();

var PDFJS;

(function(PDFJS) {
    "use strict";
    var JpegImage = function jpegImage() {
        var dctZigZag = new Uint8Array([ 0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63 ]);
        var dctCos1 = 4017;
        var dctSin1 = 799;
        var dctCos3 = 3406;
        var dctSin3 = 2276;
        var dctCos6 = 1567;
        var dctSin6 = 3784;
        var dctSqrt2 = 5793;
        var dctSqrt1d2 = 2896;
        function constructor() {}
        function buildHuffmanTable(codeLengths, values) {
            var k = 0, code = [], i, j, length = 16;
            while (length > 0 && !codeLengths[length - 1]) {
                length--;
            }
            code.push({
                children: [],
                index: 0
            });
            var p = code[0], q;
            for (i = 0; i < length; i++) {
                for (j = 0; j < codeLengths[i]; j++) {
                    p = code.pop();
                    p.children[p.index] = values[k];
                    while (p.index > 0) {
                        p = code.pop();
                    }
                    p.index++;
                    code.push(p);
                    while (code.length <= i) {
                        code.push(q = {
                            children: [],
                            index: 0
                        });
                        p.children[p.index] = q.children;
                        p = q;
                    }
                    k++;
                }
                if (i + 1 < length) {
                    code.push(q = {
                        children: [],
                        index: 0
                    });
                    p.children[p.index] = q.children;
                    p = q;
                }
            }
            return code[0].children;
        }
        function getBlockBufferOffset(component, row, col) {
            return 64 * ((component.blocksPerLine + 1) * row + col);
        }
        function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
            var precision = frame.precision;
            var samplesPerLine = frame.samplesPerLine;
            var scanLines = frame.scanLines;
            var mcusPerLine = frame.mcusPerLine;
            var progressive = frame.progressive;
            var maxH = frame.maxH, maxV = frame.maxV;
            var startOffset = offset, bitsData = 0, bitsCount = 0;
            function readBit() {
                if (bitsCount > 0) {
                    bitsCount--;
                    return bitsData >> bitsCount & 1;
                }
                bitsData = data[offset++];
                if (bitsData === 255) {
                    var nextByte = data[offset++];
                    if (nextByte) {
                        throw "unexpected marker: " + (bitsData << 8 | nextByte).toString(16);
                    }
                }
                bitsCount = 7;
                return bitsData >>> 7;
            }
            function decodeHuffman(tree) {
                var node = tree;
                while (true) {
                    node = node[readBit()];
                    if (typeof node === "number") {
                        return node;
                    }
                    if (typeof node !== "object") {
                        throw "invalid huffman sequence";
                    }
                }
            }
            function receive(length) {
                var n = 0;
                while (length > 0) {
                    n = n << 1 | readBit();
                    length--;
                }
                return n;
            }
            function receiveAndExtend(length) {
                if (length === 1) {
                    return readBit() === 1 ? 1 : -1;
                }
                var n = receive(length);
                if (n >= 1 << length - 1) {
                    return n;
                }
                return n + (-1 << length) + 1;
            }
            function decodeBaseline(component, offset) {
                var t = decodeHuffman(component.huffmanTableDC);
                var diff = t === 0 ? 0 : receiveAndExtend(t);
                component.blockData[offset] = component.pred += diff;
                var k = 1;
                while (k < 64) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15, r = rs >> 4;
                    if (s === 0) {
                        if (r < 15) {
                            break;
                        }
                        k += 16;
                        continue;
                    }
                    k += r;
                    var z = dctZigZag[k];
                    component.blockData[offset + z] = receiveAndExtend(s);
                    k++;
                }
            }
            function decodeDCFirst(component, offset) {
                var t = decodeHuffman(component.huffmanTableDC);
                var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
                component.blockData[offset] = component.pred += diff;
            }
            function decodeDCSuccessive(component, offset) {
                component.blockData[offset] |= readBit() << successive;
            }
            var eobrun = 0;
            function decodeACFirst(component, offset) {
                if (eobrun > 0) {
                    eobrun--;
                    return;
                }
                var k = spectralStart, e = spectralEnd;
                while (k <= e) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15, r = rs >> 4;
                    if (s === 0) {
                        if (r < 15) {
                            eobrun = receive(r) + (1 << r) - 1;
                            break;
                        }
                        k += 16;
                        continue;
                    }
                    k += r;
                    var z = dctZigZag[k];
                    component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);
                    k++;
                }
            }
            var successiveACState = 0, successiveACNextValue;
            function decodeACSuccessive(component, offset) {
                var k = spectralStart;
                var e = spectralEnd;
                var r = 0;
                var s;
                var rs;
                while (k <= e) {
                    var z = dctZigZag[k];
                    switch (successiveACState) {
                      case 0:
                        rs = decodeHuffman(component.huffmanTableAC);
                        s = rs & 15;
                        r = rs >> 4;
                        if (s === 0) {
                            if (r < 15) {
                                eobrun = receive(r) + (1 << r);
                                successiveACState = 4;
                            } else {
                                r = 16;
                                successiveACState = 1;
                            }
                        } else {
                            if (s !== 1) {
                                throw "invalid ACn encoding";
                            }
                            successiveACNextValue = receiveAndExtend(s);
                            successiveACState = r ? 2 : 3;
                        }
                        continue;

                      case 1:
                      case 2:
                        if (component.blockData[offset + z]) {
                            component.blockData[offset + z] += readBit() << successive;
                        } else {
                            r--;
                            if (r === 0) {
                                successiveACState = successiveACState === 2 ? 3 : 0;
                            }
                        }
                        break;

                      case 3:
                        if (component.blockData[offset + z]) {
                            component.blockData[offset + z] += readBit() << successive;
                        } else {
                            component.blockData[offset + z] = successiveACNextValue << successive;
                            successiveACState = 0;
                        }
                        break;

                      case 4:
                        if (component.blockData[offset + z]) {
                            component.blockData[offset + z] += readBit() << successive;
                        }
                        break;
                    }
                    k++;
                }
                if (successiveACState === 4) {
                    eobrun--;
                    if (eobrun === 0) {
                        successiveACState = 0;
                    }
                }
            }
            function decodeMcu(component, decode, mcu, row, col) {
                var mcuRow = mcu / mcusPerLine | 0;
                var mcuCol = mcu % mcusPerLine;
                var blockRow = mcuRow * component.v + row;
                var blockCol = mcuCol * component.h + col;
                var offset = getBlockBufferOffset(component, blockRow, blockCol);
                decode(component, offset);
            }
            function decodeBlock(component, decode, mcu) {
                var blockRow = mcu / component.blocksPerLine | 0;
                var blockCol = mcu % component.blocksPerLine;
                var offset = getBlockBufferOffset(component, blockRow, blockCol);
                decode(component, offset);
            }
            var componentsLength = components.length;
            var component, i, j, k, n;
            var decodeFn;
            if (progressive) {
                if (spectralStart === 0) {
                    decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
                } else {
                    decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
                }
            } else {
                decodeFn = decodeBaseline;
            }
            var mcu = 0, marker;
            var mcuExpected;
            if (componentsLength === 1) {
                mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
            } else {
                mcuExpected = mcusPerLine * frame.mcusPerColumn;
            }
            if (!resetInterval) {
                resetInterval = mcuExpected;
            }
            var h, v;
            while (mcu < mcuExpected) {
                for (i = 0; i < componentsLength; i++) {
                    components[i].pred = 0;
                }
                eobrun = 0;
                if (componentsLength === 1) {
                    component = components[0];
                    for (n = 0; n < resetInterval; n++) {
                        decodeBlock(component, decodeFn, mcu);
                        mcu++;
                    }
                } else {
                    for (n = 0; n < resetInterval; n++) {
                        for (i = 0; i < componentsLength; i++) {
                            component = components[i];
                            h = component.h;
                            v = component.v;
                            for (j = 0; j < v; j++) {
                                for (k = 0; k < h; k++) {
                                    decodeMcu(component, decodeFn, mcu, j, k);
                                }
                            }
                        }
                        mcu++;
                    }
                }
                bitsCount = 0;
                marker = data[offset] << 8 | data[offset + 1];
                if (marker <= 65280) {
                    throw "marker was not found";
                }
                if (marker >= 65488 && marker <= 65495) {
                    offset += 2;
                } else {
                    break;
                }
            }
            return offset - startOffset;
        }
        function quantizeAndInverse(component, blockBufferOffset, p) {
            var qt = component.quantizationTable, blockData = component.blockData;
            var v0, v1, v2, v3, v4, v5, v6, v7;
            var p0, p1, p2, p3, p4, p5, p6, p7;
            var t;
            for (var row = 0; row < 64; row += 8) {
                p0 = blockData[blockBufferOffset + row];
                p1 = blockData[blockBufferOffset + row + 1];
                p2 = blockData[blockBufferOffset + row + 2];
                p3 = blockData[blockBufferOffset + row + 3];
                p4 = blockData[blockBufferOffset + row + 4];
                p5 = blockData[blockBufferOffset + row + 5];
                p6 = blockData[blockBufferOffset + row + 6];
                p7 = blockData[blockBufferOffset + row + 7];
                p0 *= qt[row];
                if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
                    t = dctSqrt2 * p0 + 512 >> 10;
                    p[row] = t;
                    p[row + 1] = t;
                    p[row + 2] = t;
                    p[row + 3] = t;
                    p[row + 4] = t;
                    p[row + 5] = t;
                    p[row + 6] = t;
                    p[row + 7] = t;
                    continue;
                }
                p1 *= qt[row + 1];
                p2 *= qt[row + 2];
                p3 *= qt[row + 3];
                p4 *= qt[row + 4];
                p5 *= qt[row + 5];
                p6 *= qt[row + 6];
                p7 *= qt[row + 7];
                v0 = dctSqrt2 * p0 + 128 >> 8;
                v1 = dctSqrt2 * p4 + 128 >> 8;
                v2 = p2;
                v3 = p6;
                v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;
                v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;
                v5 = p3 << 4;
                v6 = p5 << 4;
                v0 = v0 + v1 + 1 >> 1;
                v1 = v0 - v1;
                t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
                v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
                v3 = t;
                v4 = v4 + v6 + 1 >> 1;
                v6 = v4 - v6;
                v7 = v7 + v5 + 1 >> 1;
                v5 = v7 - v5;
                v0 = v0 + v3 + 1 >> 1;
                v3 = v0 - v3;
                v1 = v1 + v2 + 1 >> 1;
                v2 = v1 - v2;
                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                v7 = t;
                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                v6 = t;
                p[row] = v0 + v7;
                p[row + 7] = v0 - v7;
                p[row + 1] = v1 + v6;
                p[row + 6] = v1 - v6;
                p[row + 2] = v2 + v5;
                p[row + 5] = v2 - v5;
                p[row + 3] = v3 + v4;
                p[row + 4] = v3 - v4;
            }
            for (var col = 0; col < 8; ++col) {
                p0 = p[col];
                p1 = p[col + 8];
                p2 = p[col + 16];
                p3 = p[col + 24];
                p4 = p[col + 32];
                p5 = p[col + 40];
                p6 = p[col + 48];
                p7 = p[col + 56];
                if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
                    t = dctSqrt2 * p0 + 8192 >> 14;
                    t = t < -2040 ? 0 : t >= 2024 ? 255 : t + 2056 >> 4;
                    blockData[blockBufferOffset + col] = t;
                    blockData[blockBufferOffset + col + 8] = t;
                    blockData[blockBufferOffset + col + 16] = t;
                    blockData[blockBufferOffset + col + 24] = t;
                    blockData[blockBufferOffset + col + 32] = t;
                    blockData[blockBufferOffset + col + 40] = t;
                    blockData[blockBufferOffset + col + 48] = t;
                    blockData[blockBufferOffset + col + 56] = t;
                    continue;
                }
                v0 = dctSqrt2 * p0 + 2048 >> 12;
                v1 = dctSqrt2 * p4 + 2048 >> 12;
                v2 = p2;
                v3 = p6;
                v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;
                v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;
                v5 = p3;
                v6 = p5;
                v0 = (v0 + v1 + 1 >> 1) + 4112;
                v1 = v0 - v1;
                t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
                v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
                v3 = t;
                v4 = v4 + v6 + 1 >> 1;
                v6 = v4 - v6;
                v7 = v7 + v5 + 1 >> 1;
                v5 = v7 - v5;
                v0 = v0 + v3 + 1 >> 1;
                v3 = v0 - v3;
                v1 = v1 + v2 + 1 >> 1;
                v2 = v1 - v2;
                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                v7 = t;
                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                v6 = t;
                p0 = v0 + v7;
                p7 = v0 - v7;
                p1 = v1 + v6;
                p6 = v1 - v6;
                p2 = v2 + v5;
                p5 = v2 - v5;
                p3 = v3 + v4;
                p4 = v3 - v4;
                p0 = p0 < 16 ? 0 : p0 >= 4080 ? 255 : p0 >> 4;
                p1 = p1 < 16 ? 0 : p1 >= 4080 ? 255 : p1 >> 4;
                p2 = p2 < 16 ? 0 : p2 >= 4080 ? 255 : p2 >> 4;
                p3 = p3 < 16 ? 0 : p3 >= 4080 ? 255 : p3 >> 4;
                p4 = p4 < 16 ? 0 : p4 >= 4080 ? 255 : p4 >> 4;
                p5 = p5 < 16 ? 0 : p5 >= 4080 ? 255 : p5 >> 4;
                p6 = p6 < 16 ? 0 : p6 >= 4080 ? 255 : p6 >> 4;
                p7 = p7 < 16 ? 0 : p7 >= 4080 ? 255 : p7 >> 4;
                blockData[blockBufferOffset + col] = p0;
                blockData[blockBufferOffset + col + 8] = p1;
                blockData[blockBufferOffset + col + 16] = p2;
                blockData[blockBufferOffset + col + 24] = p3;
                blockData[blockBufferOffset + col + 32] = p4;
                blockData[blockBufferOffset + col + 40] = p5;
                blockData[blockBufferOffset + col + 48] = p6;
                blockData[blockBufferOffset + col + 56] = p7;
            }
        }
        function buildComponentData(frame, component) {
            var blocksPerLine = component.blocksPerLine;
            var blocksPerColumn = component.blocksPerColumn;
            var computationBuffer = new Int16Array(64);
            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
                    var offset = getBlockBufferOffset(component, blockRow, blockCol);
                    quantizeAndInverse(component, offset, computationBuffer);
                }
            }
            return component.blockData;
        }
        function clamp0to255(a) {
            return a <= 0 ? 0 : a >= 255 ? 255 : a;
        }
        constructor.prototype = {
            parse: function parse(data) {
                function readUint16() {
                    var value = data[offset] << 8 | data[offset + 1];
                    offset += 2;
                    return value;
                }
                function readDataBlock() {
                    var length = readUint16();
                    var array = data.subarray(offset, offset + length - 2);
                    offset += array.length;
                    return array;
                }
                function prepareComponents(frame) {
                    var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
                    var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
                    for (var i = 0; i < frame.components.length; i++) {
                        component = frame.components[i];
                        var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);
                        var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);
                        var blocksPerLineForMcu = mcusPerLine * component.h;
                        var blocksPerColumnForMcu = mcusPerColumn * component.v;
                        var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
                        component.blockData = new Int16Array(blocksBufferSize);
                        component.blocksPerLine = blocksPerLine;
                        component.blocksPerColumn = blocksPerColumn;
                    }
                    frame.mcusPerLine = mcusPerLine;
                    frame.mcusPerColumn = mcusPerColumn;
                }
                var offset = 0, length = data.length;
                var jfif = null;
                var adobe = null;
                var pixels = null;
                var frame, resetInterval;
                var quantizationTables = [];
                var huffmanTablesAC = [], huffmanTablesDC = [];
                var fileMarker = readUint16();
                if (fileMarker !== 65496) {
                    throw "SOI not found";
                }
                fileMarker = readUint16();
                while (fileMarker !== 65497) {
                    var i, j, l;
                    switch (fileMarker) {
                      case 65504:
                      case 65505:
                      case 65506:
                      case 65507:
                      case 65508:
                      case 65509:
                      case 65510:
                      case 65511:
                      case 65512:
                      case 65513:
                      case 65514:
                      case 65515:
                      case 65516:
                      case 65517:
                      case 65518:
                      case 65519:
                      case 65534:
                        var appData = readDataBlock();
                        if (fileMarker === 65504) {
                            if (appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {
                                jfif = {
                                    version: {
                                        major: appData[5],
                                        minor: appData[6]
                                    },
                                    densityUnits: appData[7],
                                    xDensity: appData[8] << 8 | appData[9],
                                    yDensity: appData[10] << 8 | appData[11],
                                    thumbWidth: appData[12],
                                    thumbHeight: appData[13],
                                    thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                                };
                            }
                        }
                        if (fileMarker === 65518) {
                            if (appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101 && appData[5] === 0) {
                                adobe = {
                                    version: appData[6],
                                    flags0: appData[7] << 8 | appData[8],
                                    flags1: appData[9] << 8 | appData[10],
                                    transformCode: appData[11]
                                };
                            }
                        }
                        break;

                      case 65499:
                        var quantizationTablesLength = readUint16();
                        var quantizationTablesEnd = quantizationTablesLength + offset - 2;
                        var z;
                        while (offset < quantizationTablesEnd) {
                            var quantizationTableSpec = data[offset++];
                            var tableData = new Uint16Array(64);
                            if (quantizationTableSpec >> 4 === 0) {
                                for (j = 0; j < 64; j++) {
                                    z = dctZigZag[j];
                                    tableData[z] = data[offset++];
                                }
                            } else if (quantizationTableSpec >> 4 === 1) {
                                for (j = 0; j < 64; j++) {
                                    z = dctZigZag[j];
                                    tableData[z] = readUint16();
                                }
                            } else {
                                throw "DQT: invalid table spec";
                            }
                            quantizationTables[quantizationTableSpec & 15] = tableData;
                        }
                        break;

                      case 65472:
                      case 65473:
                      case 65474:
                        if (frame) {
                            throw "Only single frame JPEGs supported";
                        }
                        readUint16();
                        frame = {};
                        frame.extended = fileMarker === 65473;
                        frame.progressive = fileMarker === 65474;
                        frame.precision = data[offset++];
                        frame.scanLines = readUint16();
                        frame.samplesPerLine = readUint16();
                        frame.components = [];
                        frame.componentIds = {};
                        var componentsCount = data[offset++], componentId;
                        var maxH = 0, maxV = 0;
                        for (i = 0; i < componentsCount; i++) {
                            componentId = data[offset];
                            var h = data[offset + 1] >> 4;
                            var v = data[offset + 1] & 15;
                            if (maxH < h) {
                                maxH = h;
                            }
                            if (maxV < v) {
                                maxV = v;
                            }
                            var qId = data[offset + 2];
                            l = frame.components.push({
                                h: h,
                                v: v,
                                quantizationTable: quantizationTables[qId]
                            });
                            frame.componentIds[componentId] = l - 1;
                            offset += 3;
                        }
                        frame.maxH = maxH;
                        frame.maxV = maxV;
                        prepareComponents(frame);
                        break;

                      case 65476:
                        var huffmanLength = readUint16();
                        for (i = 2; i < huffmanLength; ) {
                            var huffmanTableSpec = data[offset++];
                            var codeLengths = new Uint8Array(16);
                            var codeLengthSum = 0;
                            for (j = 0; j < 16; j++, offset++) {
                                codeLengthSum += codeLengths[j] = data[offset];
                            }
                            var huffmanValues = new Uint8Array(codeLengthSum);
                            for (j = 0; j < codeLengthSum; j++, offset++) {
                                huffmanValues[j] = data[offset];
                            }
                            i += 17 + codeLengthSum;
                            (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                        }
                        break;

                      case 65501:
                        readUint16();
                        resetInterval = readUint16();
                        break;

                      case 65498:
                        var scanLength = readUint16();
                        var selectorsCount = data[offset++];
                        var components = [], component;
                        for (i = 0; i < selectorsCount; i++) {
                            var componentIndex = frame.componentIds[data[offset++]];
                            component = frame.components[componentIndex];
                            var tableSpec = data[offset++];
                            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                            components.push(component);
                        }
                        var spectralStart = data[offset++];
                        var spectralEnd = data[offset++];
                        var successiveApproximation = data[offset++];
                        var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);
                        offset += processed;
                        break;

                      case 65535:
                        if (data[offset] !== 255) {
                            offset--;
                        }
                        break;

                      default:
                        if (data[offset - 3] === 255 && data[offset - 2] >= 192 && data[offset - 2] <= 254) {
                            offset -= 3;
                            break;
                        }
                        throw "unknown JPEG marker " + fileMarker.toString(16);
                    }
                    fileMarker = readUint16();
                }
                this.width = frame.samplesPerLine;
                this.height = frame.scanLines;
                this.jfif = jfif;
                this.adobe = adobe;
                this.components = [];
                for (i = 0; i < frame.components.length; i++) {
                    component = frame.components[i];
                    this.components.push({
                        output: buildComponentData(frame, component),
                        scaleX: component.h / frame.maxH,
                        scaleY: component.v / frame.maxV,
                        blocksPerLine: component.blocksPerLine,
                        blocksPerColumn: component.blocksPerColumn
                    });
                }
                this.numComponents = this.components.length;
            },
            _getLinearizedBlockData: function getLinearizedBlockData(width, height) {
                var scaleX = this.width / width, scaleY = this.height / height;
                var component, componentScaleX, componentScaleY, blocksPerScanline;
                var x, y, i, j, k;
                var index;
                var offset = 0;
                var output;
                var numComponents = this.components.length;
                var dataLength = width * height * numComponents;
                var data = new Uint8Array(dataLength);
                var xScaleBlockOffset = new Uint32Array(width);
                var mask3LSB = 4294967288;
                for (i = 0; i < numComponents; i++) {
                    component = this.components[i];
                    componentScaleX = component.scaleX * scaleX;
                    componentScaleY = component.scaleY * scaleY;
                    offset = i;
                    output = component.output;
                    blocksPerScanline = component.blocksPerLine + 1 << 3;
                    for (x = 0; x < width; x++) {
                        j = 0 | x * componentScaleX;
                        xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;
                    }
                    for (y = 0; y < height; y++) {
                        j = 0 | y * componentScaleY;
                        index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;
                        for (x = 0; x < width; x++) {
                            data[offset] = output[index + xScaleBlockOffset[x]];
                            offset += numComponents;
                        }
                    }
                }
                var transform = this.decodeTransform;
                if (transform) {
                    for (i = 0; i < dataLength; ) {
                        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
                            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];
                        }
                    }
                }
                return data;
            },
            _isColorConversionNeeded: function isColorConversionNeeded() {
                if (this.adobe && this.adobe.transformCode) {
                    return true;
                } else if (this.numComponents === 3) {
                    return true;
                } else {
                    return false;
                }
            },
            _convertYccToRgb: function convertYccToRgb(data) {
                var Y, Cb, Cr;
                for (var i = 0, length = data.length; i < length; i += 3) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    data[i] = clamp0to255(Y - 179.456 + 1.402 * Cr);
                    data[i + 1] = clamp0to255(Y + 135.459 - .344 * Cb - .714 * Cr);
                    data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);
                }
                return data;
            },
            _convertYcckToRgb: function convertYcckToRgb(data) {
                var Y, Cb, Cr, k;
                var offset = 0;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    k = data[i + 3];
                    var r = -122.67195406894 + Cb * (-660635669420364e-19 * Cb + .000437130475926232 * Cr - 54080610064599e-18 * Y + .00048449797120281 * k - .154362151871126) + Cr * (-.000957964378445773 * Cr + .000817076911346625 * Y - .00477271405408747 * k + 1.53380253221734) + Y * (.000961250184130688 * Y - .00266257332283933 * k + .48357088451265) + k * (-.000336197177618394 * k + .484791561490776);
                    var g = 107.268039397724 + Cb * (219927104525741e-19 * Cb - .000640992018297945 * Cr + .000659397001245577 * Y + .000426105652938837 * k - .176491792462875) + Cr * (-.000778269941513683 * Cr + .00130872261408275 * Y + .000770482631801132 * k - .151051492775562) + Y * (.00126935368114843 * Y - .00265090189010898 * k + .25802910206845) + k * (-.000318913117588328 * k - .213742400323665);
                    var b = -20.810012546947 + Cb * (-.000570115196973677 * Cb - 263409051004589e-19 * Cr + .0020741088115012 * Y - .00288260236853442 * k + .814272968359295) + Cr * (-153496057440975e-19 * Cr - .000132689043961446 * Y + .000560833691242812 * k - .195152027534049) + Y * (.00174418132927582 * Y - .00255243321439347 * k + .116935020465145) + k * (-.000343531996510555 * k + .24165260232407);
                    data[offset++] = clamp0to255(r);
                    data[offset++] = clamp0to255(g);
                    data[offset++] = clamp0to255(b);
                }
                return data;
            },
            _convertYcckToCmyk: function convertYcckToCmyk(data) {
                var Y, Cb, Cr;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    data[i] = clamp0to255(434.456 - Y - 1.402 * Cr);
                    data[i + 1] = clamp0to255(119.541 - Y + .344 * Cb + .714 * Cr);
                    data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);
                }
                return data;
            },
            _convertCmykToRgb: function convertCmykToRgb(data) {
                var c, m, y, k;
                var offset = 0;
                var min = -255 * 255 * 255;
                var scale = 1 / 255 / 255;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    c = data[i];
                    m = data[i + 1];
                    y = data[i + 2];
                    k = data[i + 3];
                    var r = c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k - 72734.4411664936) + m * (1.7149763477362134 * m - 5.6096736904047315 * y - 17.873870861415444 * k - 1401.7366389350734) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 4465.541406466231) - k * (21.86122147463605 * k + 48317.86113160301);
                    var g = c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k - 20220.756542821975) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 48691.05921601825) + y * (4.444339102852739 * y + 9.8632861493405 * k - 6341.191035517494) - k * (20.737325471181034 * k + 47890.15695978492);
                    var b = c * (.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - .23883238689178934 * k - 3616.812083916688) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 28620.90484698408) + y * (.03296041114873217 * y + 115.60384449646641 * k - 49363.43385999684) - k * (22.33816807309886 * k + 45932.16563550634);
                    data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;
                    data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;
                    data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;
                }
                return data;
            },
            getData: function getData(width, height, forceRGBoutput) {
                if (this.numComponents > 4) {
                    throw "Unsupported color mode";
                }
                var data = this._getLinearizedBlockData(width, height);
                if (this.numComponents === 3) {
                    return this._convertYccToRgb(data);
                } else if (this.numComponents === 4) {
                    if (this._isColorConversionNeeded()) {
                        if (forceRGBoutput) {
                            return this._convertYcckToRgb(data);
                        } else {
                            return this._convertYcckToCmyk(data);
                        }
                    } else if (forceRGBoutput) {
                        return this._convertCmykToRgb(data);
                    }
                }
                return data;
            }
        };
        return constructor;
    }();
    "use strict";
    var ArithmeticDecoder = function ArithmeticDecoderClosure() {
        var QeTable = [ {
            qe: 22017,
            nmps: 1,
            nlps: 1,
            switchFlag: 1
        }, {
            qe: 13313,
            nmps: 2,
            nlps: 6,
            switchFlag: 0
        }, {
            qe: 6145,
            nmps: 3,
            nlps: 9,
            switchFlag: 0
        }, {
            qe: 2753,
            nmps: 4,
            nlps: 12,
            switchFlag: 0
        }, {
            qe: 1313,
            nmps: 5,
            nlps: 29,
            switchFlag: 0
        }, {
            qe: 545,
            nmps: 38,
            nlps: 33,
            switchFlag: 0
        }, {
            qe: 22017,
            nmps: 7,
            nlps: 6,
            switchFlag: 1
        }, {
            qe: 21505,
            nmps: 8,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 18433,
            nmps: 9,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 14337,
            nmps: 10,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 12289,
            nmps: 11,
            nlps: 17,
            switchFlag: 0
        }, {
            qe: 9217,
            nmps: 12,
            nlps: 18,
            switchFlag: 0
        }, {
            qe: 7169,
            nmps: 13,
            nlps: 20,
            switchFlag: 0
        }, {
            qe: 5633,
            nmps: 29,
            nlps: 21,
            switchFlag: 0
        }, {
            qe: 22017,
            nmps: 15,
            nlps: 14,
            switchFlag: 1
        }, {
            qe: 21505,
            nmps: 16,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 20737,
            nmps: 17,
            nlps: 15,
            switchFlag: 0
        }, {
            qe: 18433,
            nmps: 18,
            nlps: 16,
            switchFlag: 0
        }, {
            qe: 14337,
            nmps: 19,
            nlps: 17,
            switchFlag: 0
        }, {
            qe: 13313,
            nmps: 20,
            nlps: 18,
            switchFlag: 0
        }, {
            qe: 12289,
            nmps: 21,
            nlps: 19,
            switchFlag: 0
        }, {
            qe: 10241,
            nmps: 22,
            nlps: 19,
            switchFlag: 0
        }, {
            qe: 9217,
            nmps: 23,
            nlps: 20,
            switchFlag: 0
        }, {
            qe: 8705,
            nmps: 24,
            nlps: 21,
            switchFlag: 0
        }, {
            qe: 7169,
            nmps: 25,
            nlps: 22,
            switchFlag: 0
        }, {
            qe: 6145,
            nmps: 26,
            nlps: 23,
            switchFlag: 0
        }, {
            qe: 5633,
            nmps: 27,
            nlps: 24,
            switchFlag: 0
        }, {
            qe: 5121,
            nmps: 28,
            nlps: 25,
            switchFlag: 0
        }, {
            qe: 4609,
            nmps: 29,
            nlps: 26,
            switchFlag: 0
        }, {
            qe: 4353,
            nmps: 30,
            nlps: 27,
            switchFlag: 0
        }, {
            qe: 2753,
            nmps: 31,
            nlps: 28,
            switchFlag: 0
        }, {
            qe: 2497,
            nmps: 32,
            nlps: 29,
            switchFlag: 0
        }, {
            qe: 2209,
            nmps: 33,
            nlps: 30,
            switchFlag: 0
        }, {
            qe: 1313,
            nmps: 34,
            nlps: 31,
            switchFlag: 0
        }, {
            qe: 1089,
            nmps: 35,
            nlps: 32,
            switchFlag: 0
        }, {
            qe: 673,
            nmps: 36,
            nlps: 33,
            switchFlag: 0
        }, {
            qe: 545,
            nmps: 37,
            nlps: 34,
            switchFlag: 0
        }, {
            qe: 321,
            nmps: 38,
            nlps: 35,
            switchFlag: 0
        }, {
            qe: 273,
            nmps: 39,
            nlps: 36,
            switchFlag: 0
        }, {
            qe: 133,
            nmps: 40,
            nlps: 37,
            switchFlag: 0
        }, {
            qe: 73,
            nmps: 41,
            nlps: 38,
            switchFlag: 0
        }, {
            qe: 37,
            nmps: 42,
            nlps: 39,
            switchFlag: 0
        }, {
            qe: 21,
            nmps: 43,
            nlps: 40,
            switchFlag: 0
        }, {
            qe: 9,
            nmps: 44,
            nlps: 41,
            switchFlag: 0
        }, {
            qe: 5,
            nmps: 45,
            nlps: 42,
            switchFlag: 0
        }, {
            qe: 1,
            nmps: 45,
            nlps: 43,
            switchFlag: 0
        }, {
            qe: 22017,
            nmps: 46,
            nlps: 46,
            switchFlag: 0
        } ];
        function ArithmeticDecoder(data, start, end) {
            this.data = data;
            this.bp = start;
            this.dataEnd = end;
            this.chigh = data[start];
            this.clow = 0;
            this.byteIn();
            this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127;
            this.clow = this.clow << 7 & 65535;
            this.ct -= 7;
            this.a = 32768;
        }
        ArithmeticDecoder.prototype = {
            byteIn: function ArithmeticDecoder_byteIn() {
                var data = this.data;
                var bp = this.bp;
                if (data[bp] === 255) {
                    var b1 = data[bp + 1];
                    if (b1 > 143) {
                        this.clow += 65280;
                        this.ct = 8;
                    } else {
                        bp++;
                        this.clow += data[bp] << 9;
                        this.ct = 7;
                        this.bp = bp;
                    }
                } else {
                    bp++;
                    this.clow += bp < this.dataEnd ? data[bp] << 8 : 65280;
                    this.ct = 8;
                    this.bp = bp;
                }
                if (this.clow > 65535) {
                    this.chigh += this.clow >> 16;
                    this.clow &= 65535;
                }
            },
            readBit: function ArithmeticDecoder_readBit(contexts, pos) {
                var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;
                var qeTableIcx = QeTable[cx_index];
                var qeIcx = qeTableIcx.qe;
                var d;
                var a = this.a - qeIcx;
                if (this.chigh < qeIcx) {
                    if (a < qeIcx) {
                        a = qeIcx;
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                    } else {
                        a = qeIcx;
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                            cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                    }
                } else {
                    this.chigh -= qeIcx;
                    if ((a & 32768) !== 0) {
                        this.a = a;
                        return cx_mps;
                    }
                    if (a < qeIcx) {
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                            cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                    } else {
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                    }
                }
                do {
                    if (this.ct === 0) {
                        this.byteIn();
                    }
                    a <<= 1;
                    this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1;
                    this.clow = this.clow << 1 & 65535;
                    this.ct--;
                } while ((a & 32768) === 0);
                this.a = a;
                contexts[pos] = cx_index << 1 | cx_mps;
                return d;
            }
        };
        return ArithmeticDecoder;
    }();
    "use strict";
    var JpxImage = function JpxImageClosure() {
        var SubbandsGainLog2 = {
            LL: 0,
            LH: 1,
            HL: 1,
            HH: 2
        };
        function JpxImage() {
            this.failOnCorruptedImage = false;
        }
        JpxImage.prototype = {
            parse: function JpxImage_parse(data) {
                var head = readUint16(data, 0);
                if (head === 65359) {
                    this.parseCodestream(data, 0, data.length);
                    return;
                }
                var position = 0, length = data.length;
                while (position < length) {
                    var headerSize = 8;
                    var lbox = readUint32(data, position);
                    var tbox = readUint32(data, position + 4);
                    position += headerSize;
                    if (lbox === 1) {
                        lbox = readUint32(data, position) * 4294967296 + readUint32(data, position + 4);
                        position += 8;
                        headerSize += 8;
                    }
                    if (lbox === 0) {
                        lbox = length - position + headerSize;
                    }
                    if (lbox < headerSize) {
                        throw new Error("JPX Error: Invalid box field size");
                    }
                    var dataLength = lbox - headerSize;
                    var jumpDataLength = true;
                    switch (tbox) {
                      case 1785737832:
                        jumpDataLength = false;
                        break;

                      case 1668246642:
                        var method = data[position];
                        var precedence = data[position + 1];
                        var approximation = data[position + 2];
                        if (method === 1) {
                            var colorspace = readUint32(data, position + 3);
                            switch (colorspace) {
                              case 16:
                              case 17:
                              case 18:
                                break;

                              default:
                                warn("Unknown colorspace " + colorspace);
                                break;
                            }
                        } else if (method === 2) {
                            info("ICC profile not supported");
                        }
                        break;

                      case 1785737827:
                        this.parseCodestream(data, position, position + dataLength);
                        break;

                      case 1783636e3:
                        if (218793738 !== readUint32(data, position)) {
                            warn("Invalid JP2 signature");
                        }
                        break;

                      case 1783634458:
                      case 1718909296:
                      case 1920099697:
                      case 1919251232:
                      case 1768449138:
                        break;

                      default:
                        var headerType = String.fromCharCode(tbox >> 24 & 255, tbox >> 16 & 255, tbox >> 8 & 255, tbox & 255);
                        warn("Unsupported header type " + tbox + " (" + headerType + ")");
                        break;
                    }
                    if (jumpDataLength) {
                        position += dataLength;
                    }
                }
            },
            parseImageProperties: function JpxImage_parseImageProperties(stream) {
                var newByte = stream.getByte();
                while (newByte >= 0) {
                    var oldByte = newByte;
                    newByte = stream.getByte();
                    var code = oldByte << 8 | newByte;
                    if (code === 65361) {
                        stream.skip(4);
                        var Xsiz = stream.getInt32() >>> 0;
                        var Ysiz = stream.getInt32() >>> 0;
                        var XOsiz = stream.getInt32() >>> 0;
                        var YOsiz = stream.getInt32() >>> 0;
                        stream.skip(16);
                        var Csiz = stream.getUint16();
                        this.width = Xsiz - XOsiz;
                        this.height = Ysiz - YOsiz;
                        this.componentsCount = Csiz;
                        this.bitsPerComponent = 8;
                        return;
                    }
                }
                throw new Error("JPX Error: No size marker found in JPX stream");
            },
            parseCodestream: function JpxImage_parseCodestream(data, start, end) {
                var context = {};
                try {
                    var doNotRecover = false;
                    var position = start;
                    while (position + 1 < end) {
                        var code = readUint16(data, position);
                        position += 2;
                        var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;
                        switch (code) {
                          case 65359:
                            context.mainHeader = true;
                            break;

                          case 65497:
                            break;

                          case 65361:
                            length = readUint16(data, position);
                            var siz = {};
                            siz.Xsiz = readUint32(data, position + 4);
                            siz.Ysiz = readUint32(data, position + 8);
                            siz.XOsiz = readUint32(data, position + 12);
                            siz.YOsiz = readUint32(data, position + 16);
                            siz.XTsiz = readUint32(data, position + 20);
                            siz.YTsiz = readUint32(data, position + 24);
                            siz.XTOsiz = readUint32(data, position + 28);
                            siz.YTOsiz = readUint32(data, position + 32);
                            var componentsCount = readUint16(data, position + 36);
                            siz.Csiz = componentsCount;
                            var components = [];
                            j = position + 38;
                            for (var i = 0; i < componentsCount; i++) {
                                var component = {
                                    precision: (data[j] & 127) + 1,
                                    isSigned: !!(data[j] & 128),
                                    XRsiz: data[j + 1],
                                    YRsiz: data[j + 1]
                                };
                                calculateComponentDimensions(component, siz);
                                components.push(component);
                            }
                            context.SIZ = siz;
                            context.components = components;
                            calculateTileGrids(context, components);
                            context.QCC = [];
                            context.COC = [];
                            break;

                          case 65372:
                            length = readUint16(data, position);
                            var qcd = {};
                            j = position + 2;
                            sqcd = data[j++];
                            switch (sqcd & 31) {
                              case 0:
                                spqcdSize = 8;
                                scalarExpounded = true;
                                break;

                              case 1:
                                spqcdSize = 16;
                                scalarExpounded = false;
                                break;

                              case 2:
                                spqcdSize = 16;
                                scalarExpounded = true;
                                break;

                              default:
                                throw new Error("JPX Error: Invalid SQcd value " + sqcd);
                            }
                            qcd.noQuantization = spqcdSize === 8;
                            qcd.scalarExpounded = scalarExpounded;
                            qcd.guardBits = sqcd >> 5;
                            spqcds = [];
                            while (j < length + position) {
                                var spqcd = {};
                                if (spqcdSize === 8) {
                                    spqcd.epsilon = data[j++] >> 3;
                                    spqcd.mu = 0;
                                } else {
                                    spqcd.epsilon = data[j] >> 3;
                                    spqcd.mu = (data[j] & 7) << 8 | data[j + 1];
                                    j += 2;
                                }
                                spqcds.push(spqcd);
                            }
                            qcd.SPqcds = spqcds;
                            if (context.mainHeader) {
                                context.QCD = qcd;
                            } else {
                                context.currentTile.QCD = qcd;
                                context.currentTile.QCC = [];
                            }
                            break;

                          case 65373:
                            length = readUint16(data, position);
                            var qcc = {};
                            j = position + 2;
                            var cqcc;
                            if (context.SIZ.Csiz < 257) {
                                cqcc = data[j++];
                            } else {
                                cqcc = readUint16(data, j);
                                j += 2;
                            }
                            sqcd = data[j++];
                            switch (sqcd & 31) {
                              case 0:
                                spqcdSize = 8;
                                scalarExpounded = true;
                                break;

                              case 1:
                                spqcdSize = 16;
                                scalarExpounded = false;
                                break;

                              case 2:
                                spqcdSize = 16;
                                scalarExpounded = true;
                                break;

                              default:
                                throw new Error("JPX Error: Invalid SQcd value " + sqcd);
                            }
                            qcc.noQuantization = spqcdSize === 8;
                            qcc.scalarExpounded = scalarExpounded;
                            qcc.guardBits = sqcd >> 5;
                            spqcds = [];
                            while (j < length + position) {
                                spqcd = {};
                                if (spqcdSize === 8) {
                                    spqcd.epsilon = data[j++] >> 3;
                                    spqcd.mu = 0;
                                } else {
                                    spqcd.epsilon = data[j] >> 3;
                                    spqcd.mu = (data[j] & 7) << 8 | data[j + 1];
                                    j += 2;
                                }
                                spqcds.push(spqcd);
                            }
                            qcc.SPqcds = spqcds;
                            if (context.mainHeader) {
                                context.QCC[cqcc] = qcc;
                            } else {
                                context.currentTile.QCC[cqcc] = qcc;
                            }
                            break;

                          case 65362:
                            length = readUint16(data, position);
                            var cod = {};
                            j = position + 2;
                            var scod = data[j++];
                            cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
                            cod.sopMarkerUsed = !!(scod & 2);
                            cod.ephMarkerUsed = !!(scod & 4);
                            cod.progressionOrder = data[j++];
                            cod.layersCount = readUint16(data, j);
                            j += 2;
                            cod.multipleComponentTransform = data[j++];
                            cod.decompositionLevelsCount = data[j++];
                            cod.xcb = (data[j++] & 15) + 2;
                            cod.ycb = (data[j++] & 15) + 2;
                            var blockStyle = data[j++];
                            cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
                            cod.resetContextProbabilities = !!(blockStyle & 2);
                            cod.terminationOnEachCodingPass = !!(blockStyle & 4);
                            cod.verticalyStripe = !!(blockStyle & 8);
                            cod.predictableTermination = !!(blockStyle & 16);
                            cod.segmentationSymbolUsed = !!(blockStyle & 32);
                            cod.reversibleTransformation = data[j++];
                            if (cod.entropyCoderWithCustomPrecincts) {
                                var precinctsSizes = [];
                                while (j < length + position) {
                                    var precinctsSize = data[j++];
                                    precinctsSizes.push({
                                        PPx: precinctsSize & 15,
                                        PPy: precinctsSize >> 4
                                    });
                                }
                                cod.precinctsSizes = precinctsSizes;
                            }
                            var unsupported = [];
                            if (cod.selectiveArithmeticCodingBypass) {
                                unsupported.push("selectiveArithmeticCodingBypass");
                            }
                            if (cod.resetContextProbabilities) {
                                unsupported.push("resetContextProbabilities");
                            }
                            if (cod.terminationOnEachCodingPass) {
                                unsupported.push("terminationOnEachCodingPass");
                            }
                            if (cod.verticalyStripe) {
                                unsupported.push("verticalyStripe");
                            }
                            if (cod.predictableTermination) {
                                unsupported.push("predictableTermination");
                            }
                            if (unsupported.length > 0) {
                                doNotRecover = true;
                                throw new Error("JPX Error: Unsupported COD options (" + unsupported.join(", ") + ")");
                            }
                            if (context.mainHeader) {
                                context.COD = cod;
                            } else {
                                context.currentTile.COD = cod;
                                context.currentTile.COC = [];
                            }
                            break;

                          case 65424:
                            length = readUint16(data, position);
                            tile = {};
                            tile.index = readUint16(data, position + 2);
                            tile.length = readUint32(data, position + 4);
                            tile.dataEnd = tile.length + position - 2;
                            tile.partIndex = data[position + 8];
                            tile.partsCount = data[position + 9];
                            context.mainHeader = false;
                            if (tile.partIndex === 0) {
                                tile.COD = context.COD;
                                tile.COC = context.COC.slice(0);
                                tile.QCD = context.QCD;
                                tile.QCC = context.QCC.slice(0);
                            }
                            context.currentTile = tile;
                            break;

                          case 65427:
                            tile = context.currentTile;
                            if (tile.partIndex === 0) {
                                initializeTile(context, tile.index);
                                buildPackets(context);
                            }
                            length = tile.dataEnd - position;
                            parseTilePackets(context, data, position, length);
                            break;

                          case 65365:
                          case 65367:
                          case 65368:
                          case 65380:
                            length = readUint16(data, position);
                            break;

                          case 65363:
                            throw new Error("JPX Error: Codestream code 0xFF53 (COC) is " + "not implemented");

                          default:
                            throw new Error("JPX Error: Unknown codestream code: " + code.toString(16));
                        }
                        position += length;
                    }
                } catch (e) {
                    if (doNotRecover || this.failOnCorruptedImage) {
                        throw e;
                    } else {
                        warn("Trying to recover from " + e.message);
                    }
                }
                this.tiles = transformComponents(context);
                this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
                this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
                this.componentsCount = context.SIZ.Csiz;
            }
        };
        function calculateComponentDimensions(component, siz) {
            component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
            component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
            component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
            component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
            component.width = component.x1 - component.x0;
            component.height = component.y1 - component.y0;
        }
        function calculateTileGrids(context, components) {
            var siz = context.SIZ;
            var tile, tiles = [];
            var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
            var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
            for (var q = 0; q < numYtiles; q++) {
                for (var p = 0; p < numXtiles; p++) {
                    tile = {};
                    tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
                    tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
                    tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
                    tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
                    tile.width = tile.tx1 - tile.tx0;
                    tile.height = tile.ty1 - tile.ty0;
                    tile.components = [];
                    tiles.push(tile);
                }
            }
            context.tiles = tiles;
            var componentsCount = siz.Csiz;
            for (var i = 0, ii = componentsCount; i < ii; i++) {
                var component = components[i];
                for (var j = 0, jj = tiles.length; j < jj; j++) {
                    var tileComponent = {};
                    tile = tiles[j];
                    tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
                    tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
                    tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
                    tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
                    tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
                    tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
                    tile.components[i] = tileComponent;
                }
            }
        }
        function getBlocksDimensions(context, component, r) {
            var codOrCoc = component.codingStyleParameters;
            var result = {};
            if (!codOrCoc.entropyCoderWithCustomPrecincts) {
                result.PPx = 15;
                result.PPy = 15;
            } else {
                result.PPx = codOrCoc.precinctsSizes[r].PPx;
                result.PPy = codOrCoc.precinctsSizes[r].PPy;
            }
            result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);
            result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);
            return result;
        }
        function buildPrecincts(context, resolution, dimensions) {
            var precinctWidth = 1 << dimensions.PPx;
            var precinctHeight = 1 << dimensions.PPy;
            var isZeroRes = resolution.resLevel === 0;
            var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);
            var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);
            var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;
            var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;
            var numprecincts = numprecinctswide * numprecinctshigh;
            resolution.precinctParameters = {
                precinctWidth: precinctWidth,
                precinctHeight: precinctHeight,
                numprecinctswide: numprecinctswide,
                numprecinctshigh: numprecinctshigh,
                numprecincts: numprecincts,
                precinctWidthInSubband: precinctWidthInSubband,
                precinctHeightInSubband: precinctHeightInSubband
            };
        }
        function buildCodeblocks(context, subband, dimensions) {
            var xcb_ = dimensions.xcb_;
            var ycb_ = dimensions.ycb_;
            var codeblockWidth = 1 << xcb_;
            var codeblockHeight = 1 << ycb_;
            var cbx0 = subband.tbx0 >> xcb_;
            var cby0 = subband.tby0 >> ycb_;
            var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;
            var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;
            var precinctParameters = subband.resolution.precinctParameters;
            var codeblocks = [];
            var precincts = [];
            var i, j, codeblock, precinctNumber;
            for (j = cby0; j < cby1; j++) {
                for (i = cbx0; i < cbx1; i++) {
                    codeblock = {
                        cbx: i,
                        cby: j,
                        tbx0: codeblockWidth * i,
                        tby0: codeblockHeight * j,
                        tbx1: codeblockWidth * (i + 1),
                        tby1: codeblockHeight * (j + 1)
                    };
                    codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
                    codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
                    codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
                    codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);
                    var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);
                    var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);
                    precinctNumber = pi + pj * precinctParameters.numprecinctswide;
                    codeblock.precinctNumber = precinctNumber;
                    codeblock.subbandType = subband.type;
                    codeblock.Lblock = 3;
                    if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {
                        continue;
                    }
                    codeblocks.push(codeblock);
                    var precinct = precincts[precinctNumber];
                    if (precinct !== undefined) {
                        if (i < precinct.cbxMin) {
                            precinct.cbxMin = i;
                        } else if (i > precinct.cbxMax) {
                            precinct.cbxMax = i;
                        }
                        if (j < precinct.cbyMin) {
                            precinct.cbxMin = j;
                        } else if (j > precinct.cbyMax) {
                            precinct.cbyMax = j;
                        }
                    } else {
                        precincts[precinctNumber] = precinct = {
                            cbxMin: i,
                            cbyMin: j,
                            cbxMax: i,
                            cbyMax: j
                        };
                    }
                    codeblock.precinct = precinct;
                }
            }
            subband.codeblockParameters = {
                codeblockWidth: xcb_,
                codeblockHeight: ycb_,
                numcodeblockwide: cbx1 - cbx0 + 1,
                numcodeblockhigh: cby1 - cby0 + 1
            };
            subband.codeblocks = codeblocks;
            subband.precincts = precincts;
        }
        function createPacket(resolution, precinctNumber, layerNumber) {
            var precinctCodeblocks = [];
            var subbands = resolution.subbands;
            for (var i = 0, ii = subbands.length; i < ii; i++) {
                var subband = subbands[i];
                var codeblocks = subband.codeblocks;
                for (var j = 0, jj = codeblocks.length; j < jj; j++) {
                    var codeblock = codeblocks[j];
                    if (codeblock.precinctNumber !== precinctNumber) {
                        continue;
                    }
                    precinctCodeblocks.push(codeblock);
                }
            }
            return {
                layerNumber: layerNumber,
                codeblocks: precinctCodeblocks
            };
        }
        function LayerResolutionComponentPositionIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var maxDecompositionLevelsCount = 0;
            for (var q = 0; q < componentsCount; q++) {
                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
            }
            var l = 0, r = 0, i = 0, k = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (;l < layersCount; l++) {
                    for (;r <= maxDecompositionLevelsCount; r++) {
                        for (;i < componentsCount; i++) {
                            var component = tile.components[i];
                            if (r > component.codingStyleParameters.decompositionLevelsCount) {
                                continue;
                            }
                            var resolution = component.resolutions[r];
                            var numprecincts = resolution.precinctParameters.numprecincts;
                            for (;k < numprecincts; ) {
                                var packet = createPacket(resolution, k, l);
                                k++;
                                return packet;
                            }
                            k = 0;
                        }
                        i = 0;
                    }
                    r = 0;
                }
                throw new Error("JPX Error: Out of packets");
            };
        }
        function ResolutionLayerComponentPositionIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var maxDecompositionLevelsCount = 0;
            for (var q = 0; q < componentsCount; q++) {
                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
            }
            var r = 0, l = 0, i = 0, k = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (;r <= maxDecompositionLevelsCount; r++) {
                    for (;l < layersCount; l++) {
                        for (;i < componentsCount; i++) {
                            var component = tile.components[i];
                            if (r > component.codingStyleParameters.decompositionLevelsCount) {
                                continue;
                            }
                            var resolution = component.resolutions[r];
                            var numprecincts = resolution.precinctParameters.numprecincts;
                            for (;k < numprecincts; ) {
                                var packet = createPacket(resolution, k, l);
                                k++;
                                return packet;
                            }
                            k = 0;
                        }
                        i = 0;
                    }
                    l = 0;
                }
                throw new Error("JPX Error: Out of packets");
            };
        }
        function ResolutionPositionComponentLayerIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var l, r, c, p;
            var maxDecompositionLevelsCount = 0;
            for (c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);
            }
            var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);
            for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
                var maxNumPrecincts = 0;
                for (c = 0; c < componentsCount; ++c) {
                    var resolutions = tile.components[c].resolutions;
                    if (r < resolutions.length) {
                        maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);
                    }
                }
                maxNumPrecinctsInLevel[r] = maxNumPrecincts;
            }
            l = 0;
            r = 0;
            c = 0;
            p = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (;r <= maxDecompositionLevelsCount; r++) {
                    for (;p < maxNumPrecinctsInLevel[r]; p++) {
                        for (;c < componentsCount; c++) {
                            var component = tile.components[c];
                            if (r > component.codingStyleParameters.decompositionLevelsCount) {
                                continue;
                            }
                            var resolution = component.resolutions[r];
                            var numprecincts = resolution.precinctParameters.numprecincts;
                            if (p >= numprecincts) {
                                continue;
                            }
                            for (;l < layersCount; ) {
                                var packet = createPacket(resolution, p, l);
                                l++;
                                return packet;
                            }
                            l = 0;
                        }
                        c = 0;
                    }
                    p = 0;
                }
                throw new Error("JPX Error: Out of packets");
            };
        }
        function PositionComponentResolutionLayerIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var precinctsSizes = getPrecinctSizesInImageScale(tile);
            var precinctsIterationSizes = precinctsSizes;
            var l = 0, r = 0, c = 0, px = 0, py = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (;py < precinctsIterationSizes.maxNumHigh; py++) {
                    for (;px < precinctsIterationSizes.maxNumWide; px++) {
                        for (;c < componentsCount; c++) {
                            var component = tile.components[c];
                            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                            for (;r <= decompositionLevelsCount; r++) {
                                var resolution = component.resolutions[r];
                                var sizeInImageScale = precinctsSizes.components[c].resolutions[r];
                                var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
                                if (k === null) {
                                    continue;
                                }
                                for (;l < layersCount; ) {
                                    var packet = createPacket(resolution, k, l);
                                    l++;
                                    return packet;
                                }
                                l = 0;
                            }
                            r = 0;
                        }
                        c = 0;
                    }
                    px = 0;
                }
                throw new Error("JPX Error: Out of packets");
            };
        }
        function ComponentPositionResolutionLayerIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var precinctsSizes = getPrecinctSizesInImageScale(tile);
            var l = 0, r = 0, c = 0, px = 0, py = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (;c < componentsCount; ++c) {
                    var component = tile.components[c];
                    var precinctsIterationSizes = precinctsSizes.components[c];
                    var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                    for (;py < precinctsIterationSizes.maxNumHigh; py++) {
                        for (;px < precinctsIterationSizes.maxNumWide; px++) {
                            for (;r <= decompositionLevelsCount; r++) {
                                var resolution = component.resolutions[r];
                                var sizeInImageScale = precinctsIterationSizes.resolutions[r];
                                var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
                                if (k === null) {
                                    continue;
                                }
                                for (;l < layersCount; ) {
                                    var packet = createPacket(resolution, k, l);
                                    l++;
                                    return packet;
                                }
                                l = 0;
                            }
                            r = 0;
                        }
                        px = 0;
                    }
                    py = 0;
                }
                throw new Error("JPX Error: Out of packets");
            };
        }
        function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {
            var posX = pxIndex * precinctIterationSizes.minWidth;
            var posY = pyIndex * precinctIterationSizes.minHeight;
            if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {
                return null;
            }
            var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;
            return posX / sizeInImageScale.height + startPrecinctRowIndex;
        }
        function getPrecinctSizesInImageScale(tile) {
            var componentsCount = tile.components.length;
            var minWidth = Number.MAX_VALUE;
            var minHeight = Number.MAX_VALUE;
            var maxNumWide = 0;
            var maxNumHigh = 0;
            var sizePerComponent = new Array(componentsCount);
            for (var c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                var sizePerResolution = new Array(decompositionLevelsCount + 1);
                var minWidthCurrentComponent = Number.MAX_VALUE;
                var minHeightCurrentComponent = Number.MAX_VALUE;
                var maxNumWideCurrentComponent = 0;
                var maxNumHighCurrentComponent = 0;
                var scale = 1;
                for (var r = decompositionLevelsCount; r >= 0; --r) {
                    var resolution = component.resolutions[r];
                    var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;
                    var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;
                    minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);
                    minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);
                    maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);
                    maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);
                    sizePerResolution[r] = {
                        width: widthCurrentResolution,
                        height: heightCurrentResolution
                    };
                    scale <<= 1;
                }
                minWidth = Math.min(minWidth, minWidthCurrentComponent);
                minHeight = Math.min(minHeight, minHeightCurrentComponent);
                maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
                maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
                sizePerComponent[c] = {
                    resolutions: sizePerResolution,
                    minWidth: minWidthCurrentComponent,
                    minHeight: minHeightCurrentComponent,
                    maxNumWide: maxNumWideCurrentComponent,
                    maxNumHigh: maxNumHighCurrentComponent
                };
            }
            return {
                components: sizePerComponent,
                minWidth: minWidth,
                minHeight: minHeight,
                maxNumWide: maxNumWide,
                maxNumHigh: maxNumHigh
            };
        }
        function buildPackets(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var componentsCount = siz.Csiz;
            for (var c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                var resolutions = [];
                var subbands = [];
                for (var r = 0; r <= decompositionLevelsCount; r++) {
                    var blocksDimensions = getBlocksDimensions(context, component, r);
                    var resolution = {};
                    var scale = 1 << decompositionLevelsCount - r;
                    resolution.trx0 = Math.ceil(component.tcx0 / scale);
                    resolution.try0 = Math.ceil(component.tcy0 / scale);
                    resolution.trx1 = Math.ceil(component.tcx1 / scale);
                    resolution.try1 = Math.ceil(component.tcy1 / scale);
                    resolution.resLevel = r;
                    buildPrecincts(context, resolution, blocksDimensions);
                    resolutions.push(resolution);
                    var subband;
                    if (r === 0) {
                        subband = {};
                        subband.type = "LL";
                        subband.tbx0 = Math.ceil(component.tcx0 / scale);
                        subband.tby0 = Math.ceil(component.tcy0 / scale);
                        subband.tbx1 = Math.ceil(component.tcx1 / scale);
                        subband.tby1 = Math.ceil(component.tcy1 / scale);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolution.subbands = [ subband ];
                    } else {
                        var bscale = 1 << decompositionLevelsCount - r + 1;
                        var resolutionSubbands = [];
                        subband = {};
                        subband.type = "HL";
                        subband.tbx0 = Math.ceil(component.tcx0 / bscale - .5);
                        subband.tby0 = Math.ceil(component.tcy0 / bscale);
                        subband.tbx1 = Math.ceil(component.tcx1 / bscale - .5);
                        subband.tby1 = Math.ceil(component.tcy1 / bscale);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolutionSubbands.push(subband);
                        subband = {};
                        subband.type = "LH";
                        subband.tbx0 = Math.ceil(component.tcx0 / bscale);
                        subband.tby0 = Math.ceil(component.tcy0 / bscale - .5);
                        subband.tbx1 = Math.ceil(component.tcx1 / bscale);
                        subband.tby1 = Math.ceil(component.tcy1 / bscale - .5);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolutionSubbands.push(subband);
                        subband = {};
                        subband.type = "HH";
                        subband.tbx0 = Math.ceil(component.tcx0 / bscale - .5);
                        subband.tby0 = Math.ceil(component.tcy0 / bscale - .5);
                        subband.tbx1 = Math.ceil(component.tcx1 / bscale - .5);
                        subband.tby1 = Math.ceil(component.tcy1 / bscale - .5);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolutionSubbands.push(subband);
                        resolution.subbands = resolutionSubbands;
                    }
                }
                component.resolutions = resolutions;
                component.subbands = subbands;
            }
            var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;
            switch (progressionOrder) {
              case 0:
                tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);
                break;

              case 1:
                tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);
                break;

              case 2:
                tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);
                break;

              case 3:
                tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);
                break;

              case 4:
                tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);
                break;

              default:
                throw new Error("JPX Error: Unsupported progression order " + progressionOrder);
            }
        }
        function parseTilePackets(context, data, offset, dataLength) {
            var position = 0;
            var buffer, bufferSize = 0, skipNextBit = false;
            function readBits(count) {
                while (bufferSize < count) {
                    var b = data[offset + position];
                    position++;
                    if (skipNextBit) {
                        buffer = buffer << 7 | b;
                        bufferSize += 7;
                        skipNextBit = false;
                    } else {
                        buffer = buffer << 8 | b;
                        bufferSize += 8;
                    }
                    if (b === 255) {
                        skipNextBit = true;
                    }
                }
                bufferSize -= count;
                return buffer >>> bufferSize & (1 << count) - 1;
            }
            function skipMarkerIfEqual(value) {
                if (data[offset + position - 1] === 255 && data[offset + position] === value) {
                    skipBytes(1);
                    return true;
                } else if (data[offset + position] === 255 && data[offset + position + 1] === value) {
                    skipBytes(2);
                    return true;
                }
                return false;
            }
            function skipBytes(count) {
                position += count;
            }
            function alignToByte() {
                bufferSize = 0;
                if (skipNextBit) {
                    position++;
                    skipNextBit = false;
                }
            }
            function readCodingpasses() {
                if (readBits(1) === 0) {
                    return 1;
                }
                if (readBits(1) === 0) {
                    return 2;
                }
                var value = readBits(2);
                if (value < 3) {
                    return value + 3;
                }
                value = readBits(5);
                if (value < 31) {
                    return value + 6;
                }
                value = readBits(7);
                return value + 37;
            }
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var sopMarkerUsed = context.COD.sopMarkerUsed;
            var ephMarkerUsed = context.COD.ephMarkerUsed;
            var packetsIterator = tile.packetsIterator;
            while (position < dataLength) {
                alignToByte();
                if (sopMarkerUsed && skipMarkerIfEqual(145)) {
                    skipBytes(4);
                }
                var packet = packetsIterator.nextPacket();
                if (!readBits(1)) {
                    continue;
                }
                var layerNumber = packet.layerNumber;
                var queue = [], codeblock;
                for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {
                    codeblock = packet.codeblocks[i];
                    var precinct = codeblock.precinct;
                    var codeblockColumn = codeblock.cbx - precinct.cbxMin;
                    var codeblockRow = codeblock.cby - precinct.cbyMin;
                    var codeblockIncluded = false;
                    var firstTimeInclusion = false;
                    var valueReady;
                    if (codeblock["included"] !== undefined) {
                        codeblockIncluded = !!readBits(1);
                    } else {
                        precinct = codeblock.precinct;
                        var inclusionTree, zeroBitPlanesTree;
                        if (precinct["inclusionTree"] !== undefined) {
                            inclusionTree = precinct.inclusionTree;
                        } else {
                            var width = precinct.cbxMax - precinct.cbxMin + 1;
                            var height = precinct.cbyMax - precinct.cbyMin + 1;
                            inclusionTree = new InclusionTree(width, height, layerNumber);
                            zeroBitPlanesTree = new TagTree(width, height);
                            precinct.inclusionTree = inclusionTree;
                            precinct.zeroBitPlanesTree = zeroBitPlanesTree;
                        }
                        if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {
                            while (true) {
                                if (readBits(1)) {
                                    valueReady = !inclusionTree.nextLevel();
                                    if (valueReady) {
                                        codeblock.included = true;
                                        codeblockIncluded = firstTimeInclusion = true;
                                        break;
                                    }
                                } else {
                                    inclusionTree.incrementValue(layerNumber);
                                    break;
                                }
                            }
                        }
                    }
                    if (!codeblockIncluded) {
                        continue;
                    }
                    if (firstTimeInclusion) {
                        zeroBitPlanesTree = precinct.zeroBitPlanesTree;
                        zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
                        while (true) {
                            if (readBits(1)) {
                                valueReady = !zeroBitPlanesTree.nextLevel();
                                if (valueReady) {
                                    break;
                                }
                            } else {
                                zeroBitPlanesTree.incrementValue();
                            }
                        }
                        codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
                    }
                    var codingpasses = readCodingpasses();
                    while (readBits(1)) {
                        codeblock.Lblock++;
                    }
                    var codingpassesLog2 = log2(codingpasses);
                    var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;
                    var codedDataLength = readBits(bits);
                    queue.push({
                        codeblock: codeblock,
                        codingpasses: codingpasses,
                        dataLength: codedDataLength
                    });
                }
                alignToByte();
                if (ephMarkerUsed) {
                    skipMarkerIfEqual(146);
                }
                while (queue.length > 0) {
                    var packetItem = queue.shift();
                    codeblock = packetItem.codeblock;
                    if (codeblock["data"] === undefined) {
                        codeblock.data = [];
                    }
                    codeblock.data.push({
                        data: data,
                        start: offset + position,
                        end: offset + position + packetItem.dataLength,
                        codingpasses: packetItem.codingpasses
                    });
                    position += packetItem.dataLength;
                }
            }
            return position;
        }
        function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {
            var x0 = subband.tbx0;
            var y0 = subband.tby0;
            var width = subband.tbx1 - subband.tbx0;
            var codeblocks = subband.codeblocks;
            var right = subband.type.charAt(0) === "H" ? 1 : 0;
            var bottom = subband.type.charAt(1) === "H" ? levelWidth : 0;
            for (var i = 0, ii = codeblocks.length; i < ii; ++i) {
                var codeblock = codeblocks[i];
                var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
                var blockHeight = codeblock.tby1_ - codeblock.tby0_;
                if (blockWidth === 0 || blockHeight === 0) {
                    continue;
                }
                if (codeblock["data"] === undefined) {
                    continue;
                }
                var bitModel, currentCodingpassType;
                bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);
                currentCodingpassType = 2;
                var data = codeblock.data, totalLength = 0, codingpasses = 0;
                var j, jj, dataItem;
                for (j = 0, jj = data.length; j < jj; j++) {
                    dataItem = data[j];
                    totalLength += dataItem.end - dataItem.start;
                    codingpasses += dataItem.codingpasses;
                }
                var encodedData = new Uint8Array(totalLength);
                var position = 0;
                for (j = 0, jj = data.length; j < jj; j++) {
                    dataItem = data[j];
                    var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);
                    encodedData.set(chunk, position);
                    position += chunk.length;
                }
                var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);
                bitModel.setDecoder(decoder);
                for (j = 0; j < codingpasses; j++) {
                    switch (currentCodingpassType) {
                      case 0:
                        bitModel.runSignificancePropogationPass();
                        break;

                      case 1:
                        bitModel.runMagnitudeRefinementPass();
                        break;

                      case 2:
                        bitModel.runCleanupPass();
                        if (segmentationSymbolUsed) {
                            bitModel.checkSegmentationSymbol();
                        }
                        break;
                    }
                    currentCodingpassType = (currentCodingpassType + 1) % 3;
                }
                var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;
                var sign = bitModel.coefficentsSign;
                var magnitude = bitModel.coefficentsMagnitude;
                var bitsDecoded = bitModel.bitsDecoded;
                var magnitudeCorrection = reversible ? 0 : .5;
                var k, n, nb;
                position = 0;
                var interleave = subband.type !== "LL";
                for (j = 0; j < blockHeight; j++) {
                    var row = offset / width | 0;
                    var levelOffset = 2 * row * (levelWidth - width) + right + bottom;
                    for (k = 0; k < blockWidth; k++) {
                        n = magnitude[position];
                        if (n !== 0) {
                            n = (n + magnitudeCorrection) * delta;
                            if (sign[position] !== 0) {
                                n = -n;
                            }
                            nb = bitsDecoded[position];
                            var pos = interleave ? levelOffset + (offset << 1) : offset;
                            if (reversible && nb >= mb) {
                                coefficients[pos] = n;
                            } else {
                                coefficients[pos] = n * (1 << mb - nb);
                            }
                        }
                        offset++;
                        position++;
                    }
                    offset += width - blockWidth;
                }
            }
        }
        function transformTile(context, tile, c) {
            var component = tile.components[c];
            var codingStyleParameters = component.codingStyleParameters;
            var quantizationParameters = component.quantizationParameters;
            var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;
            var spqcds = quantizationParameters.SPqcds;
            var scalarExpounded = quantizationParameters.scalarExpounded;
            var guardBits = quantizationParameters.guardBits;
            var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
            var precision = context.components[c].precision;
            var reversible = codingStyleParameters.reversibleTransformation;
            var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();
            var subbandCoefficients = [];
            var b = 0;
            for (var i = 0; i <= decompositionLevelsCount; i++) {
                var resolution = component.resolutions[i];
                var width = resolution.trx1 - resolution.trx0;
                var height = resolution.try1 - resolution.try0;
                var coefficients = new Float32Array(width * height);
                for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {
                    var mu, epsilon;
                    if (!scalarExpounded) {
                        mu = spqcds[0].mu;
                        epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);
                    } else {
                        mu = spqcds[b].mu;
                        epsilon = spqcds[b].epsilon;
                        b++;
                    }
                    var subband = resolution.subbands[j];
                    var gainLog2 = SubbandsGainLog2[subband.type];
                    var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);
                    var mb = guardBits + epsilon - 1;
                    copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);
                }
                subbandCoefficients.push({
                    width: width,
                    height: height,
                    items: coefficients
                });
            }
            var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);
            return {
                left: component.tcx0,
                top: component.tcy0,
                width: result.width,
                height: result.height,
                items: result.items
            };
        }
        function transformComponents(context) {
            var siz = context.SIZ;
            var components = context.components;
            var componentsCount = siz.Csiz;
            var resultImages = [];
            for (var i = 0, ii = context.tiles.length; i < ii; i++) {
                var tile = context.tiles[i];
                var transformedTiles = [];
                var c;
                for (c = 0; c < componentsCount; c++) {
                    transformedTiles[c] = transformTile(context, tile, c);
                }
                var tile0 = transformedTiles[0];
                var out = new Uint8Array(tile0.items.length * componentsCount);
                var result = {
                    left: tile0.left,
                    top: tile0.top,
                    width: tile0.width,
                    height: tile0.height,
                    items: out
                };
                var shift, offset, max, min, maxK;
                var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;
                if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
                    var fourComponents = componentsCount === 4;
                    var y0items = transformedTiles[0].items;
                    var y1items = transformedTiles[1].items;
                    var y2items = transformedTiles[2].items;
                    var y3items = fourComponents ? transformedTiles[3].items : null;
                    shift = components[0].precision - 8;
                    offset = (128 << shift) + .5;
                    max = 255 * (1 << shift);
                    maxK = max * .5;
                    min = -maxK;
                    var component0 = tile.components[0];
                    var alpha01 = componentsCount - 3;
                    jj = y0items.length;
                    if (!component0.codingStyleParameters.reversibleTransformation) {
                        for (j = 0; j < jj; j++, pos += alpha01) {
                            y0 = y0items[j] + offset;
                            y1 = y1items[j];
                            y2 = y2items[j];
                            r = y0 + 1.402 * y2;
                            g = y0 - .34413 * y1 - .71414 * y2;
                            b = y0 + 1.772 * y1;
                            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
                            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
                            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
                        }
                    } else {
                        for (j = 0; j < jj; j++, pos += alpha01) {
                            y0 = y0items[j] + offset;
                            y1 = y1items[j];
                            y2 = y2items[j];
                            g = y0 - (y2 + y1 >> 2);
                            r = g + y2;
                            b = g + y1;
                            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
                            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
                            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
                        }
                    }
                    if (fourComponents) {
                        for (j = 0, pos = 3; j < jj; j++, pos += 4) {
                            k = y3items[j];
                            out[pos] = k <= min ? 0 : k >= maxK ? 255 : k + offset >> shift;
                        }
                    }
                } else {
                    for (c = 0; c < componentsCount; c++) {
                        var items = transformedTiles[c].items;
                        shift = components[c].precision - 8;
                        offset = (128 << shift) + .5;
                        max = 127.5 * (1 << shift);
                        min = -max;
                        for (pos = c, j = 0, jj = items.length; j < jj; j++) {
                            val = items[j];
                            out[pos] = val <= min ? 0 : val >= max ? 255 : val + offset >> shift;
                            pos += componentsCount;
                        }
                    }
                }
                resultImages.push(result);
            }
            return resultImages;
        }
        function initializeTile(context, tileIndex) {
            var siz = context.SIZ;
            var componentsCount = siz.Csiz;
            var tile = context.tiles[tileIndex];
            for (var c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;
                component.quantizationParameters = qcdOrQcc;
                var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;
                component.codingStyleParameters = codOrCoc;
            }
            tile.codingStyleDefaultParameters = context.currentTile.COD;
        }
        var TagTree = function TagTreeClosure() {
            function TagTree(width, height) {
                var levelsLength = log2(Math.max(width, height)) + 1;
                this.levels = [];
                for (var i = 0; i < levelsLength; i++) {
                    var level = {
                        width: width,
                        height: height,
                        items: []
                    };
                    this.levels.push(level);
                    width = Math.ceil(width / 2);
                    height = Math.ceil(height / 2);
                }
            }
            TagTree.prototype = {
                reset: function TagTree_reset(i, j) {
                    var currentLevel = 0, value = 0, level;
                    while (currentLevel < this.levels.length) {
                        level = this.levels[currentLevel];
                        var index = i + j * level.width;
                        if (level.items[index] !== undefined) {
                            value = level.items[index];
                            break;
                        }
                        level.index = index;
                        i >>= 1;
                        j >>= 1;
                        currentLevel++;
                    }
                    currentLevel--;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    this.currentLevel = currentLevel;
                    delete this.value;
                },
                incrementValue: function TagTree_incrementValue() {
                    var level = this.levels[this.currentLevel];
                    level.items[level.index]++;
                },
                nextLevel: function TagTree_nextLevel() {
                    var currentLevel = this.currentLevel;
                    var level = this.levels[currentLevel];
                    var value = level.items[level.index];
                    currentLevel--;
                    if (currentLevel < 0) {
                        this.value = value;
                        return false;
                    }
                    this.currentLevel = currentLevel;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    return true;
                }
            };
            return TagTree;
        }();
        var InclusionTree = function InclusionTreeClosure() {
            function InclusionTree(width, height, defaultValue) {
                var levelsLength = log2(Math.max(width, height)) + 1;
                this.levels = [];
                for (var i = 0; i < levelsLength; i++) {
                    var items = new Uint8Array(width * height);
                    for (var j = 0, jj = items.length; j < jj; j++) {
                        items[j] = defaultValue;
                    }
                    var level = {
                        width: width,
                        height: height,
                        items: items
                    };
                    this.levels.push(level);
                    width = Math.ceil(width / 2);
                    height = Math.ceil(height / 2);
                }
            }
            InclusionTree.prototype = {
                reset: function InclusionTree_reset(i, j, stopValue) {
                    var currentLevel = 0;
                    while (currentLevel < this.levels.length) {
                        var level = this.levels[currentLevel];
                        var index = i + j * level.width;
                        level.index = index;
                        var value = level.items[index];
                        if (value === 255) {
                            break;
                        }
                        if (value > stopValue) {
                            this.currentLevel = currentLevel;
                            this.propagateValues();
                            return false;
                        }
                        i >>= 1;
                        j >>= 1;
                        currentLevel++;
                    }
                    this.currentLevel = currentLevel - 1;
                    return true;
                },
                incrementValue: function InclusionTree_incrementValue(stopValue) {
                    var level = this.levels[this.currentLevel];
                    level.items[level.index] = stopValue + 1;
                    this.propagateValues();
                },
                propagateValues: function InclusionTree_propagateValues() {
                    var levelIndex = this.currentLevel;
                    var level = this.levels[levelIndex];
                    var currentValue = level.items[level.index];
                    while (--levelIndex >= 0) {
                        level = this.levels[levelIndex];
                        level.items[level.index] = currentValue;
                    }
                },
                nextLevel: function InclusionTree_nextLevel() {
                    var currentLevel = this.currentLevel;
                    var level = this.levels[currentLevel];
                    var value = level.items[level.index];
                    level.items[level.index] = 255;
                    currentLevel--;
                    if (currentLevel < 0) {
                        return false;
                    }
                    this.currentLevel = currentLevel;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    return true;
                }
            };
            return InclusionTree;
        }();
        var BitModel = function BitModelClosure() {
            var UNIFORM_CONTEXT = 17;
            var RUNLENGTH_CONTEXT = 18;
            var LLAndLHContextsLabel = new Uint8Array([ 0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8 ]);
            var HLContextLabel = new Uint8Array([ 0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8 ]);
            var HHContextLabel = new Uint8Array([ 0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8 ]);
            function BitModel(width, height, subband, zeroBitPlanes, mb) {
                this.width = width;
                this.height = height;
                this.contextLabelTable = subband === "HH" ? HHContextLabel : subband === "HL" ? HLContextLabel : LLAndLHContextsLabel;
                var coefficientCount = width * height;
                this.neighborsSignificance = new Uint8Array(coefficientCount);
                this.coefficentsSign = new Uint8Array(coefficientCount);
                this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) : mb > 6 ? new Uint16Array(coefficientCount) : new Uint8Array(coefficientCount);
                this.processingFlags = new Uint8Array(coefficientCount);
                var bitsDecoded = new Uint8Array(coefficientCount);
                if (zeroBitPlanes !== 0) {
                    for (var i = 0; i < coefficientCount; i++) {
                        bitsDecoded[i] = zeroBitPlanes;
                    }
                }
                this.bitsDecoded = bitsDecoded;
                this.reset();
            }
            BitModel.prototype = {
                setDecoder: function BitModel_setDecoder(decoder) {
                    this.decoder = decoder;
                },
                reset: function BitModel_reset() {
                    this.contexts = new Int8Array(19);
                    this.contexts[0] = 4 << 1 | 0;
                    this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;
                    this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;
                },
                setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {
                    var neighborsSignificance = this.neighborsSignificance;
                    var width = this.width, height = this.height;
                    var left = column > 0;
                    var right = column + 1 < width;
                    var i;
                    if (row > 0) {
                        i = index - width;
                        if (left) {
                            neighborsSignificance[i - 1] += 16;
                        }
                        if (right) {
                            neighborsSignificance[i + 1] += 16;
                        }
                        neighborsSignificance[i] += 4;
                    }
                    if (row + 1 < height) {
                        i = index + width;
                        if (left) {
                            neighborsSignificance[i - 1] += 16;
                        }
                        if (right) {
                            neighborsSignificance[i + 1] += 16;
                        }
                        neighborsSignificance[i] += 4;
                    }
                    if (left) {
                        neighborsSignificance[index - 1] += 1;
                    }
                    if (right) {
                        neighborsSignificance[index + 1] += 1;
                    }
                    neighborsSignificance[index] |= 128;
                },
                runSignificancePropogationPass: function BitModel_runSignificancePropogationPass() {
                    var decoder = this.decoder;
                    var width = this.width, height = this.height;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var coefficentsSign = this.coefficentsSign;
                    var neighborsSignificance = this.neighborsSignificance;
                    var processingFlags = this.processingFlags;
                    var contexts = this.contexts;
                    var labels = this.contextLabelTable;
                    var bitsDecoded = this.bitsDecoded;
                    var processedInverseMask = ~1;
                    var processedMask = 1;
                    var firstMagnitudeBitMask = 2;
                    for (var i0 = 0; i0 < height; i0 += 4) {
                        for (var j = 0; j < width; j++) {
                            var index = i0 * width + j;
                            for (var i1 = 0; i1 < 4; i1++, index += width) {
                                var i = i0 + i1;
                                if (i >= height) {
                                    break;
                                }
                                processingFlags[index] &= processedInverseMask;
                                if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {
                                    continue;
                                }
                                var contextLabel = labels[neighborsSignificance[index]];
                                var decision = decoder.readBit(contexts, contextLabel);
                                if (decision) {
                                    var sign = this.decodeSignBit(i, j, index);
                                    coefficentsSign[index] = sign;
                                    coefficentsMagnitude[index] = 1;
                                    this.setNeighborsSignificance(i, j, index);
                                    processingFlags[index] |= firstMagnitudeBitMask;
                                }
                                bitsDecoded[index]++;
                                processingFlags[index] |= processedMask;
                            }
                        }
                    }
                },
                decodeSignBit: function BitModel_decodeSignBit(row, column, index) {
                    var width = this.width, height = this.height;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var coefficentsSign = this.coefficentsSign;
                    var contribution, sign0, sign1, significance1;
                    var contextLabel, decoded;
                    significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;
                    if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
                        sign1 = coefficentsSign[index + 1];
                        if (significance1) {
                            sign0 = coefficentsSign[index - 1];
                            contribution = 1 - sign1 - sign0;
                        } else {
                            contribution = 1 - sign1 - sign1;
                        }
                    } else if (significance1) {
                        sign0 = coefficentsSign[index - 1];
                        contribution = 1 - sign0 - sign0;
                    } else {
                        contribution = 0;
                    }
                    var horizontalContribution = 3 * contribution;
                    significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;
                    if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
                        sign1 = coefficentsSign[index + width];
                        if (significance1) {
                            sign0 = coefficentsSign[index - width];
                            contribution = 1 - sign1 - sign0 + horizontalContribution;
                        } else {
                            contribution = 1 - sign1 - sign1 + horizontalContribution;
                        }
                    } else if (significance1) {
                        sign0 = coefficentsSign[index - width];
                        contribution = 1 - sign0 - sign0 + horizontalContribution;
                    } else {
                        contribution = horizontalContribution;
                    }
                    if (contribution >= 0) {
                        contextLabel = 9 + contribution;
                        decoded = this.decoder.readBit(this.contexts, contextLabel);
                    } else {
                        contextLabel = 9 - contribution;
                        decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
                    }
                    return decoded;
                },
                runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {
                    var decoder = this.decoder;
                    var width = this.width, height = this.height;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var neighborsSignificance = this.neighborsSignificance;
                    var contexts = this.contexts;
                    var bitsDecoded = this.bitsDecoded;
                    var processingFlags = this.processingFlags;
                    var processedMask = 1;
                    var firstMagnitudeBitMask = 2;
                    var length = width * height;
                    var width4 = width * 4;
                    for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {
                        indexNext = Math.min(length, index0 + width4);
                        for (var j = 0; j < width; j++) {
                            for (var index = index0 + j; index < indexNext; index += width) {
                                if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                                    continue;
                                }
                                var contextLabel = 16;
                                if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
                                    processingFlags[index] ^= firstMagnitudeBitMask;
                                    var significance = neighborsSignificance[index] & 127;
                                    contextLabel = significance === 0 ? 15 : 14;
                                }
                                var bit = decoder.readBit(contexts, contextLabel);
                                coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;
                                bitsDecoded[index]++;
                                processingFlags[index] |= processedMask;
                            }
                        }
                    }
                },
                runCleanupPass: function BitModel_runCleanupPass() {
                    var decoder = this.decoder;
                    var width = this.width, height = this.height;
                    var neighborsSignificance = this.neighborsSignificance;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var coefficentsSign = this.coefficentsSign;
                    var contexts = this.contexts;
                    var labels = this.contextLabelTable;
                    var bitsDecoded = this.bitsDecoded;
                    var processingFlags = this.processingFlags;
                    var processedMask = 1;
                    var firstMagnitudeBitMask = 2;
                    var oneRowDown = width;
                    var twoRowsDown = width * 2;
                    var threeRowsDown = width * 3;
                    var iNext;
                    for (var i0 = 0; i0 < height; i0 = iNext) {
                        iNext = Math.min(i0 + 4, height);
                        var indexBase = i0 * width;
                        var checkAllEmpty = i0 + 3 < height;
                        for (var j = 0; j < width; j++) {
                            var index0 = indexBase + j;
                            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;
                            var i1 = 0, index = index0;
                            var i = i0, sign;
                            if (allEmpty) {
                                var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);
                                if (!hasSignificantCoefficent) {
                                    bitsDecoded[index0]++;
                                    bitsDecoded[index0 + oneRowDown]++;
                                    bitsDecoded[index0 + twoRowsDown]++;
                                    bitsDecoded[index0 + threeRowsDown]++;
                                    continue;
                                }
                                i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
                                if (i1 !== 0) {
                                    i = i0 + i1;
                                    index += i1 * width;
                                }
                                sign = this.decodeSignBit(i, j, index);
                                coefficentsSign[index] = sign;
                                coefficentsMagnitude[index] = 1;
                                this.setNeighborsSignificance(i, j, index);
                                processingFlags[index] |= firstMagnitudeBitMask;
                                index = index0;
                                for (var i2 = i0; i2 <= i; i2++, index += width) {
                                    bitsDecoded[index]++;
                                }
                                i1++;
                            }
                            for (i = i0 + i1; i < iNext; i++, index += width) {
                                if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                                    continue;
                                }
                                var contextLabel = labels[neighborsSignificance[index]];
                                var decision = decoder.readBit(contexts, contextLabel);
                                if (decision === 1) {
                                    sign = this.decodeSignBit(i, j, index);
                                    coefficentsSign[index] = sign;
                                    coefficentsMagnitude[index] = 1;
                                    this.setNeighborsSignificance(i, j, index);
                                    processingFlags[index] |= firstMagnitudeBitMask;
                                }
                                bitsDecoded[index]++;
                            }
                        }
                    }
                },
                checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {
                    var decoder = this.decoder;
                    var contexts = this.contexts;
                    var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
                    if (symbol !== 10) {
                        throw new Error("JPX Error: Invalid segmentation symbol");
                    }
                }
            };
            return BitModel;
        }();
        var Transform = function TransformClosure() {
            function Transform() {}
            Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {
                var ll = subbands[0];
                for (var i = 1, ii = subbands.length; i < ii; i++) {
                    ll = this.iterate(ll, subbands[i], u0, v0);
                }
                return ll;
            };
            Transform.prototype.extend = function extend(buffer, offset, size) {
                var i1 = offset - 1, j1 = offset + 1;
                var i2 = offset + size - 2, j2 = offset + size;
                buffer[i1--] = buffer[j1++];
                buffer[j2++] = buffer[i2--];
                buffer[i1--] = buffer[j1++];
                buffer[j2++] = buffer[i2--];
                buffer[i1--] = buffer[j1++];
                buffer[j2++] = buffer[i2--];
                buffer[i1] = buffer[j1];
                buffer[j2] = buffer[i2];
            };
            Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {
                var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;
                var width = hl_lh_hh.width;
                var height = hl_lh_hh.height;
                var items = hl_lh_hh.items;
                var i, j, k, l, u, v;
                for (k = 0, i = 0; i < llHeight; i++) {
                    l = i * 2 * width;
                    for (j = 0; j < llWidth; j++, k++, l += 2) {
                        items[l] = llItems[k];
                    }
                }
                llItems = ll.items = null;
                var bufferPadding = 4;
                var rowBuffer = new Float32Array(width + 2 * bufferPadding);
                if (width === 1) {
                    if ((u0 & 1) !== 0) {
                        for (v = 0, k = 0; v < height; v++, k += width) {
                            items[k] *= .5;
                        }
                    }
                } else {
                    for (v = 0, k = 0; v < height; v++, k += width) {
                        rowBuffer.set(items.subarray(k, k + width), bufferPadding);
                        this.extend(rowBuffer, bufferPadding, width);
                        this.filter(rowBuffer, bufferPadding, width);
                        items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);
                    }
                }
                var numBuffers = 16;
                var colBuffers = [];
                for (i = 0; i < numBuffers; i++) {
                    colBuffers.push(new Float32Array(height + 2 * bufferPadding));
                }
                var b, currentBuffer = 0;
                ll = bufferPadding + height;
                if (height === 1) {
                    if ((v0 & 1) !== 0) {
                        for (u = 0; u < width; u++) {
                            items[u] *= .5;
                        }
                    }
                } else {
                    for (u = 0; u < width; u++) {
                        if (currentBuffer === 0) {
                            numBuffers = Math.min(width - u, numBuffers);
                            for (k = u, l = bufferPadding; l < ll; k += width, l++) {
                                for (b = 0; b < numBuffers; b++) {
                                    colBuffers[b][l] = items[k + b];
                                }
                            }
                            currentBuffer = numBuffers;
                        }
                        currentBuffer--;
                        var buffer = colBuffers[currentBuffer];
                        this.extend(buffer, bufferPadding, height);
                        this.filter(buffer, bufferPadding, height);
                        if (currentBuffer === 0) {
                            k = u - numBuffers + 1;
                            for (l = bufferPadding; l < ll; k += width, l++) {
                                for (b = 0; b < numBuffers; b++) {
                                    items[k + b] = colBuffers[b][l];
                                }
                            }
                        }
                    }
                }
                return {
                    width: width,
                    height: height,
                    items: items
                };
            };
            return Transform;
        }();
        var IrreversibleTransform = function IrreversibleTransformClosure() {
            function IrreversibleTransform() {
                Transform.call(this);
            }
            IrreversibleTransform.prototype = Object.create(Transform.prototype);
            IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {
                var len = length >> 1;
                offset = offset | 0;
                var j, n, current, next;
                var alpha = -1.586134342059924;
                var beta = -.052980118572961;
                var gamma = .882911075530934;
                var delta = .443506852043971;
                var K = 1.230174104914001;
                var K_ = 1 / K;
                j = offset - 3;
                for (n = len + 4; n--; j += 2) {
                    x[j] *= K_;
                }
                j = offset - 2;
                current = delta * x[j - 1];
                for (n = len + 3; n--; j += 2) {
                    next = delta * x[j + 1];
                    x[j] = K * x[j] - current - next;
                    if (n--) {
                        j += 2;
                        current = delta * x[j + 1];
                        x[j] = K * x[j] - current - next;
                    } else {
                        break;
                    }
                }
                j = offset - 1;
                current = gamma * x[j - 1];
                for (n = len + 2; n--; j += 2) {
                    next = gamma * x[j + 1];
                    x[j] -= current + next;
                    if (n--) {
                        j += 2;
                        current = gamma * x[j + 1];
                        x[j] -= current + next;
                    } else {
                        break;
                    }
                }
                j = offset;
                current = beta * x[j - 1];
                for (n = len + 1; n--; j += 2) {
                    next = beta * x[j + 1];
                    x[j] -= current + next;
                    if (n--) {
                        j += 2;
                        current = beta * x[j + 1];
                        x[j] -= current + next;
                    } else {
                        break;
                    }
                }
                if (len !== 0) {
                    j = offset + 1;
                    current = alpha * x[j - 1];
                    for (n = len; n--; j += 2) {
                        next = alpha * x[j + 1];
                        x[j] -= current + next;
                        if (n--) {
                            j += 2;
                            current = alpha * x[j + 1];
                            x[j] -= current + next;
                        } else {
                            break;
                        }
                    }
                }
            };
            return IrreversibleTransform;
        }();
        var ReversibleTransform = function ReversibleTransformClosure() {
            function ReversibleTransform() {
                Transform.call(this);
            }
            ReversibleTransform.prototype = Object.create(Transform.prototype);
            ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {
                var len = length >> 1;
                offset = offset | 0;
                var j, n;
                for (j = offset, n = len + 1; n--; j += 2) {
                    x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;
                }
                for (j = offset + 1, n = len; n--; j += 2) {
                    x[j] += x[j - 1] + x[j + 1] >> 1;
                }
            };
            return ReversibleTransform;
        }();
        return JpxImage;
    }();
    "use strict";
    var Jbig2Image = function Jbig2ImageClosure() {
        function ContextCache() {}
        ContextCache.prototype = {
            getContexts: function(id) {
                if (id in this) {
                    return this[id];
                }
                return this[id] = new Int8Array(1 << 16);
            }
        };
        function DecodingContext(data, start, end) {
            this.data = data;
            this.start = start;
            this.end = end;
        }
        DecodingContext.prototype = {
            get decoder() {
                var decoder = new ArithmeticDecoder(this.data, this.start, this.end);
                return shadow(this, "decoder", decoder);
            },
            get contextCache() {
                var cache = new ContextCache();
                return shadow(this, "contextCache", cache);
            }
        };
        function decodeInteger(contextCache, procedure, decoder) {
            var contexts = contextCache.getContexts(procedure);
            var prev = 1;
            function readBits(length) {
                var v = 0;
                for (var i = 0; i < length; i++) {
                    var bit = decoder.readBit(contexts, prev);
                    prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;
                    v = v << 1 | bit;
                }
                return v >>> 0;
            }
            var sign = readBits(1);
            var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);
            return sign === 0 ? value : value > 0 ? -value : null;
        }
        function decodeIAID(contextCache, decoder, codeLength) {
            var contexts = contextCache.getContexts("IAID");
            var prev = 1;
            for (var i = 0; i < codeLength; i++) {
                var bit = decoder.readBit(contexts, prev);
                prev = prev << 1 | bit;
            }
            if (codeLength < 31) {
                return prev & (1 << codeLength) - 1;
            }
            return prev & 2147483647;
        }
        var SegmentTypes = [ "SymbolDictionary", null, null, null, "IntermediateTextRegion", null, "ImmediateTextRegion", "ImmediateLosslessTextRegion", null, null, null, null, null, null, null, null, "patternDictionary", null, null, null, "IntermediateHalftoneRegion", null, "ImmediateHalftoneRegion", "ImmediateLosslessHalftoneRegion", null, null, null, null, null, null, null, null, null, null, null, null, "IntermediateGenericRegion", null, "ImmediateGenericRegion", "ImmediateLosslessGenericRegion", "IntermediateGenericRefinementRegion", null, "ImmediateGenericRefinementRegion", "ImmediateLosslessGenericRefinementRegion", null, null, null, null, "PageInformation", "EndOfPage", "EndOfStripe", "EndOfFile", "Profiles", "Tables", null, null, null, null, null, null, null, null, "Extension" ];
        var CodingTemplates = [ [ {
            x: -1,
            y: -2
        }, {
            x: 0,
            y: -2
        }, {
            x: 1,
            y: -2
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: 2,
            y: -1
        }, {
            x: -4,
            y: 0
        }, {
            x: -3,
            y: 0
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        } ], [ {
            x: -1,
            y: -2
        }, {
            x: 0,
            y: -2
        }, {
            x: 1,
            y: -2
        }, {
            x: 2,
            y: -2
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: 2,
            y: -1
        }, {
            x: -3,
            y: 0
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        } ], [ {
            x: -1,
            y: -2
        }, {
            x: 0,
            y: -2
        }, {
            x: 1,
            y: -2
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        } ], [ {
            x: -3,
            y: -1
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: -4,
            y: 0
        }, {
            x: -3,
            y: 0
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        } ] ];
        var RefinementTemplates = [ {
            coding: [ {
                x: 0,
                y: -1
            }, {
                x: 1,
                y: -1
            }, {
                x: -1,
                y: 0
            } ],
            reference: [ {
                x: 0,
                y: -1
            }, {
                x: 1,
                y: -1
            }, {
                x: -1,
                y: 0
            }, {
                x: 0,
                y: 0
            }, {
                x: 1,
                y: 0
            }, {
                x: -1,
                y: 1
            }, {
                x: 0,
                y: 1
            }, {
                x: 1,
                y: 1
            } ]
        }, {
            coding: [ {
                x: -1,
                y: -1
            }, {
                x: 0,
                y: -1
            }, {
                x: 1,
                y: -1
            }, {
                x: -1,
                y: 0
            } ],
            reference: [ {
                x: 0,
                y: -1
            }, {
                x: -1,
                y: 0
            }, {
                x: 0,
                y: 0
            }, {
                x: 1,
                y: 0
            }, {
                x: 0,
                y: 1
            }, {
                x: 1,
                y: 1
            } ]
        } ];
        var ReusedContexts = [ 39717, 1941, 229, 405 ];
        var RefinementReusedContexts = [ 32, 8 ];
        function decodeBitmapTemplate0(width, height, decodingContext) {
            var decoder = decodingContext.decoder;
            var contexts = decodingContext.contextCache.getContexts("GB");
            var contextLabel, i, j, pixel, row, row1, row2, bitmap = [];
            var OLD_PIXEL_MASK = 31735;
            for (i = 0; i < height; i++) {
                row = bitmap[i] = new Uint8Array(width);
                row1 = i < 1 ? row : bitmap[i - 1];
                row2 = i < 2 ? row : bitmap[i - 2];
                contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;
                for (j = 0; j < width; j++) {
                    row[j] = pixel = decoder.readBit(contexts, contextLabel);
                    contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;
                }
            }
            return bitmap;
        }
        function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {
            if (mmr) {
                error("JBIG2 error: MMR encoding is not supported");
            }
            if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {
                return decodeBitmapTemplate0(width, height, decodingContext);
            }
            var useskip = !!skip;
            var template = CodingTemplates[templateIndex].concat(at);
            template.sort(function(a, b) {
                return a.y - b.y || a.x - b.x;
            });
            var templateLength = template.length;
            var templateX = new Int8Array(templateLength);
            var templateY = new Int8Array(templateLength);
            var changingTemplateEntries = [];
            var reuseMask = 0, minX = 0, maxX = 0, minY = 0;
            var c, k;
            for (k = 0; k < templateLength; k++) {
                templateX[k] = template[k].x;
                templateY[k] = template[k].y;
                minX = Math.min(minX, template[k].x);
                maxX = Math.max(maxX, template[k].x);
                minY = Math.min(minY, template[k].y);
                if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {
                    reuseMask |= 1 << templateLength - 1 - k;
                } else {
                    changingTemplateEntries.push(k);
                }
            }
            var changingEntriesLength = changingTemplateEntries.length;
            var changingTemplateX = new Int8Array(changingEntriesLength);
            var changingTemplateY = new Int8Array(changingEntriesLength);
            var changingTemplateBit = new Uint16Array(changingEntriesLength);
            for (c = 0; c < changingEntriesLength; c++) {
                k = changingTemplateEntries[c];
                changingTemplateX[c] = template[k].x;
                changingTemplateY[c] = template[k].y;
                changingTemplateBit[c] = 1 << templateLength - 1 - k;
            }
            var sbb_left = -minX;
            var sbb_top = -minY;
            var sbb_right = width - maxX;
            var pseudoPixelContext = ReusedContexts[templateIndex];
            var row = new Uint8Array(width);
            var bitmap = [];
            var decoder = decodingContext.decoder;
            var contexts = decodingContext.contextCache.getContexts("GB");
            var ltp = 0, j, i0, j0, contextLabel = 0, bit, shift;
            for (var i = 0; i < height; i++) {
                if (prediction) {
                    var sltp = decoder.readBit(contexts, pseudoPixelContext);
                    ltp ^= sltp;
                    if (ltp) {
                        bitmap.push(row);
                        continue;
                    }
                }
                row = new Uint8Array(row);
                bitmap.push(row);
                for (j = 0; j < width; j++) {
                    if (useskip && skip[i][j]) {
                        row[j] = 0;
                        continue;
                    }
                    if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
                        contextLabel = contextLabel << 1 & reuseMask;
                        for (k = 0; k < changingEntriesLength; k++) {
                            i0 = i + changingTemplateY[k];
                            j0 = j + changingTemplateX[k];
                            bit = bitmap[i0][j0];
                            if (bit) {
                                bit = changingTemplateBit[k];
                                contextLabel |= bit;
                            }
                        }
                    } else {
                        contextLabel = 0;
                        shift = templateLength - 1;
                        for (k = 0; k < templateLength; k++, shift--) {
                            j0 = j + templateX[k];
                            if (j0 >= 0 && j0 < width) {
                                i0 = i + templateY[k];
                                if (i0 >= 0) {
                                    bit = bitmap[i0][j0];
                                    if (bit) {
                                        contextLabel |= bit << shift;
                                    }
                                }
                            }
                        }
                    }
                    var pixel = decoder.readBit(contexts, contextLabel);
                    row[j] = pixel;
                }
            }
            return bitmap;
        }
        function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {
            var codingTemplate = RefinementTemplates[templateIndex].coding;
            if (templateIndex === 0) {
                codingTemplate = codingTemplate.concat([ at[0] ]);
            }
            var codingTemplateLength = codingTemplate.length;
            var codingTemplateX = new Int32Array(codingTemplateLength);
            var codingTemplateY = new Int32Array(codingTemplateLength);
            var k;
            for (k = 0; k < codingTemplateLength; k++) {
                codingTemplateX[k] = codingTemplate[k].x;
                codingTemplateY[k] = codingTemplate[k].y;
            }
            var referenceTemplate = RefinementTemplates[templateIndex].reference;
            if (templateIndex === 0) {
                referenceTemplate = referenceTemplate.concat([ at[1] ]);
            }
            var referenceTemplateLength = referenceTemplate.length;
            var referenceTemplateX = new Int32Array(referenceTemplateLength);
            var referenceTemplateY = new Int32Array(referenceTemplateLength);
            for (k = 0; k < referenceTemplateLength; k++) {
                referenceTemplateX[k] = referenceTemplate[k].x;
                referenceTemplateY[k] = referenceTemplate[k].y;
            }
            var referenceWidth = referenceBitmap[0].length;
            var referenceHeight = referenceBitmap.length;
            var pseudoPixelContext = RefinementReusedContexts[templateIndex];
            var bitmap = [];
            var decoder = decodingContext.decoder;
            var contexts = decodingContext.contextCache.getContexts("GR");
            var ltp = 0;
            for (var i = 0; i < height; i++) {
                if (prediction) {
                    var sltp = decoder.readBit(contexts, pseudoPixelContext);
                    ltp ^= sltp;
                    if (ltp) {
                        error("JBIG2 error: prediction is not supported");
                    }
                }
                var row = new Uint8Array(width);
                bitmap.push(row);
                for (var j = 0; j < width; j++) {
                    var i0, j0;
                    var contextLabel = 0;
                    for (k = 0; k < codingTemplateLength; k++) {
                        i0 = i + codingTemplateY[k];
                        j0 = j + codingTemplateX[k];
                        if (i0 < 0 || j0 < 0 || j0 >= width) {
                            contextLabel <<= 1;
                        } else {
                            contextLabel = contextLabel << 1 | bitmap[i0][j0];
                        }
                    }
                    for (k = 0; k < referenceTemplateLength; k++) {
                        i0 = i + referenceTemplateY[k] + offsetY;
                        j0 = j + referenceTemplateX[k] + offsetX;
                        if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {
                            contextLabel <<= 1;
                        } else {
                            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];
                        }
                    }
                    var pixel = decoder.readBit(contexts, contextLabel);
                    row[j] = pixel;
                }
            }
            return bitmap;
        }
        function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext) {
            if (huffman) {
                error("JBIG2 error: huffman is not supported");
            }
            var newSymbols = [];
            var currentHeight = 0;
            var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);
            var decoder = decodingContext.decoder;
            var contextCache = decodingContext.contextCache;
            while (newSymbols.length < numberOfNewSymbols) {
                var deltaHeight = decodeInteger(contextCache, "IADH", decoder);
                currentHeight += deltaHeight;
                var currentWidth = 0;
                var totalWidth = 0;
                while (true) {
                    var deltaWidth = decodeInteger(contextCache, "IADW", decoder);
                    if (deltaWidth === null) {
                        break;
                    }
                    currentWidth += deltaWidth;
                    totalWidth += currentWidth;
                    var bitmap;
                    if (refinement) {
                        var numberOfInstances = decodeInteger(contextCache, "IAAI", decoder);
                        if (numberOfInstances > 1) {
                            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext);
                        } else {
                            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
                            var rdx = decodeInteger(contextCache, "IARDX", decoder);
                            var rdy = decodeInteger(contextCache, "IARDY", decoder);
                            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];
                            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);
                        }
                    } else {
                        bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);
                    }
                    newSymbols.push(bitmap);
                }
            }
            var exportedSymbols = [];
            var flags = [], currentFlag = false;
            var totalSymbolsLength = symbols.length + numberOfNewSymbols;
            while (flags.length < totalSymbolsLength) {
                var runLength = decodeInteger(contextCache, "IAEX", decoder);
                while (runLength--) {
                    flags.push(currentFlag);
                }
                currentFlag = !currentFlag;
            }
            for (var i = 0, ii = symbols.length; i < ii; i++) {
                if (flags[i]) {
                    exportedSymbols.push(symbols[i]);
                }
            }
            for (var j = 0; j < numberOfNewSymbols; i++, j++) {
                if (flags[i]) {
                    exportedSymbols.push(newSymbols[j]);
                }
            }
            return exportedSymbols;
        }
        function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext) {
            if (huffman) {
                error("JBIG2 error: huffman is not supported");
            }
            var bitmap = [];
            var i, row;
            for (i = 0; i < height; i++) {
                row = new Uint8Array(width);
                if (defaultPixelValue) {
                    for (var j = 0; j < width; j++) {
                        row[j] = defaultPixelValue;
                    }
                }
                bitmap.push(row);
            }
            var decoder = decodingContext.decoder;
            var contextCache = decodingContext.contextCache;
            var stripT = -decodeInteger(contextCache, "IADT", decoder);
            var firstS = 0;
            i = 0;
            while (i < numberOfSymbolInstances) {
                var deltaT = decodeInteger(contextCache, "IADT", decoder);
                stripT += deltaT;
                var deltaFirstS = decodeInteger(contextCache, "IAFS", decoder);
                firstS += deltaFirstS;
                var currentS = firstS;
                do {
                    var currentT = stripSize === 1 ? 0 : decodeInteger(contextCache, "IAIT", decoder);
                    var t = stripSize * stripT + currentT;
                    var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
                    var applyRefinement = refinement && decodeInteger(contextCache, "IARI", decoder);
                    var symbolBitmap = inputSymbols[symbolId];
                    var symbolWidth = symbolBitmap[0].length;
                    var symbolHeight = symbolBitmap.length;
                    if (applyRefinement) {
                        var rdw = decodeInteger(contextCache, "IARDW", decoder);
                        var rdh = decodeInteger(contextCache, "IARDH", decoder);
                        var rdx = decodeInteger(contextCache, "IARDX", decoder);
                        var rdy = decodeInteger(contextCache, "IARDY", decoder);
                        symbolWidth += rdw;
                        symbolHeight += rdh;
                        symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);
                    }
                    var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight);
                    var offsetS = currentS - (referenceCorner & 2 ? symbolWidth : 0);
                    var s2, t2, symbolRow;
                    if (transposed) {
                        for (s2 = 0; s2 < symbolHeight; s2++) {
                            row = bitmap[offsetS + s2];
                            if (!row) {
                                continue;
                            }
                            symbolRow = symbolBitmap[s2];
                            var maxWidth = Math.min(width - offsetT, symbolWidth);
                            switch (combinationOperator) {
                              case 0:
                                for (t2 = 0; t2 < maxWidth; t2++) {
                                    row[offsetT + t2] |= symbolRow[t2];
                                }
                                break;

                              case 2:
                                for (t2 = 0; t2 < maxWidth; t2++) {
                                    row[offsetT + t2] ^= symbolRow[t2];
                                }
                                break;

                              default:
                                error("JBIG2 error: operator " + combinationOperator + " is not supported");
                            }
                        }
                        currentS += symbolHeight - 1;
                    } else {
                        for (t2 = 0; t2 < symbolHeight; t2++) {
                            row = bitmap[offsetT + t2];
                            if (!row) {
                                continue;
                            }
                            symbolRow = symbolBitmap[t2];
                            switch (combinationOperator) {
                              case 0:
                                for (s2 = 0; s2 < symbolWidth; s2++) {
                                    row[offsetS + s2] |= symbolRow[s2];
                                }
                                break;

                              case 2:
                                for (s2 = 0; s2 < symbolWidth; s2++) {
                                    row[offsetS + s2] ^= symbolRow[s2];
                                }
                                break;

                              default:
                                error("JBIG2 error: operator " + combinationOperator + " is not supported");
                            }
                        }
                        currentS += symbolWidth - 1;
                    }
                    i++;
                    var deltaS = decodeInteger(contextCache, "IADS", decoder);
                    if (deltaS === null) {
                        break;
                    }
                    currentS += deltaS + dsOffset;
                } while (true);
            }
            return bitmap;
        }
        function readSegmentHeader(data, start) {
            var segmentHeader = {};
            segmentHeader.number = readUint32(data, start);
            var flags = data[start + 4];
            var segmentType = flags & 63;
            if (!SegmentTypes[segmentType]) {
                error("JBIG2 error: invalid segment type: " + segmentType);
            }
            segmentHeader.type = segmentType;
            segmentHeader.typeName = SegmentTypes[segmentType];
            segmentHeader.deferredNonRetain = !!(flags & 128);
            var pageAssociationFieldSize = !!(flags & 64);
            var referredFlags = data[start + 5];
            var referredToCount = referredFlags >> 5 & 7;
            var retainBits = [ referredFlags & 31 ];
            var position = start + 6;
            if (referredFlags === 7) {
                referredToCount = readUint32(data, position - 1) & 536870911;
                position += 3;
                var bytes = referredToCount + 7 >> 3;
                retainBits[0] = data[position++];
                while (--bytes > 0) {
                    retainBits.push(data[position++]);
                }
            } else if (referredFlags === 5 || referredFlags === 6) {
                error("JBIG2 error: invalid referred-to flags");
            }
            segmentHeader.retainBits = retainBits;
            var referredToSegmentNumberSize = segmentHeader.number <= 256 ? 1 : segmentHeader.number <= 65536 ? 2 : 4;
            var referredTo = [];
            var i, ii;
            for (i = 0; i < referredToCount; i++) {
                var number = referredToSegmentNumberSize === 1 ? data[position] : referredToSegmentNumberSize === 2 ? readUint16(data, position) : readUint32(data, position);
                referredTo.push(number);
                position += referredToSegmentNumberSize;
            }
            segmentHeader.referredTo = referredTo;
            if (!pageAssociationFieldSize) {
                segmentHeader.pageAssociation = data[position++];
            } else {
                segmentHeader.pageAssociation = readUint32(data, position);
                position += 4;
            }
            segmentHeader.length = readUint32(data, position);
            position += 4;
            if (segmentHeader.length === 4294967295) {
                if (segmentType === 38) {
                    var genericRegionInfo = readRegionSegmentInformation(data, position);
                    var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];
                    var genericRegionMmr = !!(genericRegionSegmentFlags & 1);
                    var searchPatternLength = 6;
                    var searchPattern = new Uint8Array(searchPatternLength);
                    if (!genericRegionMmr) {
                        searchPattern[0] = 255;
                        searchPattern[1] = 172;
                    }
                    searchPattern[2] = genericRegionInfo.height >>> 24 & 255;
                    searchPattern[3] = genericRegionInfo.height >> 16 & 255;
                    searchPattern[4] = genericRegionInfo.height >> 8 & 255;
                    searchPattern[5] = genericRegionInfo.height & 255;
                    for (i = position, ii = data.length; i < ii; i++) {
                        var j = 0;
                        while (j < searchPatternLength && searchPattern[j] === data[i + j]) {
                            j++;
                        }
                        if (j === searchPatternLength) {
                            segmentHeader.length = i + searchPatternLength;
                            break;
                        }
                    }
                    if (segmentHeader.length === 4294967295) {
                        error("JBIG2 error: segment end was not found");
                    }
                } else {
                    error("JBIG2 error: invalid unknown segment length");
                }
            }
            segmentHeader.headerEnd = position;
            return segmentHeader;
        }
        function readSegments(header, data, start, end) {
            var segments = [];
            var position = start;
            while (position < end) {
                var segmentHeader = readSegmentHeader(data, position);
                position = segmentHeader.headerEnd;
                var segment = {
                    header: segmentHeader,
                    data: data
                };
                if (!header.randomAccess) {
                    segment.start = position;
                    position += segmentHeader.length;
                    segment.end = position;
                }
                segments.push(segment);
                if (segmentHeader.type === 51) {
                    break;
                }
            }
            if (header.randomAccess) {
                for (var i = 0, ii = segments.length; i < ii; i++) {
                    segments[i].start = position;
                    position += segments[i].header.length;
                    segments[i].end = position;
                }
            }
            return segments;
        }
        function readRegionSegmentInformation(data, start) {
            return {
                width: readUint32(data, start),
                height: readUint32(data, start + 4),
                x: readUint32(data, start + 8),
                y: readUint32(data, start + 12),
                combinationOperator: data[start + 16] & 7
            };
        }
        var RegionSegmentInformationFieldLength = 17;
        function processSegment(segment, visitor) {
            var header = segment.header;
            var data = segment.data, position = segment.start, end = segment.end;
            var args, at, i, atLength;
            switch (header.type) {
              case 0:
                var dictionary = {};
                var dictionaryFlags = readUint16(data, position);
                dictionary.huffman = !!(dictionaryFlags & 1);
                dictionary.refinement = !!(dictionaryFlags & 2);
                dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;
                dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;
                dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;
                dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;
                dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
                dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);
                dictionary.template = dictionaryFlags >> 10 & 3;
                dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;
                position += 2;
                if (!dictionary.huffman) {
                    atLength = dictionary.template === 0 ? 4 : 1;
                    at = [];
                    for (i = 0; i < atLength; i++) {
                        at.push({
                            x: readInt8(data, position),
                            y: readInt8(data, position + 1)
                        });
                        position += 2;
                    }
                    dictionary.at = at;
                }
                if (dictionary.refinement && !dictionary.refinementTemplate) {
                    at = [];
                    for (i = 0; i < 2; i++) {
                        at.push({
                            x: readInt8(data, position),
                            y: readInt8(data, position + 1)
                        });
                        position += 2;
                    }
                    dictionary.refinementAt = at;
                }
                dictionary.numberOfExportedSymbols = readUint32(data, position);
                position += 4;
                dictionary.numberOfNewSymbols = readUint32(data, position);
                position += 4;
                args = [ dictionary, header.number, header.referredTo, data, position, end ];
                break;

              case 6:
              case 7:
                var textRegion = {};
                textRegion.info = readRegionSegmentInformation(data, position);
                position += RegionSegmentInformationFieldLength;
                var textRegionSegmentFlags = readUint16(data, position);
                position += 2;
                textRegion.huffman = !!(textRegionSegmentFlags & 1);
                textRegion.refinement = !!(textRegionSegmentFlags & 2);
                textRegion.stripSize = 1 << (textRegionSegmentFlags >> 2 & 3);
                textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;
                textRegion.transposed = !!(textRegionSegmentFlags & 64);
                textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;
                textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;
                textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;
                textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;
                if (textRegion.huffman) {
                    var textRegionHuffmanFlags = readUint16(data, position);
                    position += 2;
                    textRegion.huffmanFS = textRegionHuffmanFlags & 3;
                    textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;
                    textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;
                    textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;
                    textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;
                    textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;
                    textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;
                    textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 14);
                }
                if (textRegion.refinement && !textRegion.refinementTemplate) {
                    at = [];
                    for (i = 0; i < 2; i++) {
                        at.push({
                            x: readInt8(data, position),
                            y: readInt8(data, position + 1)
                        });
                        position += 2;
                    }
                    textRegion.refinementAt = at;
                }
                textRegion.numberOfSymbolInstances = readUint32(data, position);
                position += 4;
                if (textRegion.huffman) {
                    error("JBIG2 error: huffman is not supported");
                }
                args = [ textRegion, header.referredTo, data, position, end ];
                break;

              case 38:
              case 39:
                var genericRegion = {};
                genericRegion.info = readRegionSegmentInformation(data, position);
                position += RegionSegmentInformationFieldLength;
                var genericRegionSegmentFlags = data[position++];
                genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
                genericRegion.template = genericRegionSegmentFlags >> 1 & 3;
                genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
                if (!genericRegion.mmr) {
                    atLength = genericRegion.template === 0 ? 4 : 1;
                    at = [];
                    for (i = 0; i < atLength; i++) {
                        at.push({
                            x: readInt8(data, position),
                            y: readInt8(data, position + 1)
                        });
                        position += 2;
                    }
                    genericRegion.at = at;
                }
                args = [ genericRegion, data, position, end ];
                break;

              case 48:
                var pageInfo = {
                    width: readUint32(data, position),
                    height: readUint32(data, position + 4),
                    resolutionX: readUint32(data, position + 8),
                    resolutionY: readUint32(data, position + 12)
                };
                if (pageInfo.height === 4294967295) {
                    delete pageInfo.height;
                }
                var pageSegmentFlags = data[position + 16];
                var pageStripingInformatiom = readUint16(data, position + 17);
                pageInfo.lossless = !!(pageSegmentFlags & 1);
                pageInfo.refinement = !!(pageSegmentFlags & 2);
                pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;
                pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;
                pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
                pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
                args = [ pageInfo ];
                break;

              case 49:
                break;

              case 50:
                break;

              case 51:
                break;

              case 62:
                break;

              default:
                error("JBIG2 error: segment type " + header.typeName + "(" + header.type + ") is not implemented");
            }
            var callbackName = "on" + header.typeName;
            if (callbackName in visitor) {
                visitor[callbackName].apply(visitor, args);
            }
        }
        function processSegments(segments, visitor) {
            for (var i = 0, ii = segments.length; i < ii; i++) {
                processSegment(segments[i], visitor);
            }
        }
        function parseJbig2(data, start, end) {
            var position = start;
            if (data[position] !== 151 || data[position + 1] !== 74 || data[position + 2] !== 66 || data[position + 3] !== 50 || data[position + 4] !== 13 || data[position + 5] !== 10 || data[position + 6] !== 26 || data[position + 7] !== 10) {
                error("JBIG2 error: invalid header");
            }
            var header = {};
            position += 8;
            var flags = data[position++];
            header.randomAccess = !(flags & 1);
            if (!(flags & 2)) {
                header.numberOfPages = readUint32(data, position);
                position += 4;
            }
            var segments = readSegments(header, data, position, end);
            error("Not implemented");
        }
        function parseJbig2Chunks(chunks) {
            var visitor = new SimpleSegmentVisitor();
            for (var i = 0, ii = chunks.length; i < ii; i++) {
                var chunk = chunks[i];
                var segments = readSegments({}, chunk.data, chunk.start, chunk.end);
                processSegments(segments, visitor);
            }
            return visitor;
        }
        function SimpleSegmentVisitor() {}
        SimpleSegmentVisitor.prototype = {
            onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {
                this.currentPageInfo = info;
                var rowSize = info.width + 7 >> 3;
                var buffer = new Uint8Array(rowSize * info.height);
                if (info.defaultPixelValue) {
                    for (var i = 0, ii = buffer.length; i < ii; i++) {
                        buffer[i] = 255;
                    }
                }
                this.buffer = buffer;
            },
            drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {
                var pageInfo = this.currentPageInfo;
                var width = regionInfo.width, height = regionInfo.height;
                var rowSize = pageInfo.width + 7 >> 3;
                var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;
                var buffer = this.buffer;
                var mask0 = 128 >> (regionInfo.x & 7);
                var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
                var i, j, mask, offset;
                switch (combinationOperator) {
                  case 0:
                    for (i = 0; i < height; i++) {
                        mask = mask0;
                        offset = offset0;
                        for (j = 0; j < width; j++) {
                            if (bitmap[i][j]) {
                                buffer[offset] |= mask;
                            }
                            mask >>= 1;
                            if (!mask) {
                                mask = 128;
                                offset++;
                            }
                        }
                        offset0 += rowSize;
                    }
                    break;

                  case 2:
                    for (i = 0; i < height; i++) {
                        mask = mask0;
                        offset = offset0;
                        for (j = 0; j < width; j++) {
                            if (bitmap[i][j]) {
                                buffer[offset] ^= mask;
                            }
                            mask >>= 1;
                            if (!mask) {
                                mask = 128;
                                offset++;
                            }
                        }
                        offset0 += rowSize;
                    }
                    break;

                  default:
                    error("JBIG2 error: operator " + combinationOperator + " is not supported");
                }
            },
            onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {
                var regionInfo = region.info;
                var decodingContext = new DecodingContext(data, start, end);
                var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);
                this.drawBitmap(regionInfo, bitmap);
            },
            onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {
                this.onImmediateGenericRegion.apply(this, arguments);
            },
            onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {
                var huffmanTables;
                if (dictionary.huffman) {
                    error("JBIG2 error: huffman is not supported");
                }
                var symbols = this.symbols;
                if (!symbols) {
                    this.symbols = symbols = {};
                }
                var inputSymbols = [];
                for (var i = 0, ii = referredSegments.length; i < ii; i++) {
                    inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);
                }
                var decodingContext = new DecodingContext(data, start, end);
                symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext);
            },
            onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {
                var regionInfo = region.info;
                var huffmanTables;
                var symbols = this.symbols;
                var inputSymbols = [];
                for (var i = 0, ii = referredSegments.length; i < ii; i++) {
                    inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);
                }
                var symbolCodeLength = log2(inputSymbols.length);
                var decodingContext = new DecodingContext(data, start, end);
                var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext);
                this.drawBitmap(regionInfo, bitmap);
            },
            onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {
                this.onImmediateTextRegion.apply(this, arguments);
            }
        };
        function Jbig2Image() {}
        Jbig2Image.prototype = {
            parseChunks: function Jbig2Image_parseChunks(chunks) {
                return parseJbig2Chunks(chunks);
            }
        };
        return Jbig2Image;
    }();
    function log2(x) {
        var n = 1, i = 0;
        while (x > n) {
            n <<= 1;
            i++;
        }
        return i;
    }
    function readInt8(data, start) {
        return data[start] << 24 >> 24;
    }
    function readUint16(data, offset) {
        return data[offset] << 8 | data[offset + 1];
    }
    function readUint32(data, offset) {
        return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
    }
    function shadow(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: false
        });
        return value;
    }
    var error = function() {
        console.error.apply(console, arguments);
        throw new Error("PDFJS error: " + arguments[0]);
    };
    var warn = function() {
        console.warn.apply(console, arguments);
    };
    var info = function() {
        console.info.apply(console, arguments);
    };
    Jbig2Image.prototype.parse = function parseJbig2(data) {
        var position = 0, end = data.length;
        if (data[position] !== 151 || data[position + 1] !== 74 || data[position + 2] !== 66 || data[position + 3] !== 50 || data[position + 4] !== 13 || data[position + 5] !== 10 || data[position + 6] !== 26 || data[position + 7] !== 10) {
            error("JBIG2 error: invalid header");
        }
        var header = {};
        position += 8;
        var flags = data[position++];
        header.randomAccess = !(flags & 1);
        if (!(flags & 2)) {
            header.numberOfPages = readUint32(data, position);
            position += 4;
        }
        var visitor = this.parseChunks([ {
            data: data,
            start: position,
            end: end
        } ]);
        var width = visitor.currentPageInfo.width;
        var height = visitor.currentPageInfo.height;
        var bitPacked = visitor.buffer;
        var data = new Uint8Array(width * height);
        var q = 0, k = 0;
        for (var i = 0; i < height; i++) {
            var mask = 0, buffer;
            for (var j = 0; j < width; j++) {
                if (!mask) {
                    mask = 128;
                    buffer = bitPacked[k++];
                }
                data[q++] = buffer & mask ? 0 : 255;
                mask >>= 1;
            }
        }
        this.width = width;
        this.height = height;
        this.data = data;
    };
    PDFJS.JpegImage = JpegImage;
    PDFJS.JpxImage = JpxImage;
    PDFJS.Jbig2Image = Jbig2Image;
})(PDFJS || (PDFJS = {}));

var JpegDecoder = PDFJS.JpegImage;

var JpxDecoder = PDFJS.JpxImage;

var Jbig2Decoder = PDFJS.Jbig2Image;

if (true) {
    module.exports = {
        JpegImage: JpegImage,
        JpegDecoder: JpegDecoder,
        JpxDecoder: JpxDecoder,
        Jbig2Decoder: Jbig2Decoder
    };
}


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export LEGACY_URL_PREFIX */
/* unused harmony export NDSTORE_URL_PREFIX */
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var LEGACY_URL_PREFIX = '/ocp/ca';
var NDSTORE_URL_PREFIX = '/nd/sd';
class VolumeChunkSourceParameters {
    static stringify(parameters) {
        return `ndstore:volume:${parameters.baseUrls[0]}/${parameters.key}/` + `${parameters.channel}/${parameters.resolution}/${parameters.encoding}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = VolumeChunkSourceParameters;

VolumeChunkSourceParameters.RPC_ID = 'ndstore/VolumeChunkSource';

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseNpy;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_json__ = __webpack_require__(5);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var supportedDataTypes = new Map();
supportedDataTypes.set('|u1', {
    arrayConstructor: Uint8Array,
    fixEndianness: () => {},
    javascriptElementsPerArrayElement: 1,
    elementBytes: 1,
    dataType: __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__["b" /* DataType */].UINT8
});
supportedDataTypes.set('|i1', {
    arrayConstructor: Uint8Array,
    fixEndianness: () => {},
    javascriptElementsPerArrayElement: 1,
    elementBytes: 1,
    dataType: __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__["b" /* DataType */].UINT8
});

var _loop = function (_ref) {
    _ref2 = _slicedToArray(_ref, 2);
    var endiannessChar = _ref2[0];
    var endianness = _ref2[1];

    // For now, treat both signed and unsigned integer types as unsigned.
    for (var typeChar of ['u', 'i']) {
        supportedDataTypes.set(`${endiannessChar}${typeChar}2`, {
            arrayConstructor: Uint16Array,
            elementBytes: 2,
            fixEndianness: array => {
                Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__["c" /* convertEndian16 */])(array, endianness);
            },
            javascriptElementsPerArrayElement: 1,
            dataType: __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__["b" /* DataType */].UINT16
        });
        supportedDataTypes.set(`${endiannessChar}${typeChar}4`, {
            arrayConstructor: Uint32Array,
            elementBytes: 4,
            fixEndianness: array => {
                Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__["d" /* convertEndian32 */])(array, endianness);
            },
            javascriptElementsPerArrayElement: 1,
            dataType: __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__["b" /* DataType */].UINT32
        });
        supportedDataTypes.set(`${endiannessChar}${typeChar}8`, {
            arrayConstructor: Uint32Array,
            elementBytes: 8,
            // We still maintain the low 32-bit value first.
            fixEndianness: array => {
                Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__["d" /* convertEndian32 */])(array, endianness);
            },
            javascriptElementsPerArrayElement: 2,
            dataType: __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__["b" /* DataType */].UINT64
        });
    }
    supportedDataTypes.set(`${endiannessChar}f4`, {
        arrayConstructor: Float32Array,
        elementBytes: 4,
        fixEndianness: array => {
            Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__["d" /* convertEndian32 */])(array, endianness);
        },
        javascriptElementsPerArrayElement: 1,
        dataType: __WEBPACK_IMPORTED_MODULE_0_neuroglancer_util_data_type__["b" /* DataType */].FLOAT32
    });
};

for (var _ref of [['<', __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__["b" /* Endianness */].LITTLE], ['>', __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_endian__["b" /* Endianness */].BIG]]) {
    var _ref2;

    _loop(_ref);
}
class NumpyArray {
    constructor(data, shape, dataType, fortranOrder) {
        this.data = data;
        this.shape = shape;
        this.dataType = dataType;
        this.fortranOrder = fortranOrder;
    }
}
/* unused harmony export NumpyArray */

function parseNpy(x) {
    // Verify 6-byte magic sequence: 147, 78, 85, 77, 80, 89
    if (x[0] !== 147 || x[1] !== 78 || x[2] !== 85 || x[3] !== 77 || x[4] !== 80 || x[5] !== 89) {
        throw new Error('Data does not match npy format.');
    }
    var majorVersion = x[6],
        minorVersion = x[7];
    if (majorVersion !== 1 || minorVersion !== 0) {
        throw new Error(`Unsupported npy version ${majorVersion}.${minorVersion}`);
    }
    var dv = new DataView(x.buffer, x.byteOffset, x.byteLength);
    var headerLength = dv.getUint16(8, /*littleEndian=*/true);
    var header = new TextDecoder('utf-8').decode(x.subarray(10, headerLength + 10));
    var headerObject = void 0;
    var dataOffset = headerLength + 10;
    try {
        headerObject = Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_json__["b" /* pythonLiteralParse */])(header);
    } catch (e) {
        throw new Error(`Failed to parse npy header: ${e}`);
    }
    var dtype = headerObject['descr'];
    var shape = headerObject['shape'];
    var numElements = 1;
    if (!Array.isArray(shape)) {
        throw new Error('Invalid shape ${JSON.stringify(shape)}');
    }
    for (var dim of shape) {
        if (typeof dim !== 'number') {
            throw new Error('Invalid shape ${JSON.stringify(shape)}');
        }
        numElements *= dim;
    }
    var supportedDataType = supportedDataTypes.get(dtype);
    if (supportedDataType === undefined) {
        throw new Error(`Unsupported numpy data type ${JSON.stringify(dtype)}`);
    }
    var arrayConstructor = supportedDataType.arrayConstructor,
        javascriptElementsPerArrayElement = supportedDataType.javascriptElementsPerArrayElement;

    var javascriptElements = javascriptElementsPerArrayElement * numElements;
    var totalDataBytes = arrayConstructor.BYTES_PER_ELEMENT * javascriptElements;
    if (totalDataBytes + dataOffset !== x.byteLength) {
        throw new Error('Expected length does not match length of data');
    }
    var data = new arrayConstructor(x.buffer, x.byteOffset + dataOffset, javascriptElements);
    supportedDataType.fixEndianness(data);
    return new NumpyArray(data, shape, supportedDataType, headerObject['fortran_order'] === true);
}

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_deflate = __webpack_require__(84);
var utils        = __webpack_require__(4);
var strings      = __webpack_require__(44);
var msg          = __webpack_require__(26);
var ZStream      = __webpack_require__(45);

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(4);
var trees   = __webpack_require__(85);
var adler32 = __webpack_require__(42);
var crc32   = __webpack_require__(43);
var msg     = __webpack_require__(26);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(4);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_inflate = __webpack_require__(87);
var utils        = __webpack_require__(4);
var strings      = __webpack_require__(44);
var c            = __webpack_require__(46);
var msg          = __webpack_require__(26);
var ZStream      = __webpack_require__(45);
var GZheader     = __webpack_require__(90);

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(4);
var adler32       = __webpack_require__(42);
var crc32         = __webpack_require__(43);
var inflate_fast  = __webpack_require__(88);
var inflate_table = __webpack_require__(89);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(4);

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileChunkSource", function() { return TileChunkSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_dvid_base__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_jpeg__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_http_request__ = __webpack_require__(8);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};






var TILE_CHUNK_DECODERS = new Map([[__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_dvid_base__["b" /* TileEncoding */].JPEG, __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */]]]);
var VolumeChunkSource = class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
    }
    download(chunk, cancellationToken) {
        var params = this.parameters;
        var path = void 0;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            var chunkPosition = this.computeChunkBounds(chunk);
            var chunkDataSize = chunk.chunkDataSize;
            // if the volume is an image, get a jpeg
            path = this.getPath(chunkPosition, chunkDataSize);
        }
        var decoder = this.getDecoder(params);
        return Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(params.baseUrls, path), 'arraybuffer', cancellationToken).then(response => decoder(chunk, response));
    }
    getPath(chunkPosition, chunkDataSize) {
        var params = this.parameters;
        if (params.encoding === __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_dvid_base__["c" /* VolumeChunkEncoding */].JPEG) {
            return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` + `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` + `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}/jpeg`;
        } else {
            // encoding is COMPRESSED_SEGMENTATION
            return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` + `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` + `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}?compression=googlegzip`;
        }
    }
    getDecoder(params) {
        if (params.encoding === __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_dvid_base__["c" /* VolumeChunkEncoding */].JPEG) {
            return __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */];
        } else {
            // encoding is COMPRESSED_SEGMENTATION
            return __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__["a" /* decodeCompressedSegmentationChunk */];
        }
    }
};
VolumeChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_dvid_base__["d" /* VolumeChunkSourceParameters */])], VolumeChunkSource);

var TileChunkSource = class TileChunkSource extends __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor() {
        super(...arguments);
        this.chunkDecoder = TILE_CHUNK_DECODERS.get(this.parameters['encoding']);
    }
    download(chunk, cancellationToken) {
        var params = this.parameters;
        var chunkGridPosition = chunk.chunkGridPosition;
        // Needed by decoder.

        chunk.chunkDataSize = this.spec.chunkDataSize;
        var path = `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/tile/` + `${params['dims']}/${params['level']}/` + `${chunkGridPosition[0]}_${chunkGridPosition[1]}_${chunkGridPosition[2]}`;
        return Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(params.baseUrls, path), 'arraybuffer', cancellationToken).then(response => this.chunkDecoder(chunk, response));
    }
};
TileChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_dvid_base__["a" /* TileChunkSourceParameters */])], TileChunkSource);


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return VolumeChunkEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TileEncoding; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 0] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 1] = "COMPRESSED_SEGMENTATION";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class DVIDSourceParameters {}
/* unused harmony export DVIDSourceParameters */

class VolumeChunkSourceParameters extends DVIDSourceParameters {
    static stringify(parameters) {
        return `dvid:volume:${parameters['baseUrls'][0]}/` + `${parameters['nodeKey']}/${parameters['dataInstanceKey']}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["d"] = VolumeChunkSourceParameters;

VolumeChunkSourceParameters.RPC_ID = 'dvid/VolumeChunkSource';
var TileEncoding;
(function (TileEncoding) {
    TileEncoding[TileEncoding["JPEG"] = 0] = "JPEG";
})(TileEncoding || (TileEncoding = {}));
class TileChunkSourceParameters extends DVIDSourceParameters {
    static stringify(parameters) {
        return `dvid:volume:${parameters['baseUrls'][0]}/${parameters['nodeKey']}/` + `${parameters['dataInstanceKey']}/${parameters['dims']}/${parameters['level']}/` + `${TileEncoding[parameters['encoding']]}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileChunkSourceParameters;

TileChunkSourceParameters.RPC_ID = 'dvid/TileChunkSource';

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileChunkSource", function() { return TileChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointMatchSource", function() { return PointMatchSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_render_base__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_backend_chunk_decoders_jpeg__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_vector_graphics_backend__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_float32array_builder__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__ = __webpack_require__(5);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var chunkDecoders = new Map();
chunkDecoders.set('jpg', __WEBPACK_IMPORTED_MODULE_2_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */]);
var TileChunkSource = class TileChunkSource extends __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
    }
    download(chunk, cancellationToken) {
        var parameters = this.parameters;
        var chunkGridPosition = chunk.chunkGridPosition;
        // Calculate scale.

        var scale = 1.0 / Math.pow(2, parameters.level);
        // Needed by JPEG decoder.
        chunk.chunkDataSize = this.spec.chunkDataSize;
        var xTileSize = chunk.chunkDataSize[0] * Math.pow(2, parameters.level);
        var yTileSize = chunk.chunkDataSize[1] * Math.pow(2, parameters.level);
        // Convert grid position to global coordinates position.
        var chunkPosition = __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].create();
        chunkPosition[0] = chunkGridPosition[0] * xTileSize;
        chunkPosition[1] = chunkGridPosition[1] * yTileSize;
        chunkPosition[2] = chunkGridPosition[2];
        // GET
        // /v1/owner/{owner}/project/{project}/stack/{stack}/z/{z}/box/{x},{y},{width},{height},{scale}/jpeg-image
        var path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` + `stack/${parameters.stack}/z/${chunkPosition[2]}/` + `box/${chunkPosition[0]},${chunkPosition[1]},${xTileSize},${yTileSize},${scale}/jpeg-image`;
        return Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path), 'arraybuffer', cancellationToken).then(response => this.chunkDecoder(chunk, response));
    }
};
TileChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_render_base__["b" /* TileChunkSourceParameters */])], TileChunkSource);

function decodeSectionIDs(response) {
    var sectionIDs = [];
    Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["a" /* parseArray */])(response, x => {
        Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["e" /* verifyObject */])(x);
        sectionIDs.push(Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["g" /* verifyString */])(x['sectionId']));
    });
    return sectionIDs;
}
function createConversionObject(tileId, xcoord, ycoord) {
    return { 'tileId': tileId, 'local': [xcoord, ycoord] };
}
function conversionObjectToWorld(conversionObjectArray, parameters, cancellationToken) {
    var path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` + `stack/${parameters.stack}/local-to-world-coordinates`;
    return Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["d" /* sendHttpJsonPostRequest */])(Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path, 'PUT'), conversionObjectArray, 'json', cancellationToken);
}
function decodePointMatches(chunk, response, parameters, cancellationToken) {
    var conversionObjects = new Array();
    Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["a" /* parseArray */])(response, matchObj => {
        var pId = Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["g" /* verifyString */])(matchObj['pId']);
        var qId = Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["g" /* verifyString */])(matchObj['qId']);
        var matches = Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["e" /* verifyObject */])(matchObj['matches']);
        var pMatches = matches['p']; // [[x],[y]]
        var qMatches = matches['q'];
        // Create conversion objects
        for (var i = 0; i < pMatches[0].length; i++) {
            // Create pConversion
            conversionObjects.push(createConversionObject(pId, pMatches[0][i], pMatches[1][i]));
            // Create qConversion
            conversionObjects.push(createConversionObject(qId, qMatches[0][i], qMatches[1][i]));
        }
    });
    return conversionObjectToWorld(conversionObjects, parameters, cancellationToken).then(allConvertedCoordinates => {
        var vertexPositions = new __WEBPACK_IMPORTED_MODULE_5_neuroglancer_util_float32array_builder__["a" /* Float32ArrayBuilder */]();
        for (var i = 0; i < allConvertedCoordinates.length; i++) {
            var convertedCoordinate = Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["e" /* verifyObject */])(allConvertedCoordinates[i]);
            var point = Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_json__["d" /* verify3dVec */])(convertedCoordinate['world']);
            vertexPositions.appendArray(point);
        }
        chunk.vertexPositions = vertexPositions.view;
    });
}
function getPointMatches(chunk, sectionIds, parameters, cancellationToken) {
    var path = void 0;
    if (sectionIds.length === 1) {
        path = `/render-ws/v1/owner/${parameters.owner}/matchCollection/` + `${parameters.matchCollection}/group/${sectionIds[0]}/matchesWith/${sectionIds[0]}`;
    } else if (sectionIds.length === 2) {
        path = `/render-ws/v1/owner/${parameters.owner}/matchCollection/` + `${parameters.matchCollection}/group/${sectionIds[0]}/matchesWith/${sectionIds[1]}`;
    } else {
        throw new Error(`Invalid section Id vector of length: ${JSON.stringify(sectionIds.length)}`);
    }
    return Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path), 'json', cancellationToken).then(response => {
        return decodePointMatches(chunk, response, parameters, cancellationToken);
    });
}
function downloadPointMatchChunk(chunk, path, parameters, cancellationToken) {
    return Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path), 'json', cancellationToken).then(response => {
        return getPointMatches(chunk, decodeSectionIDs(response), parameters, cancellationToken);
    });
}
var PointMatchSource = class PointMatchSource extends __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_vector_graphics_backend__["a" /* ParameterizedVectorGraphicsChunkSource */] {
    download(chunk, cancellationToken) {
        var parameters = this.parameters;
        var chunkGridPosition = chunk.chunkGridPosition;
        // Convert grid position to global coordinates

        var chunkPosition = __WEBPACK_IMPORTED_MODULE_6_neuroglancer_util_geom__["l" /* vec3 */].create();
        chunkPosition[2] = chunkGridPosition[2];
        // Get section IDs
        var path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` + `stack/${parameters.stack}/sectionData?minZ=${chunkPosition[2]}&` + `maxZ=${chunkPosition[2] + parameters.zoffset}`;
        return downloadPointMatchChunk(chunk, path, parameters, cancellationToken);
    }
};
PointMatchSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_render_base__["a" /* PointMatchChunkSourceParameters */])], PointMatchSource);


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RenderSourceParameters {}
/* unused harmony export RenderSourceParameters */

class TileChunkSourceParameters extends RenderSourceParameters {
    static stringify(parameters) {
        return `render:tile:${parameters.baseUrls[0]}/${parameters.owner}/${parameters.project}/` + `${parameters.stack}/${parameters.level}/${parameters.encoding}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = TileChunkSourceParameters;

TileChunkSourceParameters.RPC_ID = 'render/TileChunkSource';
class PointMatchChunkSourceParameters extends RenderSourceParameters {
    static stringify(parameters) {
        return `render:pointmatch:${parameters.baseUrls[0]}/${parameters.owner}/` + `${parameters.project}/${parameters.stack}/${parameters.matchCollection}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PointMatchChunkSourceParameters;

PointMatchChunkSourceParameters.RPC_ID = 'render/PointMatchSource';

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RenderLayer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_vector_graphics_base__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_worker_rpc__ = __webpack_require__(0);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class VectorGraphicsChunk extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__["SliceViewChunk"] {
    constructor() {
        super();
        this.source = null;
        this.vertexPositions = null;
        this.vertexNormals = null;
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initializeVolumeChunk(key, chunkGridPosition);
        var chunkBytes = 0;
        if (this.vertexPositions) {
            chunkBytes = chunkBytes + this.vertexPositions.buffer.byteLength;
        }
        if (this.vertexNormals) {
            chunkBytes = chunkBytes + this.vertexNormals.buffer.byteLength;
        }
        this.systemMemoryBytes = chunkBytes;
        this.gpuMemoryBytes = chunkBytes;
        this.vertexPositions = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        var vertexPositions = this.vertexPositions,
            vertexNormals = this.vertexNormals;

        msg['vertexPositions'] = vertexPositions;
        var vertexPositionsBuffer = vertexPositions.buffer;
        transfers.push(vertexPositionsBuffer);
        if (vertexNormals) {
            msg['vertexNormals'] = vertexNormals;
            var vertexNormalsBuffer = vertexNormals.buffer;
            transfers.push(vertexNormalsBuffer);
        }
        this.vertexPositions = null;
        this.vertexNormals = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = this.vertexPositions.byteLength;
        super.downloadSucceeded();
    }
    freeSystemMemory() {
        this.vertexPositions = null;
        this.vertexNormals = null;
    }
}
/* unused harmony export VectorGraphicsChunk */

class VectorGraphicsChunkSource extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__["SliceViewChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.spec = __WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_vector_graphics_base__["b" /* VectorGraphicsChunkSpecification */].fromObject(options['spec']);
    }
    getChunk(chunkGridPosition) {
        var key = Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_geom__["m" /* vec3Key */])(chunkGridPosition);
        var chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(VectorGraphicsChunk);
            chunk.initializeVolumeChunk(key, chunkGridPosition);
            this.addChunk(chunk);
        }
        return chunk;
    }
}
/* unused harmony export VectorGraphicsChunkSource */

var RenderLayer = class RenderLayer extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_backend__["RenderLayer"] {};
RenderLayer = __decorate([Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_worker_rpc__["g" /* registerSharedObject */])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_sliceview_vector_graphics_base__["a" /* VECTOR_GRAPHICS_RENDERLAYER_RPC_ID */])], RenderLayer);

class ParameterizedVectorGraphicsChunkSource extends VectorGraphicsChunkSource {
    constructor(rpc, options) {
        super(rpc, options);
        this.parameters = options['parameters'];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ParameterizedVectorGraphicsChunkSource;


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export VectorGraphicsType */
/* unused harmony export VECTOR_GRAPHICS_RPC_ID */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VECTOR_GRAPHICS_RENDERLAYER_RPC_ID; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_geom__ = __webpack_require__(1);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var VectorGraphicsType;
(function (VectorGraphicsType) {
    VectorGraphicsType[VectorGraphicsType["LINE"] = 0] = "LINE";
    VectorGraphicsType[VectorGraphicsType["POINT"] = 1] = "POINT";
})(VectorGraphicsType || (VectorGraphicsType = {}));
/**
 * Specifies a chunk layout and voxel size.
 */
class VectorGraphicsChunkSpecification extends __WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["d" /* SliceViewChunkSpecification */] {
    constructor(options) {
        super(options);
    }
    static make(options) {
        return new VectorGraphicsChunkSpecification(Object.assign({}, options, { transform: Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["f" /* getCombinedTransform */])(options.transform, options.vectorGraphicsSourceOptions) }));
    }
    static fromObject(msg) {
        return new VectorGraphicsChunkSpecification(msg);
    }
    static withDefaults(options) {
        var transform = options.transform,
            lowerVoxelBound = options.lowerVoxelBound,
            upperVoxelBound = options.upperVoxelBound,
            chunkDataSize = options.chunkDataSize;

        transform = Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_sliceview_base__["f" /* getCombinedTransform */])(transform, options.vectorGraphicsSourceOptions);
        if (chunkDataSize === undefined) {
            chunkDataSize = __WEBPACK_IMPORTED_MODULE_1_neuroglancer_util_geom__["l" /* vec3 */].clone(upperVoxelBound);
            if (lowerVoxelBound !== undefined) {
                for (var i = 0; i < 3; i++) {
                    chunkDataSize[i] += Math.abs(lowerVoxelBound[i]);
                }
            }
        }
        console.log(chunkDataSize);
        console.log(options);
        return new VectorGraphicsChunkSpecification(Object.assign({}, options, { transform, chunkDataSize }));
    }
    toObject() {
        return {
            transform: this.chunkLayout.transform,
            chunkDataSize: this.chunkDataSize,
            voxelSize: this.voxelSize,
            lowerVoxelBound: this.lowerVoxelBound,
            upperVoxelBound: this.upperVoxelBound,
            lowerClipBound: this.lowerClipBound,
            upperClipBound: this.upperClipBound,
            baseVoxelOffset: this.baseVoxelOffset
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = VectorGraphicsChunkSpecification;

var VECTOR_GRAPHICS_RPC_ID = 'vectorgraphics';
var VECTOR_GRAPHICS_RENDERLAYER_RPC_ID = 'vectorgraphics/RenderLayer';

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// DO NOT EDIT.  Generated from templates/neuroglancer/util/typedarray_builder.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Float32ArrayBuilder {
    constructor() {
        var initialCapacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;

        this.length = 0;
        this.data = new Float32Array(initialCapacity);
    }
    resize(newLength) {
        var data = this.data;

        if (newLength > data.length) {
            var newData = new Float32Array(Math.max(newLength, data.length * 2));
            newData.set(data.subarray(0, this.length));
            this.data = newData;
        }
        this.length = newLength;
    }
    get view() {
        var data = this.data;

        return new Float32Array(data.buffer, data.byteOffset, this.length);
    }
    shrinkToFit() {
        this.data = new Float32Array(this.view);
    }
    clear() {
        this.length = 0;
    }
    appendArray(other) {
        var length = this.length;

        this.resize(length + other.length);
        this.data.set(other, length);
    }
    eraseRange(start, end) {
        this.data.copyWithin(start, end, this.length);
        this.length -= end - start;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Float32ArrayBuilder;


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_datasource_ndstore_backend__ = __webpack_require__(40);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony export (immutable) */ __webpack_exports__["decodeManifestChunk"] = decodeManifestChunk;
/* harmony export (immutable) */ __webpack_exports__["decodeFragmentChunk"] = decodeFragmentChunk;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSource", function() { return MeshSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_precomputed_base__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_jpeg__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_backend_chunk_decoders_raw__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__ = __webpack_require__(8);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var chunkDecoders = new Map();
chunkDecoders.set(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_precomputed_base__["b" /* VolumeChunkEncoding */].RAW, __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_backend_chunk_decoders_raw__["a" /* decodeRawChunk */]);
chunkDecoders.set(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_precomputed_base__["b" /* VolumeChunkEncoding */].JPEG, __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */]);
chunkDecoders.set(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_precomputed_base__["b" /* VolumeChunkEncoding */].COMPRESSED_SEGMENTATION, __WEBPACK_IMPORTED_MODULE_3_neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__["a" /* decodeCompressedSegmentationChunk */]);
var VolumeChunkSource = class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
    }
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var path = void 0;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            var chunkPosition = this.computeChunkBounds(chunk);
            var chunkDataSize = chunk.chunkDataSize;
            path = `${parameters.path}/${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` + `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` + `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;
        }
        return Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path), 'arraybuffer', cancellationToken).then(response => this.chunkDecoder(chunk, response));
    }
};
VolumeChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_precomputed_base__["c" /* VolumeChunkSourceParameters */])], VolumeChunkSource);

function decodeManifestChunk(chunk, response) {
    return Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__["c" /* decodeJsonManifestChunk */])(chunk, response, 'fragments');
}
function decodeFragmentChunk(chunk, response) {
    var dv = new DataView(response);
    var numVertices = dv.getUint32(0, true);
    Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__["d" /* decodeTriangleVertexPositionsAndIndices */])(chunk, response, __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_endian__["b" /* Endianness */].LITTLE, /*vertexByteOffset=*/4, numVertices);
}
var MeshSource = class MeshSource extends __WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__["a" /* ParameterizedMeshSource */] {
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var requestPath = `${parameters.path}/${chunk.objectId}:${parameters.lod}`;
        return Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, requestPath), 'json', cancellationToken).then(response => decodeManifestChunk(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        var parameters = this.parameters;

        var requestPath = `${parameters.path}/${chunk.fragmentId}`;
        return Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, requestPath), 'arraybuffer', cancellationToken).then(response => decodeFragmentChunk(chunk, response));
    }
};
MeshSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_precomputed_base__["a" /* MeshSourceParameters */])], MeshSource);


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return VolumeChunkEncoding; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 0] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 1] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 2] = "COMPRESSED_SEGMENTATION";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class VolumeChunkSourceParameters {
    static stringify(parameters) {
        return `precomputed:volume:${parameters.baseUrls[0]}/${parameters.path}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = VolumeChunkSourceParameters;

VolumeChunkSourceParameters.RPC_ID = 'precomputed/VolumeChunkSource';
class MeshSourceParameters {
    static stringify(parameters) {
        return `precomputed:mesh:${parameters.baseUrls[0]}/${parameters.path}/${parameters.lod}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MeshSourceParameters;

MeshSourceParameters.RPC_ID = 'precomputed/MeshSource';

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony export (immutable) */ __webpack_exports__["decodeFragmentChunk"] = decodeFragmentChunk;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSource", function() { return MeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSource", function() { return SkeletonSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_skeleton_backend__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_jpeg__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_backend_chunk_decoders_ndstoreNpz__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_backend_chunk_decoders_raw__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__ = __webpack_require__(8);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};











var chunkDecoders = new Map();
chunkDecoders.set(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["c" /* VolumeChunkEncoding */].NPZ, __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_backend_chunk_decoders_ndstoreNpz__["a" /* decodeNdstoreNpzChunk */]);
chunkDecoders.set(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["c" /* VolumeChunkEncoding */].JPEG, __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_jpeg__["a" /* decodeJpegChunk */]);
chunkDecoders.set(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["c" /* VolumeChunkEncoding */].RAW, __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_backend_chunk_decoders_raw__["a" /* decodeRawChunk */]);
var VolumeChunkSource = class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_7_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters['encoding']);
        this.encoding = __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["c" /* VolumeChunkEncoding */][this.parameters.encoding].toLowerCase();
    }
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var path = `/neuroglancer/${this.encoding}/${parameters.key}`;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            var chunkPosition = this.computeChunkBounds(chunk);
            var chunkDataSize = chunk.chunkDataSize;

            for (var i = 0; i < 3; ++i) {
                path += `/${chunkPosition[i]},${chunkPosition[i] + chunkDataSize[i]}`;
            }
        }
        return Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, path), 'arraybuffer', cancellationToken).then(response => this.chunkDecoder(chunk, response));
    }
};
VolumeChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["d" /* VolumeChunkSourceParameters */])], VolumeChunkSource);

function decodeFragmentChunk(chunk, response) {
    var dv = new DataView(response);
    var numVertices = dv.getUint32(0, true);
    Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__["d" /* decodeTriangleVertexPositionsAndIndices */])(chunk, response, __WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__["b" /* Endianness */].LITTLE, /*vertexByteOffset=*/4, numVertices);
}
var MeshSource = class MeshSource extends __WEBPACK_IMPORTED_MODULE_2_neuroglancer_mesh_backend__["a" /* ParameterizedMeshSource */] {
    download(chunk) {
        // No manifest chunk to download, as there is always only a single fragment.
        chunk.fragmentIds = [''];
        return Promise.resolve(undefined);
    }
    downloadFragment(chunk, cancellationToken) {
        var parameters = this.parameters;

        var requestPath = `/neuroglancer/mesh/${parameters.key}/${chunk.manifestChunk.objectId}`;
        return Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, requestPath), 'arraybuffer', cancellationToken).then(response => decodeFragmentChunk(chunk, response));
    }
};
MeshSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["a" /* MeshSourceParameters */])], MeshSource);

function decodeSkeletonChunk(chunk, response, vertexAttributes) {
    var dv = new DataView(response);
    var numVertices = dv.getUint32(0, true);
    var numEdges = dv.getUint32(4, true);
    var vertexPositionsStartOffset = 8;
    var curOffset = 8 + numVertices * 4 * 3;
    var attributes = [];
    for (var info of vertexAttributes.values()) {
        var bytesPerVertex = __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_data_type__["a" /* DATA_TYPE_BYTES */][info.dataType] * info.numComponents;
        var totalBytes = bytesPerVertex * numVertices;
        var attribute = new Uint8Array(response, curOffset, totalBytes);
        switch (bytesPerVertex) {
            case 2:
                Object(__WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__["c" /* convertEndian16 */])(attribute, __WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__["b" /* Endianness */].LITTLE);
                break;
            case 4:
            case 8:
                Object(__WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__["d" /* convertEndian32 */])(attribute, __WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__["b" /* Endianness */].LITTLE);
                break;
        }
        attributes.push(attribute);
        curOffset += totalBytes;
    }
    chunk.vertexAttributes = attributes;
    Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_skeleton_backend__["b" /* decodeSkeletonVertexPositionsAndIndices */])(chunk, response, __WEBPACK_IMPORTED_MODULE_9_neuroglancer_util_endian__["b" /* Endianness */].LITTLE, /*vertexByteOffset=*/vertexPositionsStartOffset, numVertices,
    /*indexByteOffset=*/curOffset, /*numEdges=*/numEdges);
}
var SkeletonSource = class SkeletonSource extends __WEBPACK_IMPORTED_MODULE_3_neuroglancer_skeleton_backend__["a" /* ParameterizedSkeletonSource */] {
    download(chunk, cancellationToken) {
        var parameters = this.parameters;

        var requestPath = `/neuroglancer/skeleton/${parameters.key}/${chunk.objectId}`;
        return Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__["e" /* sendHttpRequest */])(Object(__WEBPACK_IMPORTED_MODULE_10_neuroglancer_util_http_request__["c" /* openShardedHttpRequest */])(parameters.baseUrls, requestPath), 'arraybuffer', cancellationToken).then(response => decodeSkeletonChunk(chunk, response, parameters.vertexAttributes));
    }
};
SkeletonSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_python_base__["b" /* SkeletonSourceParameters */])], SkeletonSource);


/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return VolumeChunkEncoding; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 0] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["NPZ"] = 1] = "NPZ";
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 2] = "RAW";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class VolumeChunkSourceParameters {
    static stringify(parameters) {
        return `python:volume:${parameters['baseUrls'][0]}/${parameters['key']}/` + `${VolumeChunkEncoding[parameters['encoding']]}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["d"] = VolumeChunkSourceParameters;

VolumeChunkSourceParameters.RPC_ID = 'python/VolumeChunkSource';
class MeshSourceParameters {
    static stringify(parameters) {
        return `python:mesh:${parameters['baseUrls'][0]}/${parameters['key']}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MeshSourceParameters;

MeshSourceParameters.RPC_ID = 'python/MeshSource';
class SkeletonSourceParameters {
    static stringify(parameters) {
        return `python:skeleton:${parameters['baseUrls'][0]}/${parameters['key']}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = SkeletonSourceParameters;

SkeletonSourceParameters.RPC_ID = 'python/SkeletonSource';

/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_chunk_manager_generic_file_source__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_raw__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_volume_backend__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_endian__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_geom__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_neuroglancer_worker_rpc__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_nifti_reader_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};











class NiftiFileData {}
/* harmony export (immutable) */ __webpack_exports__["NiftiFileData"] = NiftiFileData;

function decodeNiftiFile(buffer) {
    if (Object(__WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["isCompressed"])(buffer)) {
        buffer = Object(__WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["decompress"])(buffer);
    }
    var data = new NiftiFileData();
    data.uncompressedData = buffer;
    var header = Object(__WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["readHeader"])(buffer);
    if (header === null) {
        throw new Error('Failed to parse NIFTI header.');
    }
    data.header = header;
    return data;
}
function getNiftiFileData(chunkManager, url, getPriority, cancellationToken) {
    return __WEBPACK_IMPORTED_MODULE_2_neuroglancer_chunk_manager_generic_file_source__["a" /* GenericFileSource */].getData(chunkManager, decodeNiftiFile, url, getPriority, cancellationToken);
}
var NIFTI_HEADER_INFO_PRIORITY = 1000;
/**
 * Caller must increment ref count of chunkManager.
 */
function getNiftiHeaderInfo(chunkManager, url, cancellationToken) {
    return getNiftiFileData(chunkManager, url, () => ({ priorityTier: __WEBPACK_IMPORTED_MODULE_1_neuroglancer_chunk_manager_base__["d" /* ChunkPriorityTier */].VISIBLE, priority: NIFTI_HEADER_INFO_PRIORITY }), cancellationToken).then(data => data.header);
}
function convertAffine(affine) {
    return __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_geom__["g" /* mat4 */].fromValues(affine[0][0], affine[1][0], affine[2][0], affine[3][0], affine[0][1], affine[1][1], affine[2][1], affine[3][1], affine[0][2], affine[1][2], affine[2][2], affine[3][2], affine[0][3], affine[1][3], affine[2][3], affine[3][3]);
}
var DATA_TYPE_CONVERSIONS = new Map([[__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].INT8, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT8, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].IMAGE }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].UINT8, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT8, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].IMAGE }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].INT16, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT16, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].IMAGE }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].UINT16, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT16, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].IMAGE }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].INT32, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT32, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].SEGMENTATION }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].UINT32, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT32, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].SEGMENTATION }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].INT64, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT64, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].SEGMENTATION }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].UINT64, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].UINT64, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].SEGMENTATION }], [__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */].FLOAT32, { dataType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["a" /* DataType */].FLOAT32, volumeType: __WEBPACK_IMPORTED_MODULE_6_neuroglancer_sliceview_volume_base__["d" /* VolumeType */].IMAGE }]]);
Object(__WEBPACK_IMPORTED_MODULE_9_neuroglancer_worker_rpc__["e" /* registerPromiseRPC */])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["a" /* GET_NIFTI_VOLUME_INFO_RPC_ID */], function (x, cancellationToken) {
    return getNiftiHeaderInfo(this.getRef(x['chunkManager']), x['url'], cancellationToken).then(header => {
        var dataTypeInfo = DATA_TYPE_CONVERSIONS.get(header.datatypeCode);
        if (dataTypeInfo === undefined) {
            throw new Error(`Unsupported data type: ` + `${__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["b" /* NiftiDataType */][header.datatypeCode] || header.datatypeCode}.`);
        }
        if (header.dims[4] !== 1) {
            throw new Error(`Time series data not supported.`);
        }
        var spatialUnits = header.xyzt_units & __WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["NIFTI1"].SPATIAL_UNITS_MASK;
        var unitsPerNm = 1;
        switch (spatialUnits) {
            case __WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["NIFTI1"].UNITS_METER:
                unitsPerNm = 1e9;
                break;
            case __WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["NIFTI1"].UNITS_MM:
                unitsPerNm = 1e6;
                break;
            case __WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["NIFTI1"].UNITS_MICRON:
                unitsPerNm = 1e3;
                break;
        }
        var quatern_b = header.quatern_b,
            quatern_c = header.quatern_c,
            quatern_d = header.quatern_d;

        var quatern_a = Math.sqrt(1.0 - quatern_b * quatern_b - quatern_c * quatern_c - quatern_d * quatern_d);
        var qfac = header.pixDims[0] === -1 ? -1 : 1;
        var info = {
            description: header.description,
            affine: convertAffine(header.affine),
            dataType: dataTypeInfo.dataType,
            numChannels: header.dims[5],
            volumeType: dataTypeInfo.volumeType,
            voxelSize: __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_geom__["l" /* vec3 */].fromValues(unitsPerNm * header.pixDims[1], unitsPerNm * header.pixDims[2], unitsPerNm * header.pixDims[3]),
            volumeSize: __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_geom__["l" /* vec3 */].fromValues(header.dims[1], header.dims[2], header.dims[3]),
            qoffset: __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_geom__["l" /* vec3 */].fromValues(unitsPerNm * header.qoffset_x, unitsPerNm * header.qoffset_y, unitsPerNm * header.qoffset_z),
            qform_code: header.qform_code,
            sform_code: header.sform_code,
            qfac: qfac,
            quatern: __WEBPACK_IMPORTED_MODULE_8_neuroglancer_util_geom__["i" /* quat */].fromValues(quatern_b, quatern_c, quatern_d, quatern_a)
        };
        return { value: info };
    });
});
var VolumeChunkSource = class VolumeChunkSource extends __WEBPACK_IMPORTED_MODULE_5_neuroglancer_sliceview_volume_backend__["a" /* ParameterizedVolumeChunkSource */] {
    download(chunk, cancellationToken) {
        chunk.chunkDataSize = this.spec.chunkDataSize;
        return getNiftiFileData(this.chunkManager.addRef(), this.parameters.url, () => ({ priorityTier: chunk.priorityTier, priority: chunk.priority }), cancellationToken).then(data => {
            var imageBuffer = Object(__WEBPACK_IMPORTED_MODULE_10_nifti_reader_js__["readImage"])(data.header, data.uncompressedData);
            Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_sliceview_backend_chunk_decoders_raw__["a" /* decodeRawChunk */])(chunk, imageBuffer, data.header.littleEndian ? __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_endian__["b" /* Endianness */].LITTLE : __WEBPACK_IMPORTED_MODULE_7_neuroglancer_util_endian__["b" /* Endianness */].BIG);
        });
    }
};
VolumeChunkSource = __decorate([Object(__WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_backend__["registerChunkSource"])(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_datasource_nifti_base__["c" /* VolumeSourceParameters */])], VolumeChunkSource);


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getObjectId;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var OBJECT_ID_SYMBOL = Symbol('objectId');
var nextObjectId = 0;
/**
 * Returns a string that uniquely identifies a particular primitive value or object instance.
 */
function getObjectId(x) {
    if (x instanceof Object) {
        var id = x[OBJECT_ID_SYMBOL];
        if (id === undefined) {
            id = x[OBJECT_ID_SYMBOL] = nextObjectId++;
        }
        return `o${id}`;
    } else {
        return '' + JSON.stringify(x);
    }
}

/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GET_NIFTI_VOLUME_INFO_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return NiftiDataType; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var GET_NIFTI_VOLUME_INFO_RPC_ID = 'nifti/getNiftiVolumeInfo';
var NiftiDataType;
(function (NiftiDataType) {
    NiftiDataType[NiftiDataType["NONE"] = 0] = "NONE";
    NiftiDataType[NiftiDataType["BINARY"] = 1] = "BINARY";
    NiftiDataType[NiftiDataType["UINT8"] = 2] = "UINT8";
    NiftiDataType[NiftiDataType["INT16"] = 4] = "INT16";
    NiftiDataType[NiftiDataType["INT32"] = 8] = "INT32";
    NiftiDataType[NiftiDataType["FLOAT32"] = 16] = "FLOAT32";
    NiftiDataType[NiftiDataType["COMPLEX64"] = 32] = "COMPLEX64";
    NiftiDataType[NiftiDataType["FLOAT64"] = 64] = "FLOAT64";
    NiftiDataType[NiftiDataType["RGB24"] = 128] = "RGB24";
    NiftiDataType[NiftiDataType["INT8"] = 256] = "INT8";
    NiftiDataType[NiftiDataType["UINT16"] = 512] = "UINT16";
    NiftiDataType[NiftiDataType["UINT32"] = 768] = "UINT32";
    NiftiDataType[NiftiDataType["INT64"] = 1024] = "INT64";
    NiftiDataType[NiftiDataType["UINT64"] = 1280] = "UINT64";
    NiftiDataType[NiftiDataType["FLOAT128"] = 1536] = "FLOAT128";
    NiftiDataType[NiftiDataType["COMPLEX128"] = 1792] = "COMPLEX128";
    NiftiDataType[NiftiDataType["COMPLEX256"] = 2048] = "COMPLEX256";
})(NiftiDataType || (NiftiDataType = {}));
class VolumeSourceParameters {
    static stringify(p) {
        return `nifti:${p.url}`;
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = VolumeSourceParameters;

VolumeSourceParameters.RPC_ID = 'nifti/VolumeChunkSource';

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/

/**
 * nifti
 * @type {*|{}}
 */
var nifti = nifti || {};
nifti.NIFTI1 = nifti.NIFTI1 || (( true) ? __webpack_require__(47) : null);
nifti.NIFTI2 = nifti.NIFTI2 || (( true) ? __webpack_require__(107) : null);
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(28) : null);

var pako = pako || (( true) ? __webpack_require__(25) : null);



/*** Static Methods ***/

/**
 * Returns true if this data represents a NIFTI-1 header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI1 = function (data) {
    var buf, mag1, mag2, mag3;

    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {
        return false;
    }

    buf = new DataView(data);

    if (buf)

    mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);
    mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);
    mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);

    return !!((mag1 === nifti.NIFTI1.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI1.MAGIC_NUMBER[1]) &&
        (mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]));
};


/**
 * Returns true if this data represents a NIFTI-2 header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI2 = function (data) {
    var buf, mag1, mag2, mag3;

    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {
        return false;
    }

    buf = new DataView(data);
    mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);
    mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);
    mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);

    return !!((mag1 === nifti.NIFTI2.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI2.MAGIC_NUMBER[1]) &&
    (mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]));
};



/**
 * Returns true if this data represents a NIFTI header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI = function (data) {
    return (nifti.isNIFTI1(data) || nifti.isNIFTI2(data));
};



/**
 * Returns true if this data is GZIP compressed.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isCompressed = function (data) {
    var buf, magicCookie1, magicCookie2;

    if (data) {
        buf = new DataView(data);

        magicCookie1 = buf.getUint8(0);
        magicCookie2 = buf.getUint8(1);

        if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {
            return true;
        }

        if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {
            return true;
        }
    }

    return false;
};



/**
 * Returns decompressed data.
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.decompress = function (data) {
    return pako.inflate(data).buffer;
};



/**
 * Reads and returns the header object.
 * @param {ArrayBuffer} data
 * @returns {nifti.NIFTI1|nifti.NIFTI2|null}
 */
nifti.readHeader = function (data) {
    var header = null;

    if (nifti.isCompressed(data)) {
        data = nifti.decompress(data);
    }

    if (nifti.isNIFTI1(data)) {
        header = new nifti.NIFTI1();
    } else if (nifti.isNIFTI2(data)) {
        header = new nifti.NIFTI2();
    }

    if (header) {
        header.readHeader(data);
    } else {
        console.error("That file does not appear to be NIFTI!");
    }

    return header;
};



/**
 * Returns true if this header contains an extension.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @returns {boolean}
 */
nifti.hasExtension = function (header) {
    return (header.extensionFlag[0] != 0);
};



/**
 * Returns the image data.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readImage = function (header, data) {
    var imageOffset = header.vox_offset,
        timeDim = 1,
        statDim = 1;

    if (header.dims[4]) {
        timeDim = header.dims[4];
    }

    if (header.dims[5]) {
        statDim = header.dims[5];
    }

    var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);
    return data.slice(imageOffset, imageOffset + imageSize);
};



/**
 * Returns the extension data (including extension header).
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readExtension = function (header, data) {
    var loc = header.getExtensionLocation(),
        size = header.extensionSize;

    return data.slice(loc, loc + size);
};



/**
 * Returns the extension data.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readExtensionData = function (header, data) {
    var loc = header.getExtensionLocation(),
        size = header.extensionSize;

    return data.slice(loc + 8, loc + size - 8);
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti;
}


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(28) : null);
nifti.NIFTI1 = nifti.NIFTI1 || (( true) ? __webpack_require__(47) : null);


/*** Constructor ***/

/**
 * The NIFTI2 constructor.
 * @constructor
 * @property {boolean} littleEndian
 * @property {number} dim_info
 * @property {number[]} dims - image dimensions
 * @property {number} intent_p1
 * @property {number} intent_p2
 * @property {number} intent_p3
 * @property {number} intent_code
 * @property {number} datatypeCode
 * @property {number} numBitsPerVoxel
 * @property {number} slice_start
 * @property {number} slice_end
 * @property {number} slice_code
 * @property {number[]} pixDims - voxel dimensions
 * @property {number} vox_offset
 * @property {number} scl_slope
 * @property {number} scl_inter
 * @property {number} xyzt_units
 * @property {number} cal_max
 * @property {number} cal_min
 * @property {number} slice_duration
 * @property {number} toffset
 * @property {string} description
 * @property {string} aux_file
 * @property {string} intent_name
 * @property {number} qform_code
 * @property {number} sform_code
 * @property {number} quatern_b
 * @property {number} quatern_c
 * @property {number} quatern_d
 * @property {number} quatern_x
 * @property {number} quatern_y
 * @property {number} quatern_z
 * @property {Array.<Array.<number>>} affine
 * @property {string} magic
 * @property {number[]} extensionFlag
 * @type {Function}
 */
nifti.NIFTI2 = nifti.NIFTI2 || function () {
    this.littleEndian = false;
    this.dim_info = 0;
    this.dims = [];
    this.intent_p1 = 0;
    this.intent_p2 = 0;
    this.intent_p3 = 0;
    this.intent_code = 0;
    this.datatypeCode = 0;
    this.numBitsPerVoxel = 0;
    this.slice_start = 0;
    this.slice_end = 0;
    this.slice_code = 0;
    this.pixDims = [];
    this.vox_offset = 0;
    this.scl_slope = 1;
    this.scl_inter = 0;
    this.xyzt_units = 0;
    this.cal_max = 0;
    this.cal_min = 0;
    this.slice_duration = 0;
    this.toffset = 0;
    this.description = "";
    this.aux_file = "";
    this.intent_name = "";
    this.qform_code = 0;
    this.sform_code = 0;
    this.quatern_b = 0;
    this.quatern_c = 0;
    this.quatern_d = 0;
    this.qoffset_x = 0;
    this.qoffset_y = 0;
    this.qoffset_z = 0;
    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    this.magic = 0;
    this.extensionFlag = [0, 0, 0, 0];
};



/*** Static Pseudo-constants ***/

nifti.NIFTI2.MAGIC_COOKIE = 540;
nifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;
nifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A];  // n+2\0



/*** Prototype Methods ***/

/**
 * Reads the header data.
 * @param {ArrayBuffer} data
 */
nifti.NIFTI2.prototype.readHeader = function (data) {
    var rawData = new DataView(data),
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
        ctr,
        ctrOut,
        ctrIn,
        index,
        array;

    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {  // try as little endian
        this.littleEndian = true;
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
    }

    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {
        throw new Error("This does not appear to be a NIFTI file!");
    }

    this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);
    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 16 + (ctr * 8);
        this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);
    }

    this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);
    this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);
    this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 104 + (ctr * 8);
        this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
    }

    this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);

    this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);
    this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);

    this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);
    this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);

    this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);

    this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);

    this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);
    this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);

    this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);
    this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);

    this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);
    this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);

    this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);
    this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);
    this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);
    this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);
    this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);
    this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);

    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
            index = 400 + (((ctrOut * 4) + ctrIn) * 8);
            this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
        }
    }

    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;

    this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);
    this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);
    this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);
    this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);

    this.dim_info = nifti.Utils.getByteAt(rawData, 524);

    if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {
        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);
        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);
        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);
        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);

        if (this.extensionFlag[0]) {
            this.extensionSize = this.getExtensionSize(rawData);
            this.extensionCode = this.getExtensionCode(rawData);
        }
    }
};



/**
 * Returns a formatted string of header fields.
 * @returns {string}
 */
nifti.NIFTI2.prototype.toFormattedString = function () {
    var fmt = nifti.Utils.formatNumber,
        string = "";

    string += ("Datatype = " +  + this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n");
    string += ("Bits Per Voxel = " + " = " + this.numBitsPerVoxel + "\n");
    string += ("Image Dimensions" + " (1-8): " +
        this.dims[0] + ", " +
        this.dims[1] + ", " +
        this.dims[2] + ", " +
        this.dims[3] + ", " +
        this.dims[4] + ", " +
        this.dims[5] + ", " +
        this.dims[6] + ", " +
        this.dims[7] + "\n");

    string += ("Intent Parameters (1-3): " +
        this.intent_p1 + ", " +
        this.intent_p2 + ", " +
        this.intent_p3) + "\n";

    string += ("Voxel Dimensions (1-8): " +
        fmt(this.pixDims[0]) + ", " +
        fmt(this.pixDims[1]) + ", " +
        fmt(this.pixDims[2]) + ", " +
        fmt(this.pixDims[3]) + ", " +
        fmt(this.pixDims[4]) + ", " +
        fmt(this.pixDims[5]) + ", " +
        fmt(this.pixDims[6]) + ", " +
        fmt(this.pixDims[7]) + "\n");

    string += ("Image Offset = " + this.vox_offset + "\n");
    string += ("Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n");
    string += ("Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n");
    string += ("Slice Duration = " + this.slice_duration + "\n");
    string += ("Time Axis Shift = " + this.toffset + "\n");
    string += ("Slice Start = " + this.slice_start + "\n");
    string += ("Slice End = " + this.slice_end + "\n");
    string += ("Description: \"" + this.description + "\"\n");
    string += ("Auxiliary File: \"" + this.aux_file + "\"\n");
    string += ("Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n");
    string += ("S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n");
    string += ("Quaternion Parameters:  " +
    "b = " + fmt(this.quatern_b) + "  " +
    "c = " + fmt(this.quatern_c) + "  " +
    "d = " + fmt(this.quatern_d) + "\n");

    string += ("Quaternion Offsets:  " +
    "x = " + this.qoffset_x + "  " +
    "y = " + this.qoffset_y + "  " +
    "z = " + this.qoffset_z + "\n");

    string += ("S-Form Parameters X: " +
    fmt(this.affine[0][0]) + ", " +
    fmt(this.affine[0][1]) + ", " +
    fmt(this.affine[0][2]) + ", " +
    fmt(this.affine[0][3]) + "\n");

    string += ("S-Form Parameters Y: " +
    fmt(this.affine[1][0]) + ", " +
    fmt(this.affine[1][1]) + ", " +
    fmt(this.affine[1][2]) + ", " +
    fmt(this.affine[1][3]) + "\n");

    string += ("S-Form Parameters Z: " +
    fmt(this.affine[2][0]) + ", " +
    fmt(this.affine[2][1]) + ", " +
    fmt(this.affine[2][2]) + ", " +
    fmt(this.affine[2][3]) + "\n");

    string += ("Slice Code = " + this.slice_code + "\n");
    string += ("Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n");
    string += ("Intent Code = " + this.intent_code + "\n");
    string += ("Intent Name: \"" + this.intent_name + "\"\n");

    string += ("Dim Info = " + this.dim_info + "\n");

    return string;
};



/**
 * Returns the byte index of the extension.
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionLocation = function() {
    return nifti.NIFTI2.MAGIC_COOKIE + 4;
};



/**
 * Returns the extension size.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;



/**
 * Returns the extension code.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;



/**
 * Returns a human-readable string of datatype.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;



/**
 * Returns a human-readable string of transform type.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;



/**
 * Returns a human-readable string of spatial and temporal units.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;



/**
 * Returns the qform matrix.
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;



/**
 * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {number} qb
 * @param {number} qc
 * @param {number} qd
 * @param {number} qx
 * @param {number} qy
 * @param {number} qz
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @param {number} qfac
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;



/**
 * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {Array.<Array.<number>>} R
 * @returns {string}
 */
nifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;



nifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;



nifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.NIFTI2;
}


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_generic_file_source__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_vtk_parse__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_single_mesh_backend__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_gzip__ = __webpack_require__(49);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * This needs to be a global function, because it identifies the instance of GenericFileSource to
 * use.
 */
function parseVTKFromArrayBuffer(buffer) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_datasource_vtk_parse__["a" /* parseVTK */])(Object(__WEBPACK_IMPORTED_MODULE_4_neuroglancer_util_gzip__["a" /* maybeDecompressGzip */])(buffer));
}
Object(__WEBPACK_IMPORTED_MODULE_2_neuroglancer_single_mesh_backend__["a" /* registerSingleMeshFactory */])('vtk', {
    description: 'VTK',
    getMesh: (chunkManager, url, getPriority, cancellationToken) => __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_generic_file_source__["a" /* GenericFileSource */].getData(chunkManager.addRef(), parseVTKFromArrayBuffer, url, getPriority, cancellationToken).then(mesh => {
        var result = {
            info: {
                numTriangles: mesh.numTriangles,
                numVertices: mesh.numVertices,
                vertexAttributes: []
            },
            indices: mesh.indices,
            vertexPositions: mesh.vertexPositions,
            vertexAttributes: []
        };
        for (var attribute of mesh.vertexAttributes) {
            result.info.vertexAttributes.push({
                name: attribute.name,
                dataType: __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_data_type__["b" /* DataType */].FLOAT32,
                numComponents: attribute.numComponents
            });
            result.vertexAttributes.push(attribute.data);
        }
        return result;
    })
});

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseVTK;
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Parser for VTK file format.
 * See http://www.vtk.org/wp-content/uploads/2015/04/file-formats.pdf
 */
var maxHeaderLength = 1000;
var vtkHeaderPattern = /^[ \t]*#[ \t]+vtk[ \t]+DataFile[ \t]+Version[ \t]+([^\s]+)[ \t]*\n(.*)\n[ \t]*(ASCII|BINARY)[ \t]*\n[ \t]*DATASET[ \t]+([^ ]+)[ \t]*\n/;
var pointDataHeaderPattern = /^[ \t]*POINT_DATA[ \t]+([0-9]+)[ \t]*$/;
var pointsHeaderPattern = /^[ \t]*POINTS[ \t]+([0-9]+)[ \t]+([^\s]+)[ \t]*$/;
var scalarsHeaderPattern = /^[ \t]*SCALARS[ \t]+([^\s]+)[ \t]+([^\s]+)(?:[ \t]+([0-9]+))?[ \t]*$/;
var scalarsLookupTableHeaderPattern = /^[ \t]*LOOKUP_TABLE[ \t]+([^\s]+)[ \t]*$/;
var polygonsHeaderPattern = /^[ \t]*POLYGONS[ \t]+([0-9]+)[ \t]+([0-9]+)[ \t]*$/;
var trianglePattern = /^[ \t]*3[ \t]+([0-9]+)[ \t]+([0-9]+)[ \t]+([0-9]+)[ \t]*$/;
var blankLinePattern = /^[ \t]*$/;
class TriangularMesh {
    constructor(header, numVertices, vertexPositions, numTriangles, indices, vertexAttributes) {
        this.header = header;
        this.numVertices = numVertices;
        this.vertexPositions = vertexPositions;
        this.numTriangles = numTriangles;
        this.indices = indices;
        this.vertexAttributes = vertexAttributes;
    }
}
/* unused harmony export TriangularMesh */

function parsePolydataAscii(header, data) {
    var decoder = new TextDecoder();
    var text = decoder.decode(data);
    var lines = text.split('\n');
    var numLines = lines.length;
    var lineNumber = 0;
    var numVertices = -1;
    var vertexPositions = undefined;
    var numTriangles = -1;
    var indices = undefined;
    var vertexAttributes = new Array();
    function parseArray(fieldName, n, numComponents, _dataType) {
        // TODO(jbms): respect dataType
        var pattern = RegExp('^[ \t]*' + '([^\s]+)[ \t]+'.repeat(numComponents - 1) + '([^\s]+)[ \t]*$');
        if (numLines - lineNumber < n) {
            throw new Error(`VTK data ended unexpectedly while parsing ${fieldName}.`);
        }
        var result = new Float32Array(n * numComponents);
        var outIndex = 0;
        for (var i = 0; i < n; ++i) {
            var line = lines[lineNumber++];
            var m = line.match(pattern);
            if (m === null) {
                throw new Error(`Failed to parse ${fieldName} line ${i}: ${JSON.stringify(line)}.`);
            }
            for (var j = 0; j < numComponents; ++j) {
                result[outIndex++] = parseFloat(m[j + 1]);
            }
        }
        return result;
    }
    function parsePoints(nVertices, dataType) {
        if (indices !== undefined) {
            throw new Error(`POINTS specified more than once.`);
        }
        numVertices = nVertices;
        vertexPositions = parseArray('POINTS', nVertices, 3, dataType);
    }
    function parsePolygons(numFaces, numValues) {
        if (indices !== undefined) {
            throw new Error(`VERTICES specified more than once.`);
        }
        if (numLines - lineNumber < numFaces) {
            throw new Error(`VTK data ended unexpectedly`);
        }
        if (numValues !== numFaces * 4) {
            throw new Error(`Only triangular faces are supported.`);
        }
        numTriangles = numFaces;
        indices = new Uint32Array(numFaces * 3);
        var outIndex = 0;
        for (var i = 0; i < numFaces; ++i) {
            var m = lines[lineNumber++].match(trianglePattern);
            if (m === null) {
                throw new Error(`Failed to parse indices for face ${i}`);
            }
            indices[outIndex++] = parseInt(m[1], 10);
            indices[outIndex++] = parseInt(m[2], 10);
            indices[outIndex++] = parseInt(m[3], 10);
        }
    }
    function parseScalars(name, dataType, numComponents) {
        if (lineNumber === numLines) {
            throw new Error(`Expected LOOKUP_TABLE directive.`);
        }
        var firstLine = lines[lineNumber++];
        var match = firstLine.match(scalarsLookupTableHeaderPattern);
        if (match === null) {
            throw new Error(`Expected LOOKUP_TABLE directive in ${JSON.stringify(firstLine)}.`);
        }
        var tableName = match[1];
        var values = parseArray(`SCALARS(${name})`, numVertices, numComponents, dataType);
        vertexAttributes.push({ name, data: values, numComponents, dataType, tableName });
    }
    function parsePointData(nVertices) {
        if (numVertices !== nVertices) {
            throw new Error(`Number of vertices specified in POINT_DATA section (${nVertices}) ` + `must match number of points (${numVertices}).`);
        }
        while (lineNumber < numLines) {
            var line = lines[lineNumber];
            if (line.match(blankLinePattern)) {
                ++lineNumber;
                continue;
            }
            var match = void 0;
            match = line.match(scalarsHeaderPattern);
            if (match !== null) {
                var numComponents = void 0;
                if (match[3] === undefined) {
                    numComponents = 1;
                } else {
                    numComponents = parseInt(match[3], 10);
                }
                ++lineNumber;
                parseScalars(match[1], match[2], numComponents);
                continue;
            }
        }
    }
    while (lineNumber < numLines) {
        var line = lines[lineNumber];
        if (line.match(blankLinePattern)) {
            ++lineNumber;
            continue;
        }
        var match = void 0;
        match = line.match(pointsHeaderPattern);
        if (match !== null) {
            ++lineNumber;
            parsePoints(parseInt(match[1], 10), match[2]);
            continue;
        }
        match = line.match(polygonsHeaderPattern);
        if (match !== null) {
            ++lineNumber;
            parsePolygons(parseInt(match[1], 10), parseInt(match[2], 10));
            continue;
        }
        match = line.match(pointDataHeaderPattern);
        if (match !== null) {
            ++lineNumber;
            parsePointData(parseInt(match[1], 10));
            break;
        }
        throw new Error(`Failed to parse VTK line ${JSON.stringify(line)}.`);
    }
    if (vertexPositions === undefined) {
        throw new Error(`Vertex positions not specified.`);
    }
    if (indices === undefined) {
        throw new Error(`Indices not specified.`);
    }
    return new TriangularMesh(header, numVertices, vertexPositions, numTriangles, indices, vertexAttributes);
}
var asciiFormatParsers = new Map([['POLYDATA', parsePolydataAscii]]);
function parseVTK(data) {
    // Decode start of data as UTF-8 to determine whether it is ASCII or BINARY format.  Decoding
    // errors (as will occur if it is binary format) will be ignored.
    var decoder = new TextDecoder();
    var decodedHeaderString = decoder.decode(new Uint8Array(data.buffer, data.byteOffset, Math.min(data.byteLength, maxHeaderLength)));
    var headerMatch = decodedHeaderString.match(vtkHeaderPattern);
    if (headerMatch === null) {
        throw new Error(`Failed to parse VTK file header.`);
    }
    var byteOffset = headerMatch[0].length;
    var datasetType = headerMatch[4];
    var dataFormat = headerMatch[3];
    var header = {
        version: headerMatch[1],
        comment: headerMatch[2],
        datasetType,
        dataFormat
    };
    var remainingData = new Uint8Array(data.buffer, data.byteOffset + byteOffset, data.byteLength - byteOffset);
    if (dataFormat === 'ASCII') {
        var formatParser = asciiFormatParsers.get(datasetType);
        if (formatParser === undefined) {
            throw new Error(`VTK dataset type ${JSON.stringify(datasetType)} is not supported.`);
        }
        return formatParser(header, remainingData);
    }
    throw new Error(`VTK data format ${JSON.stringify(dataFormat)} is not supported.`);
}

/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SINGLE_MESH_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SINGLE_MESH_SOURCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GET_SINGLE_MESH_INFO_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SINGLE_MESH_CHUNK_KEY; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SINGLE_MESH_LAYER_RPC_ID = 'single_mesh/SingleMeshLayer';
var SINGLE_MESH_SOURCE_RPC_ID = 'single_mesh/SingleMeshSource';
var GET_SINGLE_MESH_INFO_RPC_ID = 'single_mesh/getSingleMeshInfo';
var SINGLE_MESH_CHUNK_KEY = '';
class SingleMeshSourceParameters {
    static stringify(p) {
        return `single_mesh:${JSON.stringify(p)}`;
    }
}
/* unused harmony export SingleMeshSourceParameters */

SingleMeshSourceParameters.RPC_ID = 'single_mesh/SingleMeshSource';

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_generic_file_source__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_neuroglancer_single_mesh_backend__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_data_type__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_gzip__ = __webpack_require__(49);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




function parseCSVFromArrayBuffer(buffer) {
    var decoder = new TextDecoder();
    var text = decoder.decode(Object(__WEBPACK_IMPORTED_MODULE_3_neuroglancer_util_gzip__["a" /* maybeDecompressGzip */])(buffer));
    var lines = text.trim().split(/\n+/);
    if (!lines) {
        throw new Error(`CSV file is empty.`);
    }
    var headers = lines[0].split(',');
    var attributeInfo = headers.map(name => ({ name: name.trim(), dataType: __WEBPACK_IMPORTED_MODULE_2_neuroglancer_util_data_type__["b" /* DataType */].FLOAT32, numComponents: 1 }));
    var numRows = lines.length - 1;
    var numColumns = headers.length;
    var attributes = headers.map(() => new Float32Array(numRows));
    for (var i = 0; i < numRows; ++i) {
        var fields = lines[i + 1].split(',');
        for (var j = 0; j < numColumns; ++j) {
            attributes[j][i] = parseFloat(fields[j]);
        }
    }
    return {
        numVertices: numRows,
        attributeInfo,
        attributes
    };
}
Object(__WEBPACK_IMPORTED_MODULE_1_neuroglancer_single_mesh_backend__["b" /* registerSingleMeshVertexAttributesFactory */])('csv', {
    description: 'Comma separated value text file',
    getMeshVertexAttributes: (chunkManager, url, getPriority, cancellationToken) => __WEBPACK_IMPORTED_MODULE_0_neuroglancer_chunk_manager_generic_file_source__["a" /* GenericFileSource */].getData(chunkManager.addRef(), parseCSVFromArrayBuffer, url, getPriority, cancellationToken)
});

/***/ })
/******/ ]);
//# sourceMappingURL=chunk_worker.bundle.js.map